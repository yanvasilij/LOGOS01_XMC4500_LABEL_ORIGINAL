/*******************************************************************************
**  DAVE App Name : USBLD001       App Version: 1.0.18               
**  This file is generated by DAVE, User modification to this file will be    **
**  overwritten at the next code generation.                                  **
*******************************************************************************/


/* THIS FILE IS PROVIDED BY DAVE.
 * THIS FILE IS GENERATED.
 */
 
/*******************************************************************************
 *
 * Copyright (C) 2011 Infineon Technologies AG. All rights reserved.
 *
 * Infineon Technologies AG (Infineon) is supplying this software for use with
 * Infineon's microcontrollers.
 * This file can be freely distributed within development tools that are
 * supporting such microcontrollers.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
 * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC4000 Series                                         **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR : App Developer                                                     **
**                                                                            **
** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
**                                                                            **
** MODIFICATION DATE : Dec 4, 2012                                            **
**                                                                            **
*******************************************************************************/

/*******************************************************************************
**                       Author(s) Identity                                   **
********************************************************************************
**                                                                            **
** Initials    Name                                                           **
** ---------------------------------------------------------------------------**
** CM          App Developer                                                  **
*******************************************************************************/
#ifndef _TYPE_CM_H
#define _TYPE_CM_H

#ifdef __cplusplus
extern "C"{
#endif
#include <stdarg.h>
#include <string.h>
#include "types.h"


#define USE_IFX_DEV		1





/**
 * Define USB Interrupt Handler or ISR
 */
#define USBCORE001_InterruptHandler                       IRQ_Hdlr_107


#define USBHostMode	0
#define USBDeviceMode	1
#define BlkNakSupport 0

#if(USBHostMode==1)
#define DWC_HOST_ONLY
#endif

#if(USBDeviceMode==1)
#define DWC_DEVICE_ONLY
#endif

#if(BlkNakSupport == 1)
#define DWC_BLKNAK_SUPPORT
#endif

#define u_int int
#define u_char char
#define u_long long
#define u16 int

typedef uint8_t u_int8_t; 
typedef uint16_t u_int16_t; 
typedef uint32_t u_int32_t; 

typedef unsigned gfp_t;


#define __u8 unsigned char
#define __le16 uint16_t
#define __u16 uint16_t


#define irqreturn_t void


#define KERNEL_VERSION(x, y, z) (0)


#define dwc_dma_t uint32_t

#define inline __inline


//*******************************************************************

//**************** kernel.h *****************************************
#define INT_MAX         ((int)(~0U>>1))
//*******************************************************************
/**
*@note IFX Modification. Need to find a better place
*/
/** Indicates to the compiler that the function can not ever return, so that any stack restoring or
 *  return code may be omitted by the compiler in the resulting binary.
 */
#define ATTR_NO_RETURN              __attribute__ ((noreturn))

/** Indicates that the function returns a value which should not be ignored by the user code. When
 *  applied, any ignored return value from calling the function will produce a compiler warning.
 */
#define ATTR_WARN_UNUSED_RESULT     __attribute__ ((warn_unused_result))

/** Indicates that the specified parameters of the function are pointers which should never be \c NULL.
 *  When applied as a 1-based comma separated list the compiler will emit a warning if the specified
 *  parameters are known at compiler time to be \c NULL at the point of calling the function.
 */
#define ATTR_NON_NULL_PTR_ARG(...)  __attribute__ ((nonnull (__VA_ARGS__)))

/** Removes any preamble or postamble from the function. When used, the function will not have any
 *  register or stack saving code. This should be used with caution, and when used the programmer
 *  is responsible for maintaining stack and register integrity.
 */
#define ATTR_NAKED                  __attribute__ ((naked))

/** Prevents the compiler from considering a specified function for inlining. When applied, the given
 *  function will not be inlined under any circumstances.
 */
#define ATTR_NO_INLINE              __attribute__ ((noinline))

/** Forces the compiler to inline the specified function. When applied, the given function will be
 *  inlined under all circumstances.
 */
#define ATTR_ALWAYS_INLINE          __attribute__ ((always_inline))

/** Indicates that the specified function is pure, in that it has no side-effects other than global
 *  or parameter variable access.
 */
#define ATTR_PURE                   __attribute__ ((pure))

/** Indicates that the specified function is constant, in that it has no side effects other than
 *  parameter access.
 */
#define ATTR_CONST                  __attribute__ ((const))

/** Marks a given function as deprecated, which produces a warning if the function is called. */
#define ATTR_DEPRECATED             __attribute__ ((deprecated))

/** Marks a function as a weak reference, which can be overridden by other functions with an
 *  identical name (in which case the weak reference is discarded at link time).
 */
#define ATTR_WEAK                   __attribute__ ((weak))

/** Forces the compiler to not automatically zero the given global variable on startup, so that the
 *  current RAM contents is retained. Under most conditions this value will be random due to the
 *  behaviour of volatile memory once power is removed, but may be used in some specific circumstances,
 *  like the passing of values back after a system watchdog reset.
 */
#define ATTR_NO_INIT                __attribute__ ((section (".noinit")))

/** Places the function in one of the initialization sections, which execute before the main function
 *  of the application. Refer to the avr-libc manual for more information on the initialization sections.
 *
 *  \param[in] SectionIndex  Initialization section number where the function should be placed.
 */
#define ATTR_INIT_SECTION(SectionIndex) __attribute__ ((naked, section (".init" #SectionIndex )))

/** Marks a function as an alias for another function.
 *
 *  \param[in] Func  Name of the function which the given function name should alias.
 */
#define ATTR_ALIAS(Func)               __attribute__ ((alias( #Func )))

/** Marks a variable or struct element for packing into the smallest space available, omitting any
 *  alignment bytes usually added between fields to optimize field accesses.
 */
#define ATTR_PACKED                     __attribute__ ((packed))

/** Indicates the minimum alignment in bytes for a variable or struct element.
 *
 *  \param[in] Bytes  Minimum number of bytes the item should be aligned to.
 */
#define ATTR_ALIGNED(Bytes)            __attribute__ ((aligned(Bytes)))


#ifdef DWC_HOST_ONLY
#define USB_CAN_BE_HOST 1
#define USB_HOST_ONLY 1
#endif

#ifdef DWC_DEVICE_ONLY
#define USB_CAN_BE_DEVICE 1
#define USB_DEVICE_ONLY 1
#endif

#ifdef DWC_BLKNAK_SUPPORT
#define USB_BLKNAK_SUPPORT 1
#endif

#define true 1
#define false 0
#ifdef __cplusplus
}
#endif
#endif

