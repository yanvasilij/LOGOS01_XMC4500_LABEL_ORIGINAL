<%@ jet package="CodeGenerator" class="clk001_confh_template"
imports="java.util.* com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>

<% String AppBaseuri = "app/clk001/0";%>
<% String MappedUri = null; %>
<% int Is44Device = -1; %>
<% int Is42Device = -1; %>
<% int Is45Device = -1; %>
<% int IsUSBAvailble = -1; %>
<% int IsMMCAvailble = -1; %>
<% Is44Device = ((app.getSoftwareId().substring(0,2).compareTo("44")==0)?1:0); %>
<% Is42Device = ((app.getSoftwareId().substring(0,2).compareTo("42")==0)?1:0); %>
<% Is45Device = ((app.getSoftwareId().substring(0,2).compareTo("45")==0)?1:0); %>
<% IsUSBAvailble = ((Integer.parseInt(app.getSoftwareId().substring(app.getSoftwareId().lastIndexOf(".")-1, app.getSoftwareId().lastIndexOf(".")))<4)?1:0); %>
<% IsMMCAvailble = ((Integer.parseInt(app.getSoftwareId().substring(app.getSoftwareId().lastIndexOf(".")-1, app.getSoftwareId().lastIndexOf(".")))<4)?1:0); %>

/*CODE_BLOCK_BEGIN[CLK001_Conf.h]*/

/******************************************************************************
 *
 * Copyright (C) 2013 Infineon Technologies AG. All rights reserved.
 *
 * Infineon Technologies AG (Infineon) is supplying this software for use with
 * Infineon's microcontrollers.
 * This file can be freely distributed within development tools that are
 * supporting such microcontrollers.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
 * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
********************************************************************************
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC1000 Series                                         **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR   : App Developer                                                   **
**                                                                            **
** MAY BE CHANGED BY USER [yes/Yes]: No                                       **
**                                                                            **
** MODIFICATION DATE : Aug 21, 2013                                           **
**                                                                            **
*******************************************************************************/

/*******************************************************************************
**                       Author(s) Identity                                   **
********************************************************************************
**                                                                            **
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** ES           App Developer                                                 **
*******************************************************************************/

/**
 * @file   CLK001_Conf.h
 * @brief <TBD>This file contains the configuration code for the App.
 *
 * Revision History
 * 21 Aug 2013   v1.0.34    Static and configuration code separated.
 * 05 Nov 2013   v1.0.38  Macro name changed from CLK001_CLK001_WDTCLK_EN to 
                          CLK001_WDTCLK_EN. 
 *
 */
#ifndef CLK001_CONF_H_
#define CLK001_CONF_H_

/* Support for C++ codebase */
#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
**                           Include Files                                    **
*******************************************************************************/
#include "CLK001_Const.h"

/*******************************************************************************
**                      Global Macro Definitions                              **
*******************************************************************************/
/*********************************************************/
/* Main PLL Clock Configuration */
/*********************************************************/
/* Main PLL input clock configuration */
<%if((app.getIntegerValue(AppBaseuri + "/clk001_erwPLLClkSource/0")==1)){%>
#define  CLK001_PLL_CLOCK_INPUT  CLK001_CLOCK_CRYSTAL
/*Oscillator mode = External Crystal Mode*/
#define CLK001_OSC_HP_MODE  0x0UL
<%}else if((app.getIntegerValue(AppBaseuri + "/clk001_erwPLLClkSource/1")==1)){%>
#define  CLK001_PLL_CLOCK_INPUT  CLK001_CLOCK_EXT_CLOCK
/*Oscillator mode = External Input Clock Mode*/
#define CLK001_OSC_HP_MODE  0x2UL
<%}else{%>
#define  CLK001_PLL_CLOCK_INPUT  CLK001_CLOCK_BACK_UP_CLOCK
/*Oscillator mode = External Crystal Mode*/
#define CLK001_OSC_HP_MODE  0x0UL
<%}%>
/* MAIN PLL setup parameters */  
<% MappedUri = app.getMappedUri(AppBaseuri +  "/pll"); %>
<% if((MappedUri != null) && (MappedUri != "")) { %>
<%int PDIV = app.getIntegerValue(AppBaseuri + "/pll/pllcon1/pdiv");%>
<%int NDIV = app.getIntegerValue(AppBaseuri + "/pll/pllcon1/ndiv");%>
<%int K2DIV =app.getIntegerValue(AppBaseuri + "/pll/pllcon1/k2div");%>
<%int K1DIV =app.getIntegerValue(AppBaseuri + "/pll/pllcon1/k1div");%>
#define   CLK001_PLL_K1DIV        <%=K1DIV - 1%>UL
#define   CLK001_PLL_K2DIV        <%=K2DIV - 1%>UL      
#define   CLK001_PLL_PDIV         <%=PDIV - 1%>UL    
#define   CLK001_PLL_NDIV         <%=NDIV - 1%>UL  
#define   CLK001_PLL_K2DIV_STEP_1    19UL  /*PLL output is 24Mhz*/  
#define   CLK001_PLL_K2DIV_STEP_2    7UL  /*PLL output to 60Mhz*/  
#define   CLK001_PLL_K2DIV_STEP_3    4UL  /*PLL output to 96Mhz*/  
<%} else{%>
#define   CLK001_PLL_K1DIV     1UL    
#define   CLK001_PLL_K2DIV     3UL      
#define   CLK001_PLL_PDIV      1UL    
#define   CLK001_PLL_NDIV      79UL  
#define   CLK001_PLL_K2DIV_STEP_1    19UL  /*PLL output is 24Mhz*/  
#define   CLK001_PLL_K2DIV_STEP_2    7UL  /*PLL output to 60Mhz*/  
#define   CLK001_PLL_K2DIV_STEP_3    4UL  /*PLL output to 96Mhz*/  
<%}%>
/*PLL mode configuration*/
<%if((app.getIntegerValue(AppBaseuri + "/clk001_erwoperatingmode/0")==1)){%>
#define CLK001_CLOCK_PLL_MODE CLK001_CLOCK_PLL_NORMAL
<%}else{%>
#define CLK001_CLOCK_PLL_MODE CLK001_CLOCK_PLL_PRESCALER
<%}%>
/* Register bit field mask to check if Oscillator is usable */
#define CLK001_PLLSTAT_OSC_USABLE_MASK       (SCU_PLL_PLLSTAT_PLLHV_Msk | \
                                              SCU_PLL_PLLSTAT_PLLLV_Msk | \
                                              SCU_PLL_PLLSTAT_PLLSP_Msk)
/*values for Main PLL frequency stepping*/
#define CLK001_PLL_FREQ_STEP1               (24U * 1000U * 1000U)
#define CLK001_PLL_FREQ_STEP2               (60U * 1000U * 1000U)
#define CLK001_PLL_FREQ_STEP3               (90U * 1000U * 1000U)

/*********************************************************/
/* USB PLL Clock Configuration */
/*********************************************************/
/* USB PLL setup parameters */
#define   CLK001_USBPLL_PDIV      <%=(app.getIntegerValue(AppBaseuri + "/clk001_irusbpllpdiv")-1)%>UL
#define   CLK001_USBPLL_NDIV      <%=(app.getIntegerValue(AppBaseuri + "/clk001_irusbpllndiv")-1)%>UL
#define   CLK001_USBDIV           <%=(app.getIntegerValue(AppBaseuri + "/clk001_erwUSBClkDivider")-1)%>UL

/*********************************************************/
/* Standby Clock Configuration */
/*********************************************************/
/*Standby clock source configuration*/
<%if((app.getIntegerValue(AppBaseuri + "/CLK001_clksourceconf/1")==1)||(app.getIntegerValue(AppBaseuri + "/CLK001_clksourceconf/2")==1)){%>
#define  CLK001_STANDBY_CLOCK  CLK001_HIB_CLOCK_OSCULP
<%}else if((app.getIntegerValue(AppBaseuri + "/CLK001_clksourceconf/0")==1)||(app.getIntegerValue(AppBaseuri + "/CLK001_clksourceconf/2")==1)){%>
#define  CLK001_STANDBY_CLOCK  CLK001_HIB_CLOCK_FOSI
<%}%>

/*********************************************************/
/* Backup Clock Configuration */
/*********************************************************/
/*Back up clock trimming option*/
<%if((app.getIntegerValue(AppBaseuri + "/CLK001_clksourceconf/1")==1)||(app.getIntegerValue(AppBaseuri + "/CLK001_clksourceconf/0")==1)){%>
#define CLK001_TRIM_OPTION CLK001_CLOCK_TRIM_AUTOMATIC
<%}else{%>
#define CLK001_TRIM_OPTION CLK001_CLOCK_TRIM_FACTORY
<%}%>
/*back up clock frequency*/
#define  CLK001_CLOCK_BACK_UP                24000000UL

/*********************************************************/
/* System Clock Configuration */
/*********************************************************/
/*System clock source configuration*/
<%if((app.getIntegerValue(AppBaseuri + "/clk001_erwSystemClockSource/0")==1)){%>
#define CLK001_CLOCK_SYS_SRC CLK001_CLOCK_SRC_PLL 
<%}else{%>
#define CLK001_CLOCK_SYS_SRC CLK001_CLOCK_SRC_BACKUP 
<%}%>
/* system clock frequency */
#define CLK001_CLOCK_FSYS                    <%=(app.getIntegerValue(AppBaseuri + "/clk001_iroActualFreqSystem")*1000000)%>UL

/**************************************************************/
/* External Oscillator or External Clock Source Configuration */
/**************************************************************/
/*crystal or digital clock input frequency*/
<%if((app.getIntegerValue(AppBaseuri + "/clk001_erwPLLClkSource/0")==1)){%>
#define  CLK001_CLOCK_CRYSTAL_FREQUENCY      <%=(app.getIntegerValue(AppBaseuri + "/clk001_irwExtOscRefFreq")*1000000)%>UL     
<%}else if((app.getIntegerValue(AppBaseuri + "/clk001_erwPLLClkSource/1")==1)){%>
#define  CLK001_CLOCK_CRYSTAL_FREQUENCY      <%=(app.getIntegerValue(AppBaseuri + "/clk001_irwDigInputRefFreq")*1000000)%>UL 
<%}else{%> 
#define  CLK001_CLOCK_CRYSTAL_FREQUENCY      <%=(app.getIntegerValue(AppBaseuri + "/clk001_irwExtOscRefFreq")*1000000)%>UL 
<%}%>

/**********************************************************/
/* Macros for Internal, External and System clock Signals */
/**********************************************************/
<%if ((app.getIntegerValue(AppBaseuri + "/CLK001_clksourceconf/1") ==1)||
(app.getIntegerValue(AppBaseuri + "/clk001_erwSTDBYClkSource/0") ==1) ||
(app.getIntegerValue(AppBaseuri + "/clk001_erwRTCClkSource/0") ==1))
{%>
#define CLK001_OSC_ULP_USED 1
<%}%>
<% if ((app.getIntegerValue(AppBaseuri + "/clk001_erwEnableExtClk/0") ==1) && (IsUSBAvailble==1)){%> 
#define CLK001_EXTCLKOUT_EN 1
<%}%>
<%if (app.getIntegerValue(AppBaseuri + "/clk001_erwUSBClkEnable/0") ==1){%>     
#define CLK001_USBCLK_EN 1
<%}%>
<%if (app.getIntegerValue(AppBaseuri + "/clk001_erwCCUClkEnable/0") ==1){%>
#define CLK001_CCUCLK_EN 1
<%}%>
<%if (Is45Device==1){%>
  <%if (app.getIntegerValue(AppBaseuri + "/clk001_erwEBUClkEnable/0") ==1){%>
#define CLK001_EBUCLK_EN 1
  <%}%>
  <%if ((app.getIntegerValue(AppBaseuri + "/clk001_erwMMCClkEnable/0") ==1) && (IsMMCAvailble == 1)){%>
#define CLK001_MMCCLK_EN 1
  <%}%>
<%}%>
<%if (app.getIntegerValue(AppBaseuri + "/clk001_erwWDTClkEnable/0") ==1){%> 
#define CLK001_WDTCLK_EN 1
<%}%>
<%if (app.getIntegerValue(AppBaseuri + "/clk001_erwEnableRTC/0") ==1){%> 
#define CLK001_RTCCLK_EN 1
<%}%>

/*********************************************************/
/* WDT Clock Configuration */
/*********************************************************/
/*Reference frequency for system oscillator watch dog - 2.5 MHz*/
#define  CLK001_SOSCWDG_FREF                 2500000U
<%if(app.getIntegerValue(AppBaseuri + "/clk001_erwWDTClkSource/0") ==1) {%>
#define CLK001_WDT_CLKSRC CLK001_WDTCLK_BACKUP
<%} else if(app.getIntegerValue(AppBaseuri + "/clk001_erwWDTClkSource/1") ==1) {%>
#define CLK001_WDT_CLKSRC CLK001_WDTCLK_STANDBY
<%} else if(app.getIntegerValue(AppBaseuri + "/clk001_erwWDTClkSource/2") ==1) {%>
#define CLK001_WDT_CLKSRC CLK001_WDTCLK_PLL
<%}%>

/*********************************************************/
/* RTC Clock Configuration */
/*********************************************************/
<%if (app.getIntegerValue(AppBaseuri + "/clk001_erwRTCClkSource/0") ==1) {%>
#define CLK001_RTC_CLKSRC CLK001_RTC_CLOCK_OSCULP
<%} else if (app.getIntegerValue(AppBaseuri + "/clk001_erwRTCClkSource/1") ==1) {%>
#define CLK001_RTC_CLKSRC CLK001_RTC_CLOCK_FOSI
<%}%>

/*********************************************************/
/* Clock Divider Configuration */
/*********************************************************/
<%if (app.getIntegerValue(AppBaseuri + "/clk001_erwPBClkDivider/0") ==1)
{%>
#define CLK001_PBCLKDIV_EN 1 /* Peripheral Bus Clock Divider Enable */
<%}%>
<%if (app.getIntegerValue(AppBaseuri + "/clk001_erwCPUClkDivider/0") ==1)
{%>
#define CLK001_CPUCLKDIV_EN 1 /* CPU Clock Divider Enable */
<%}%>
<%if (app.getIntegerValue(AppBaseuri + "/clk001_erwCCUClkDIV/0") ==1)
{%>
#define CLK001_CCUCLKDIV_EN 1 /* CCU Clock Divider Enable */
<%}%>
/* WDT Clock Divider Value */
#ifdef CLK001_WDTCLK_EN
  #define CLK001_WDTCLKDIV <%=(app.getIntegerValue(AppBaseuri + "/clk001_erwWDTClkDIV")-1)%>UL
#endif
/* EBU Clock Divider Value */
#ifdef CLK001_EBUCLK_EN
  #define CLK001_EBU_CLKDIV <%=(app.getIntegerValue(AppBaseuri + "/clk001_erwEBUClkDivider")-1)%>UL
#endif

/*********************************************************/
/* External Clock Configuration */
/*********************************************************/
/* External Clock Selection */
<% int ExtClkSel = app.getIntegerValue(AppBaseuri + "/rgextclk/extclkcr/ecksel"); %>
<% if(ExtClkSel == 0) { %>
#define CLK001_EXTCLK_SEL          CLK001_EXTCLK_SYSTEM_CLOCK
<% } else if(ExtClkSel == 2) { %>
#define CLK001_EXTCLK_SEL          CLK001_EXTCLK_USB_CLOCK
<% } else if(ExtClkSel == 3) { %>
#define CLK001_EXTCLK_SEL          CLK001_EXTCLK_PLL_CLOCK
<% } %>
/* External Clock PLL Divider */
<%int PLLClkDiv = app.getIntegerValue(AppBaseuri + "/clk001_erwExtClkPLLDiv") -1;%>
#define CLK001_EXTCLK_PLLDIV <%= PLLClkDiv %>UL

  <% String pinUri = app.getMappedUri(AppBaseuri + "/clk_extpin"); %>
    <% if ((pinUri != null) && (pinUri.trim() != "")) { %>
    <% String portNo = pinUri.substring(pinUri.indexOf("port/p/")+7,pinUri.indexOf("/pad/")); %>
  <% String pinNo = pinUri.substring(pinUri.indexOf("/pad/")+5,pinUri.length()); %>
  <% int PDR_PD1 = app.getIntegerValue(AppBaseuri + "/clk_extpin/pdr_pd");    %>
  <% int Pin = Integer.parseInt(pinNo);%>
  <% int RegNo = 0; %>
   <% if(Pin < 8) {
        RegNo = 0; 
      } 
      else {
        RegNo = 1; 
      }%>
/* External Clock Pad Driver Mode */
#define CLK001_EXTCLK_PORT_REG     PORT<%=portNo%>->PDR<%=RegNo%>
#define CLK001_EXTCLK_PAD_MASK     PORT<%=portNo%>_PDR<%=RegNo%>_PD<%=Pin%>_Msk
#define CLK001_EXTCLK_PAD_POS      PORT<%=portNo%>_PDR<%=RegNo%>_PD<%=Pin%>_Pos
#define CLK001_EXTCLK_PDR_VAL      <%=PDR_PD1%>
<%}%>

/* Support for C++ codebase */
#ifdef __cplusplus
}
#endif   

#endif /* CLK001_CONF_H_ */

/*CODE_BLOCK_END*/
