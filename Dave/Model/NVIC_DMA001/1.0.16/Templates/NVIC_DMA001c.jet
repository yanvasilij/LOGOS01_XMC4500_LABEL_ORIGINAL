<%@ jet package="CodeGenerator" class="nvic_dma001c_template"
imports="java.util.* com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>

/*CODE_BLOCK_BEGIN[NVIC_DMA001.c]*/
<% String AppBaseuri = "app/nvic_dma001/";%>
<% String MappedUri = null; %>
<% String NodeID = null; %>
<% String appInst  = null; %>
<% ArrayList<String> appsList = (ArrayList<String>)(app.getApps("app/nvic_dma001/"));%>

/*******************************************************************************
 Copyright (c) 2012, Infineon Technologies AG                                 **
 All rights reserved.                                                         **
                                                                              **
 Redistribution and use in source and binary forms, with or without           **
 modification,are permitted provided that the following conditions are met:   **
                                                                              **
 *Redistributions of source code must retain the above copyright notice,      **
 this list of conditions and the following disclaimer.                        **
 *Redistributions in binary form must reproduce the above copyright notice,   **
 this list of conditions and the following disclaimer in the documentation    **
 and/or other materials provided with the distribution.                       **
 *Neither the name of the copyright holders nor the names of its contributors **
 may be used to endorse or promote products derived from this software without** 
 specific prior written permission.                                           **
                                                                              **
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
 ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
 LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
 SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
 CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
 POSSIBILITY OF SUCH DAMAGE.                                                  **
                                                                              **
 To improve the quality of the software, users are encouraged to share        **
 modifications, enhancements or bug fixes with Infineon Technologies AG       **
 dave@infineon.com).                                                          **
                                                                              **
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC4XXX Series                                                **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR   : App Developer                                                   **
**                                                                            **
** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
**                                                                            **
** MODIFICATION DATE : Dec 4, 2012                                           **
**                                                                            **
*******************************************************************************/
/**
 * @file   NVIC_DMA001.c
 * 
 *  
 * @brief  NVIC_DMA001 App
 *
 */
 /*
 * Revision History
 * 18 Jan 2013 v1.0.11 Initial version
 */

/*******************************************************************************
**                      Author(s) Identity                                    **
********************************************************************************
**                                                                            **
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** PAE        App Developer                                                   **
*******************************************************************************/

/*******************************************************************************
 ** INCLUDE FILES                                                             **
 ******************************************************************************/
/** Inclusion of header file */

#include <DAVE3.h>

<% String TempApps = null;
   String MyAppName = null;
   ArrayList<String> apps;
   String TempLowerApps = null; 
   boolean DBGApp = false;   
   apps=(ArrayList<String>)(app.getApps());
        for (int k = 0; k < apps.size(); k++) {
              TempApps = apps.get(k);
//            if(app.isAppInitProvider(apps.get(k)) == true) {
              MyAppName = TempApps.substring(TempApps.indexOf("/app/") + 5, TempApps.lastIndexOf("/"));
              TempLowerApps = MyAppName.toLowerCase();
              if (TempLowerApps.equalsIgnoreCase("dbg002")) {DBGApp = true;}   
//   }  
  } %>

<% if (!DBGApp) { %>  
/*****************************************************************************
              DUMMY DEFINTIONS OF DEBUG LOG MACROS
*****************************************************************************/
/*These definitions are included here to avoid compilation errors,
 since the DBG002 app is not part of the project. All the macros are defined
 as empty*/ 
#ifndef _DBG002_H_

#define DBG002_RegisterCallBack(A,B,C)
#define DBG002_I(e) 
#define DBG002_IG(e,g) 
#define DBG002_IH(e,h) 
#define DBG002_IP(e,p) 
#define DBG002_IGH(e,g,h) 
#define DBG002_IGP(e,g,p) 
#define DBG002_IHP(e,h,p) 
#define DBG002_IGHP(e,g,h,p) 
#define DBG002_N(e) 
#define DBG002_NG(e,g) 
#define DBG002_NH(e,h) 
#define DBG002_NP(e,p) 
#define DBG002_NGH(e,g,h) 
#define DBG002_NGP(e,g,p) 
#define DBG002_NHP(e,h,p) 
#define DBG002_NGHP(e,g,h,p) 
#define DBG002_ID(e) 
#define DBG002_IS(e) 
#define DBG002_ISG(e,g) 
#define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
#define DBG002_CRITICAL(groupid,messageid,length,value)
#define DBG002_ERROR(groupid,messageid,length,value)
#define DBG002_WARNING(groupid,messageid,length,value)
#define DBG002_INFO(groupid,messageid,length,value)
#define DBG002_TRACE(groupid,messageid,length,value)
#define DBG002_FUNCTION_ENTRY(GID, Status) 
#define DBG002_FUNCTION_EXIT(GID, Status) 
#define DBG002_MESSAGEID_LITERAL
#endif/* End of defintions of dummy Debug Log macros*/
<% } %>                  
<% int Is44Device = -1; %>

<% int Is42Device = -1; %>

<% int Is45Device = -1; %>

<% Is45Device = ((app.getSoftwareId().substring(0,2).compareTo("45")==0)?1:0); %>

<% Is44Device = ((app.getSoftwareId().substring(0,2).compareTo("44")==0)?1:0); %>

<% Is42Device = ((app.getSoftwareId().substring(0,2).compareTo("42")==0)?1:0); %>

/*******************************************************************************
**                      Private Macro Definitions                             **
*******************************************************************************/
#define APP_GID DBG002_GID_NVIC_DMA001
/*******************************************************************************
**                      Private Type Definitions                              **
*******************************************************************************/

/*******************************************************************************
**                 Private Function Declarations:
*******************************************************************************/
<% for (String appIns : appsList ) {
appInst = appIns.substring(appIns.lastIndexOf("/")+1);
MappedUri = app.getMappedUri(AppBaseuri + appInst + "/nvicnodedma"); 
 if((MappedUri != null) && (MappedUri != "")) {
NodeID = MappedUri.substring(MappedUri.lastIndexOf('/')+ 1 );
int Offset = Integer.parseInt(NodeID); 
if(Offset == 105) {%>
void GPDMA0_0_IRQHandler(void);
<% } else { %>
void GPDMA1_0_IRQHandler(void);
<% }}} %>
/*******************************************************************************
**                      Global Constant Definitions                           **
*******************************************************************************/

/*******************************************************************************
**                      Global Variable Definitions                           **
*******************************************************************************/

/*******************************************************************************
**                      Private Constant Definitions                          **
*******************************************************************************/

/*******************************************************************************
**                 Function like macro definitions                            **
*******************************************************************************/
/*******************************************************************************
**                      Private Function Definitions                          **
*******************************************************************************/

/*******************************************************************************
**                      Public Function Definitions                           **
*******************************************************************************/


/*CODE_BLOCK_END*/

void NVIC_DMA001_Init()
{
  /*<<<DD_NVIC_DMA001_API_1>>>*/  

  <%for (String appIns : appsList ) {
  appInst = appIns.substring(appIns.lastIndexOf("/")+1);
  MappedUri = app.getMappedUri(AppBaseuri + appInst + "/nvicnodedma"); 
  if((MappedUri != null) && (MappedUri != "")) { 
  NodeID = MappedUri.substring(MappedUri.lastIndexOf('/')+ 1 );
  int Priority = app.getIntegerValue(AppBaseuri + appInst +"/NVIC_DMA001_irwInterruptPriority");
  int SubPriority = app.getIntegerValue(AppBaseuri + appInst +"/NVIC_DMA001_irwInterruptSubPriority");
  int Offset = Integer.parseInt(NodeID); %>
  /* Set Interrupt Priority for NVIC <%=NodeID%> Node DMA Unit 0 */
  NVIC_SetPriority((IRQn_Type)<%=NodeID%>, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),<%=Priority%>U,<%=SubPriority%>U));
  /* Enable Interrupt */
  NVIC_EnableIRQ((IRQn_Type)<%=NodeID%>);
  <%if(Offset == 105) {%>
   <%if ((Is44Device==1)||(Is42Device==1))

  {%>

  /* Disables the gating for DMA0 UNIT */
     /* 
      * The disabling of the clock gating is applicable only for
      * XMC44xx and XMC42xx devices.
      */

  SET_BIT(SCU_CLK->CGATCLR2, SCU_CLK_CGATCLR2_DMA0_Pos);
    <%}%> 
    /* Reset the DMA0 Unit*/
  RESET001_DeassertReset(PER2_DMA0);
  /* Enable the DMA0 Unit*/
  GPDMA0->DMACFGREG |= GPDMA0_DMACFGREG_DMA_EN_Msk;
  <%} else {%>
  /* Reset the DMA1 Unit*/
  RESET001_DeassertReset(PER2_DMA1);
  /* Enable the DMA1 Unit*/
  GPDMA1->DMACFGREG |= (uint32_t)GPDMA1_DMACFGREG_DMA_EN_Msk;
  <%}%>
<% }}%>
}



void NVIC_DMA001_RegisterCallback
(
  NVIC_DMA001_HandleType* Handle,
  uint8_t ch_index,
  DMACallbackType userFunction,
  uint32_t CbArgs
 )
{
  /*<<<DD_NVIC_DMA001_API_2>>>*/
  DBG002_I(userFunction != NULL);
  Handle->Ch[ch_index].CbListener = userFunction;
  Handle->Ch[ch_index].CbArg = CbArgs;
}



<% for (String appIns : appsList ) {
appInst = appIns.substring(appIns.lastIndexOf("/")+1);
MappedUri = app.getMappedUri(AppBaseuri + appInst + "/nvicnodedma"); 
 if((MappedUri != null) && (MappedUri != "")) {
NodeID = MappedUri.substring(MappedUri.lastIndexOf('/')+ 1 );
int Offset = Integer.parseInt(NodeID); 
if(Offset == 105) {%>
void GPDMA0_0_IRQHandler(void)
{
  uint8_t i = 0U;
  uint8_t ch_index = 0U;
  DMACallbackType UserCallback;
  GPDMA0_GLOBAL_TypeDef* DMARegs = GPDMA0;
  NVIC_DMA001_HandleType* Handle = &NVIC_DMA001_Handle<%=appInst%>;
  uint32_t Reg, IrqActive, Mask;
  uint32_t callbackArg = 0U;
  
  /* read the interrupt status Register */
  IrqActive = DMARegs->STATUSINT;
  /* ERR INTERRUPT	*/
  if(RD_REG(IrqActive,GPDMA0_STATUSINT_ERR_Msk, GPDMA0_STATUSINT_ERR_Pos))
  {
    /* Read the Error Status Register */
    Reg = DMARegs->STATUSERR;
    /* Loop through the channels until we find active interrupt. */
    for(i=0U;i< DMA0_MAX_CHANNELS;i++) 
    {
      Mask = ((uint32_t)1U) << i;
	  if(Reg & Mask) 
	  {
	    ch_index = i;
        break;
      }
    }
    // DBG002_ERROR(APP_GID,NVIC_DMA001_ERROR_INT, 0, NULL);
    /* run the listener function */
    if(Handle->Ch[ch_index].CbListener != NULL)
    {
      UserCallback = Handle->Ch[ch_index].CbListener;
      callbackArg = Handle->Ch[ch_index].CbArg;
      UserCallback(DMA_IRQ_ERR, callbackArg);
    }
    /* clear the interrupt */
    DMARegs->CLEARERR = Mask;
  }
  /* TFR INTERRUPT */
  else if(RD_REG(IrqActive,GPDMA0_STATUSINT_TFR_Msk, GPDMA0_STATUSINT_TFR_Pos))
  {
    /* Read the Transfer Status Register */
    Reg = DMARegs->STATUSTFR;
    /*  Loop through the channels until we find
     *  active interrupt. We start at the highest priority
     * channel and work down to the lowest priority.
     */
    for(i=0U;i< DMA0_MAX_CHANNELS;i++)
    {
      Mask = ((uint32_t)1U) << i;
      if(Reg & Mask) 
      {
        ch_index = i;
        break;
      }
    }
    /* increment the block count */
    Handle->Ch[ch_index].BlockCnt++;
    /* Mask all channel interrupts */
    Reg = ( ((uint32_t)1U) << (ch_index + DMA0_MAX_CHANNELS));
    DMARegs->MASKTFR      = Reg;
    DMARegs->MASKBLOCK    = Reg;
    DMARegs->MASKSRCTRAN  = Reg;
    DMARegs->MASKDSTTRAN  = Reg;
    DMARegs->MASKERR      = Reg;
    
    // DBG002_INFO(APP_GID,NVIC_DMA001_TFR_INT, 0, NULL);
    /* run the listener function */
    if(Handle->Ch[ch_index].CbListener != NULL)
    {
      UserCallback = Handle->Ch[ch_index].CbListener;
      callbackArg = Handle->Ch[ch_index].CbArg;
      UserCallback(DMA_IRQ_TFR, callbackArg);
    }
    /* reset the source and destination states */
    Handle->Ch[ch_index].SrcState = NVIC_DMA001_IDLE;
    Handle->Ch[ch_index].DstState = NVIC_DMA001_IDLE;
    /* Disable all channel interrupts */
    /* clear any pending block/srcTran/dstTran interrupts */
    DMARegs->CLEARBLOCK   = Mask;
    DMARegs->CLEARSRCTRAN = Mask; 
    DMARegs->CLEARDSTTRAN = Mask;
    DMARegs->CLEARTFR     = Mask;
  }    
  /* BLOCK INTERRUPT */
  else if(RD_REG(IrqActive,GPDMA0_STATUSINT_BLOCK_Msk, GPDMA0_STATUSINT_BLOCK_Pos)) 
  {
    /* Read the Block Status Register */
    Reg = DMARegs->STATUSBLOCK;
    /* Loop through the channels until we find active interrupt.*/
    for(i=0U;i< DMA0_MAX_CHANNELS;i++)
    {
      Mask = ((uint32_t)1U) << i;
      if(Reg & Mask) 
      {
        ch_index = i;
        break;
      }
    }

    /* increment the block count */
    Handle->Ch[ch_index].BlockCnt++;
    // DBG002_INFO(APP_GID,NVIC_DMA001_BLOCK_INT, 0, NULL);
    /* run the listener function */
    if(Handle->Ch[ch_index].CbListener != NULL)
    {
      UserCallback = Handle->Ch[ch_index].CbListener;
      callbackArg = Handle->Ch[ch_index].CbArg;
      UserCallback(DMA_IRQ_BLOCK, callbackArg);
    }
    /* reset the source and destination states */
    Handle->Ch[ch_index].SrcState = NVIC_DMA001_BURST_REGION;
    Handle->Ch[ch_index].DstState = NVIC_DMA001_BURST_REGION;
    /* clear any pending srcTran/dstTran interrupts */
    DMARegs->CLEARSRCTRAN = Mask; 
    DMARegs->CLEARDSTTRAN = Mask;
    /* clear the block interrupt */
    DMARegs->CLEARBLOCK = Mask;
  }	 
  /* SRCTRAN INTERRUPT */
  else if(RD_REG(IrqActive,GPDMA0_STATUSINT_SRCT_Msk, GPDMA0_STATUSINT_SRCT_Pos))
  {
    Reg = DMARegs->STATUSSRCTRAN;
    /* Loop through the channels until we find active interrupt.  */
    for(i=0U;i< DMA0_MAX_CHANNELS;i++)
    {
      Mask = ((uint32_t)1U) << i;
      if(Reg & Mask) 
      {
        ch_index = i;
        break;
      }
    }
    // DBG002_INFO(APP_GID,NVIC_DMA001_SRCTRAN_INT, 0, NULL);
    if(Handle->Ch[ch_index].CbListener != NULL)
    {
      UserCallback = Handle->Ch[ch_index].CbListener;
      callbackArg = Handle->Ch[ch_index].CbArg;
      UserCallback(DMA_IRQ_SRCTRAN, callbackArg);
    }
    /* clear the interrupt */
    DMARegs->CLEARSRCTRAN = Mask;
  }
  /* DSTTRAN INTERRUPT */
  else if(RD_REG(IrqActive,GPDMA0_STATUSINT_DSTT_Msk, GPDMA0_STATUSINT_DSTT_Pos))
  {
    Reg = DMARegs->STATUSDSTTRAN;
    /* Loop through the channels until we find active interrupt */
    for(i=0U;i< DMA0_MAX_CHANNELS;i++)
    {
      Mask = ((uint32_t)1U) << i;
      if(Reg & Mask) 
      {
        ch_index = i;
        break;
      }
    }
    // DBG002_INFO(APP_GID,NVIC_DMA001_DSTTRAN_INT, 0, NULL);
    /* run the listener function */
    if(Handle->Ch[ch_index].CbListener != NULL)
    {
      UserCallback = Handle->Ch[ch_index].CbListener;
      callbackArg = Handle->Ch[ch_index].CbArg;
      UserCallback(DMA_IRQ_DSTTRAN, callbackArg);
    }
    /* clear the interrupt */
    DMARegs->CLEARDSTTRAN = Mask;
  }
  else
  {
    /* If we've reached this point, either the enabling and
     * disabling of DMA interrupts is not being handled
     * properly or this function is being called unnecessarily.
     */
  }
}

<% } else { %>

void GPDMA1_0_IRQHandler(void)
{
  uint8_t i = 0U;
  uint8_t ch_index = 0U;
  DMACallbackType UserCallback;
  GPDMA1_GLOBAL_TypeDef* DMARegs = GPDMA1;	
  NVIC_DMA001_HandleType* Handle = &NVIC_DMA001_Handle<%=appInst%>;
  uint32_t Reg, IrqActive, Mask;
  uint32_t callbackArg = 0U;
  
  /* read the interrupt status Register */
  IrqActive = DMARegs->STATUSINT;
  /* ERR INTERRUPT	*/
  if(RD_REG(IrqActive,GPDMA1_STATUSINT_ERR_Msk, GPDMA1_STATUSINT_ERR_Pos))
  {
    /* Read the Error Status Register */
    Reg = DMARegs->STATUSERR;
    /* Loop through the channels until we find active interrupt. */
    for(i=0U;i< DMA1_MAX_CHANNELS;i++)
    {
      Mask = ((uint32_t)1U) << i;
	  if(Reg & Mask) 
	  {
	    ch_index = i;
        break;
      }
    }
    // DBG002_ERROR(APP_GID,NVIC_DMA001_ERROR_INT, 0, NULL);
    /* run the listener function */
    if(Handle->Ch[ch_index].CbListener != NULL)
    {
      UserCallback = Handle->Ch[ch_index].CbListener;
      callbackArg = Handle->Ch[ch_index].CbArg;
      UserCallback(DMA_IRQ_ERR, callbackArg);
    }
    /* clear the interrupt */
    DMARegs->CLEARERR = Mask; 
  }
  /* TFR INTERRUPT */
  else if(RD_REG(IrqActive,GPDMA1_STATUSINT_TFR_Msk, GPDMA1_STATUSINT_TFR_Pos))
  {
    /* Read the Transfer Status Register */
    Reg = DMARegs->STATUSTFR;
    /*  Loop through the channels until we find
     *  active interrupt. We start at the highest priority
     * channel and work down to the lowest priority.
     */
    for(i=0U;i< DMA1_MAX_CHANNELS;i++)
    {
      Mask = ((uint32_t)1U) << i;
      if(Reg & Mask) 
      {
        ch_index = i;
        break;
      }
    }
    /* increment the block count */
    Handle->Ch[ch_index].BlockCnt++;
    /* Mask all channel interrupts */
    Reg = ( ((uint32_t)1U) << (ch_index + DMA1_MAX_CHANNELS));
    DMARegs->MASKTFR = Reg;
    DMARegs->MASKBLOCK = Reg;
    DMARegs->MASKSRCTRAN = Reg;
    DMARegs->MASKDSTTRAN = Reg;
    DMARegs->MASKERR = Reg;
	
    // DBG002_INFO(APP_GID,NVIC_DMA001_TFR_INT, 0, NULL);
    /* run the listener function */
    if(Handle->Ch[ch_index].CbListener != NULL)
    {
      UserCallback = Handle->Ch[ch_index].CbListener;
      callbackArg = Handle->Ch[ch_index].CbArg;
      UserCallback(DMA_IRQ_TFR, callbackArg);
    }
    /* reset the source and destination states */
    Handle->Ch[ch_index].SrcState = NVIC_DMA001_IDLE;
    Handle->Ch[ch_index].DstState = NVIC_DMA001_IDLE;
    /* Disable all channel interrupts */
    /* clear any pending block/srcTran/dstTran interrupts */
    DMARegs->CLEARBLOCK = Mask;
    DMARegs->CLEARSRCTRAN = Mask; 
    DMARegs->CLEARDSTTRAN = Mask;
    DMARegs->CLEARTFR = Mask;

  }    
  /* BLOCK INTERRUPT */
  else if(RD_REG(IrqActive,GPDMA1_STATUSINT_BLOCK_Msk, GPDMA1_STATUSINT_BLOCK_Pos)) 
  {
    /* Read the Block Status Register */
    Reg = DMARegs->STATUSBLOCK;
    /* Loop through the channels until we find active interrupt.*/
    for(i=0U;i< DMA1_MAX_CHANNELS;i++)
    {
      Mask = ((uint32_t)1U) << i;
      if(Reg & Mask) 
      {
        ch_index = i;
        break;
      }
    }

    /* increment the block count */
    Handle->Ch[ch_index].BlockCnt++;
    
    // DBG002_INFO(APP_GID,NVIC_DMA001_BLOCK_INT, 0, NULL);
    /* run the listener function */
    if(Handle->Ch[ch_index].CbListener != NULL)
    {
      UserCallback = Handle->Ch[ch_index].CbListener;
      callbackArg = Handle->Ch[ch_index].CbArg;
      UserCallback(DMA_IRQ_BLOCK, callbackArg);
    }
    /* reset the source and destination states */
    Handle->Ch[ch_index].SrcState = NVIC_DMA001_BURST_REGION;
    Handle->Ch[ch_index].DstState = NVIC_DMA001_BURST_REGION;
    /* clear any pending srcTran/dstTran interrupts */
    DMARegs->CLEARSRCTRAN = Mask; 
    DMARegs->CLEARDSTTRAN = Mask;
    /* clear the block interrupt */
    DMARegs->CLEARBLOCK = Mask;
  }	 
  /* SRCTRAN INTERRUPT */
  else if(RD_REG(IrqActive,GPDMA1_STATUSINT_SRCT_Msk, GPDMA1_STATUSINT_SRCT_Pos))
  {
    Reg = DMARegs->STATUSSRCTRAN;
    /* Loop through the channels until we find active interrupt. */
    for(i=0U;i< DMA1_MAX_CHANNELS;i++)
    {
      Mask = ((uint32_t)1U) << i;
      if(Reg & Mask) 
      {
        ch_index = i;
        break;
      }
    }
    
    // DBG002_INFO(APP_GID,NVIC_DMA001_SRCTRAN_INT, 0, NULL);
    
    if(Handle->Ch[ch_index].CbListener != NULL)
    {
      UserCallback = Handle->Ch[ch_index].CbListener;
      callbackArg = Handle->Ch[ch_index].CbArg;
      UserCallback(DMA_IRQ_SRCTRAN, callbackArg);
    }
    /* clear the interrupt */
    DMARegs->CLEARSRCTRAN = Mask;
  }
  /* DSTTRAN INTERRUPT */
  else if(RD_REG(IrqActive,GPDMA1_STATUSINT_DSTT_Msk, GPDMA1_STATUSINT_DSTT_Pos))
  {
    Reg = DMARegs->STATUSDSTTRAN;
    /* Loop through the channels until we find active interrupt */
    for(i=0U;i< DMA1_MAX_CHANNELS;i++)
    {
      Mask = ((uint32_t)1U) << i;
      if(Reg & Mask) 
      {
        ch_index = i;
        break;
      }
    }
    // DBG002_INFO(APP_GID,NVIC_DMA001_DSTTRAN_INT, 0, NULL);
    /* run the listener function */
    if(Handle->Ch[ch_index].CbListener != NULL)
    {
      UserCallback = Handle->Ch[ch_index].CbListener;
      callbackArg = Handle->Ch[ch_index].CbArg;
      UserCallback(DMA_IRQ_DSTTRAN, callbackArg);
    }
    /* clear the interrupt */
    DMARegs->CLEARDSTTRAN = Mask;
  }
  else
  {
    /* If we've reached this point, either the enabling and
     * disabling of DMA interrupts is not being handled
     * properly or this function is being called unnecessarily.
     */
  }
}

<% }}} %>

