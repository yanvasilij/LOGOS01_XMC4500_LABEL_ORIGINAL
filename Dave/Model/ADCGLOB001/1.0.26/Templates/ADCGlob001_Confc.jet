<%@ jet package="CodeGenerator" class="adcglob001_confc_template"
imports="java.util.* com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>
<% int Is11Device = -1; %>
<% Is11Device = ((app.getSoftwareId().substring(0,2).compareTo("11")==0)?1:0); %>

/*CODE_BLOCK_BEGIN[ADCGLOB001_Conf.c]*/
/*******************************************************************************
 Copyright (c) 2013, Infineon Technologies AG                                 **
 All rights reserved.                                                         **
                                                                              **
 Redistribution and use in source and binary forms, with or without           **
 modification,are permitted provided that the following conditions are met:   **
                                                                              **
 *Redistributions of source code must retain the above copyright notice,      **
 this list of conditions and the following disclaimer.                        **
 *Redistributions in binary form must reproduce the above copyright notice,   **
 this list of conditions and the following disclaimer in the documentation    **
 and/or other materials provided with the distribution.                       **
 *Neither the name of the copyright holders nor the names of its contributors **
 may be used to endorse or promote products derived from this software without**
 specific prior written permission.                                           **
                                                                              **
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
 ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
 LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
 SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
 CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
 POSSIBILITY OF SUCH DAMAGE.                                                  **
                                                                              **
 To improve the quality of the software, users are encouraged to share        **
 modifications, enhancements or bug fixes with Infineon Technologies AG       **
 dave@infineon.com).                                                          **
                                                                              **
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR   : DAVE App Developer                                              **
**                                                                            **
** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
**                                                                            **
** MODIFICATION DATE :  14 Nov 2013                                           **
**                                                                            **
*******************************************************************************/

/*******************************************************************************
**                       Author(s) Identity                                   **
********************************************************************************
**                                                                            **
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** prashana           DAVE App Developer                                      **
*******************************************************************************/

/**
 * @file ADCGLOBAL001_Conf.c
 *
 * @brief This file contains the configuration parameters for all instances of the
 * ADC GLOBAL App
 *
 * Change History:
 * Date       version       Details
 * 12-Dec-2012   1.0.5    Initial code added for XMC1000
 * 18-Jan-2013   1.0.6    Merging with XMC1000 done
 * 24-Apr-2013   1.0.12   Ported to XMC4500 step AB and
 *                        Source Result selection Feature added
 * 10-Jun-2013   1.0.14   1. Supported for XMC1100 device,  
 *                        2. Comment in header section - the Device series name is
 *                           made as XMC1000
 * 27-Jun-2013   1.0.16   Global limits made unavailable for adc004 app
 * 29-Aug-2013   1.0.18   XMC1200/XMC1300 New Sofware IDS added.
 *                        Unused code removed
 * 31-Oct-2013   1.0.20   1. The macro name ADCGLOB001_DBG002_FUNCTION_ENTRY is 
 *                        corrected as ADCGLOB001_FUNCTION_ENTRY 
 *                        2. Analog Clock divider value minimum 1 was generated
 *                        and now it is made as 0 for XMC1000 devices. 
 * 14-Nov-2013   1.0.22   CLK001_Init() for XMC4000 devices CLK002_Init() for 
 *                        XMC1000 devices is removed in ADCGLOB001_Init() 
 *                        function, since this CLK00x_Init() function is called
 *                        at the beginning  of the DAVE_Init() function.                        
 */

#include <DAVE3.h>

<% String AppBaseuri = "app/adcglob001/"; %>
<% String appInst  = null; %>

<% ArrayList<String> appsList = (ArrayList<String>)(app.getApps("app/adcglob001/"));

for (String appIns : appsList ) {
    appInst = appIns.substring(appIns.lastIndexOf("/")+1);%>


ADCGLOB001_DynamicDataType ADCGLOB001_DynamicData<%= appInst%> =
{
  .StateType = ADCGLOB001_UNINITIALIZED
};    
    
        
const ADCGLOB001_HandleType ADCGLOB001_Handle<%=appInst%> = 
{
  .kGlobalPtr          = (VADC_GLOBAL_TypeDef*)(void*)VADC,
        
  .kDynamicDataPtr      = &ADCGLOB001_DynamicData<%= appInst%>,
 
 <%if (Is11Device!=1)	{%> 
  .KGlobBoundary0        = (uint16_t) <%=app.getIntegerValue(AppBaseuri + appInst + "/adcglob001_irwglobboundary0")%>,
      
  .KGlobBoundary1        = (uint16_t) <%=app.getIntegerValue(AppBaseuri + appInst + "/adcglob001_irwglobboundary1")%>,
 <%}%>
  .kAnalogClkDivider      = (uint8_t) <%=app.getIntegerValue(AppBaseuri + appInst + "/adcglob001_irwanalogclockdivider")%>,
          
  .kArbiterClkDivider     = (uint8_t) <%=app.getIntegerValue(AppBaseuri + appInst + "/adcglob001_irwdigitalclockdivider")%>,
      
  .kSampleTimeControlClass0  = (uint8_t) <%=app.getIntegerValue(AppBaseuri + appInst + "/adcglob001_irwclass0stcsvalue")%>,
            
  .kSampleTimeControlClass1   = (uint8_t) <%=app.getIntegerValue(AppBaseuri + appInst + "/adcglob001_irwclass1stcsvalue")%>,
  
  <%if (Is11Device!=1)	{%>       
  .kEMUXSampleTimeControlClass0= (uint8_t) <%=app.getIntegerValue(AppBaseuri + appInst + "/adcglob001_irwclass0stcevalue")%>,
                
  .kEMUXSampleTimeControlClass1= (uint8_t) <%=app.getIntegerValue(AppBaseuri + appInst + "/adcglob001_irwclass1stcevalue")%>,
  <%}%>         
  .kConversionModeClass0    = (uint8_t) <% if (app.getIntegerValue(AppBaseuri + appInst + "/adcglob001001_erwconmodeclass0") == 0){%>ADCGLOB001_12BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcglob001001_erwconmodeclass0") == 1){%>ADCGLOB001_10BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcglob001001_erwconmodeclass0") == 2){%>ADCGLOB001_8BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcglob001001_erwconmodeclass0") == 5){%>ADCGLOB001_10BITFAST,<%} %>
             
  .kConversionModeClass1     = (uint8_t) <% if (app.getIntegerValue(AppBaseuri + appInst + "/adcglob001001_erwconmodeclass1") == 0){%>ADCGLOB001_12BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcglob001001_erwconmodeclass1") == 1){%>ADCGLOB001_10BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcglob001001_erwconmodeclass1") == 2){%>ADCGLOB001_8BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcglob001001_erwconmodeclass1") == 5){%>ADCGLOB001_10BITFAST,<%} %>
  
  <%if (Is11Device!=1)	{%>      
  .kEMUXConversionModeClass0   = (uint8_t) <% if (app.getIntegerValue(AppBaseuri + appInst + "/adcglob001001_erwextmuxclass0") == 0){%>ADCGLOB001_12BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcglob001001_erwextmuxclass0") == 1){%>ADCGLOB001_10BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcglob001001_erwextmuxclass0") == 2){%>ADCGLOB001_8BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcglob001001_erwextmuxclass0") == 5){%>ADCGLOB001_10BITFAST,<%} %>
          
  .kEMUXConversionModeClass1   = (uint8_t) <% if (app.getIntegerValue(AppBaseuri + appInst + "/adcglob001001_erwextmuxclass1") == 0){%>ADCGLOB001_12BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcglob001001_erwextmuxclass1") == 1){%>ADCGLOB001_10BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcglob001001_erwextmuxclass1") == 2){%>ADCGLOB001_8BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcglob001001_erwextmuxclass1") == 5){%>ADCGLOB001_10BITFAST,<%} %>
  <%}%>        
  .keStartCalib           = (uint8_t) <%=app.getIntegerValue(AppBaseuri + appInst + "/adcglob001_erwstartupcalibration")%>,
          
  .keDoubleClkMSBConver     = (uint8_t) <%=app.getIntegerValue(AppBaseuri + appInst + "/adcglob001_erwdblclockmsb")%>
 
};
  
<%}%>



