<?xml version="1.0" encoding="ASCII"?>
<ResourceModel:App xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ResourceModel="http://www.infineon.com/Davex/Resource.ecore" name="ADCGLOB001" description="This App consume CLK001 and RESET001 Apps for XMC4x00 devices&#xA;and CLK002 App for XMC1x00 devices&#xA;configure the VADC global registers.&#xA;This app configure Analog and Digital Clock,&#xA;Global input class 0/1 and Global Boundary 0/1." descriptionURL="/doc/html/group___a_d_c_g_l_o_b_app.html" mode="SHARABLE" URI="http://www.infineon.com/1.0.28/app/adcglob001/0">
  <upWardMappingList xsi:type="ResourceModel:ProxyResource" href="../../ADCGROUP001/1.0.28/adcgroup001_0.app#//@consumed.1"/>
  <upWardMappingList xsi:type="ResourceModel:ProxyResource" href="../../ADCGROUP001/1.0.28/adcgroup001_1.app#//@consumed.1"/>
  <upWardMappingList xsi:type="ResourceModel:ProxyResource" href="../../ADCGROUP001/1.0.28/adcgroup001_2.app#//@consumed.1"/>
  <upWardMappingList xsi:type="ResourceModel:ProxyResource" href="../../ADCGROUP001/1.0.28/adcgroup001_3.app#//@consumed.1"/>
  <provided xsi:type="ResourceModel:VirtualSignal" name="Global" evalFunction="" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_globalsignal_vs" requiredSignalResource="global/global_signal">
    <defaultValue xsi:type="ResourceModel:Blocked" value="Blocked"/>
    <localValue xsi:type="ResourceModel:StringValue" value="Blocked"/>
    <globalValue xsi:type="ResourceModel:StringValue" value="Blocked"/>
  </provided>
  <provided xsi:type="ResourceModel:VirtualSignal" name="Global_Limit" evalFunction="" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_globallimitsignal_vs" requiredSignalResource="limit/global_signal">
    <defaultValue xsi:type="ResourceModel:Blocked" value="Blocked"/>
    <localValue xsi:type="ResourceModel:StringValue" value="Blocked"/>
    <globalValue xsi:type="ResourceModel:StringValue" value="Blocked"/>
  </provided>
  <provided xsi:type="ResourceModel:EnumerationParameter" name="Double Clock for MSB Conversion" evalFunction="function ForwardMapping()&#xD;&#xA;            {&#xD;&#xA;              var Res = SCM.getResource(&quot;global/globcfg/dcmsb&quot;);&#xD;&#xA;              var value = SCM.getIntValue(currentResource);&#xD;&#xA;              SCM.setIntValue(Res,value);&#xD;&#xA;            }&#xD;&#xA;            function BackwardMapping()&#xD;&#xA;            {&#xD;&#xA;              var Res = SCM.getResource(&quot;global/globcfg/dcmsb&quot;);&#xD;&#xA;              var value = SCM.getIntValue(Res);&#xD;&#xA;              SCM.setIntValue(currentResource,value);&#xD;&#xA;            }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_erwdblclockmsb" downWardmappedList="//@consumed.19" multipleSelections="true">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <upWardMappingList xsi:type="ResourceModel:ProxyResource" href="../../ADCGROUP001/1.0.28/adcgroup001_0.app#//@consumed.58"/>
    <upWardMappingList xsi:type="ResourceModel:ProxyResource" href="../../ADCGROUP001/1.0.28/adcgroup001_1.app#//@consumed.58"/>
    <upWardMappingList xsi:type="ResourceModel:ProxyResource" href="../../ADCGROUP001/1.0.28/adcgroup001_2.app#//@consumed.58"/>
    <upWardMappingList xsi:type="ResourceModel:ProxyResource" href="../../ADCGROUP001/1.0.28/adcgroup001_3.app#//@consumed.58"/>
    <localValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <toolTipHelpDescription>Selects the additional clock cycle for the conversion step of the MSB.&#xD;
1 clock cycles for the MSB (standard).&#xD;
2 clock cycles for the MSB (fADCI > 20 MHz).</toolTipHelpDescription>
    <item name="Enable" evalFunction="function ForwardMapping()&#xD;&#xA;            {&#xD;&#xA;              var Res = SCM.getResource(&quot;global/globcfg/dcmsb&quot;);&#xD;&#xA;              var value = SCM.getIntValue(currentResource);&#xD;&#xA;              if(value == 1){&#xD;&#xA;                SCM.setIntValue(Res,1);&#xD;&#xA;              }&#xD;&#xA;              else {&#xD;&#xA;                SCM.setIntValue(Res,0);&#xD;&#xA;              }&#xD;&#xA;            }&#xD;&#xA;            function BackwardMapping()&#xD;&#xA;            {&#xD;&#xA;              var Res = SCM.getResource(&quot;global/globcfg/dcmsb&quot;);&#xD;&#xA;              var value = SCM.getIntValue(Res);&#xD;&#xA;              if(value == 1){&#xD;&#xA;                SCM.setIntValue(currentResource,1);&#xD;&#xA;              }&#xD;&#xA;              else {&#xD;&#xA;                SCM.setIntValue(currentResource,0);&#xD;&#xA;              }&#xD;&#xA;            }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_erwdblclockmsb/0" downWardmappedList="//@consumed.19" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <localValue xsi:type="ResourceModel:StringValue" value="0"/>
      <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <toolTipHelpDescription></toolTipHelpDescription>
    </item>
  </provided>
  <provided xsi:type="ResourceModel:EnumerationParameter" name="Enable Startup Calibration" evalFunction="function ForwardMapping()&#xD;&#xA;            {&#xD;&#xA;              var Res = SCM.getResource(&quot;global/globcfg/sucal&quot;);&#xD;&#xA;              var value = SCM.getIntValue(currentResource);&#xD;&#xA;              SCM.setIntValue(Res,value);&#xD;&#xA;            }&#xD;&#xA;            function BackwardMapping()&#xD;&#xA;            {&#xD;&#xA;              var Res = SCM.getResource(&quot;global/globcfg/sucal&quot;);&#xD;&#xA;              var value = SCM.getIntValue(Res);&#xD;&#xA;              SCM.setIntValue(currentResource,value);&#xD;&#xA;            }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_erwstartupcalibration" downWardmappedList="//@consumed.18" multipleSelections="true">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="1"/>
    <toolTipHelpDescription>If this is checked then start up calibration is enabled after reset</toolTipHelpDescription>
    <item name="Enable" evalFunction="&#xD;&#xA;            function ForwardMapping()&#xD;&#xA;            {&#xD;&#xA;              var Res = SCM.getResource(&quot;global/globcfg/sucal&quot;);&#xD;&#xA;              var value = SCM.getIntValue(currentResource);&#xD;&#xA;              if(value == 1){&#xD;&#xA;                SCM.setIntValue(Res,1);&#xD;&#xA;              }&#xD;&#xA;              else {&#xD;&#xA;                SCM.setIntValue(Res,0);&#xD;&#xA;              }&#xD;&#xA;            }&#xD;&#xA;            function BackwardMapping()&#xD;&#xA;            {&#xD;&#xA;              var Res = SCM.getResource(&quot;global/globcfg/sucal&quot;);&#xD;&#xA;              var value = SCM.getIntValue(Res);&#xD;&#xA;              if(value == 1){&#xD;&#xA;                SCM.setIntValue(currentResource,1);&#xD;&#xA;              }&#xD;&#xA;              else {&#xD;&#xA;                SCM.setIntValue(currentResource,0);&#xD;&#xA;              }&#xD;&#xA;            }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_erwstartupcalibration/0" downWardmappedList="//@consumed.18" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="1"/>
      <localValue xsi:type="ResourceModel:StringValue" value="1"/>
      <globalValue xsi:type="ResourceModel:IntegerValue" value="1"/>
      <toolTipHelpDescription></toolTipHelpDescription>
    </item>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Peripheral Bus Clock" evalFunction="&#xD;&#xA;        function ForwardMapping()&#xD;&#xA;        {&#xD;&#xA;          var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;          var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;          var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;          if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;              var Res = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;            }&#xD;&#xA;          else&#xD;&#xA;            {&#xD;&#xA;             var Res = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;          var Val = SCM.getIntValue(Res);&#xD;&#xA;        }&#xD;&#xA;        function BackwardMapping()&#xD;&#xA;        {&#xD;&#xA;          var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;          var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;          var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;          if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;                var Res = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;            }&#xD;&#xA;          else&#xD;&#xA;            {&#xD;&#xA;                 var Res = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;          var Val = SCM.getDoubleValue(Res);&#xD;&#xA;          SCM.setDoubleValue(currentResource,Val);&#xD;&#xA;        }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwperibusclock" maxValue="3e8" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="2"/>
    <upWardMappingList xsi:type="ResourceModel:ProxyResource" href="../../ADCGROUP001/1.0.28/adcgroup001_0.app#//@consumed.56"/>
    <upWardMappingList xsi:type="ResourceModel:ProxyResource" href="../../ADCGROUP001/1.0.28/adcgroup001_1.app#//@consumed.56"/>
    <upWardMappingList xsi:type="ResourceModel:ProxyResource" href="../../ADCGROUP001/1.0.28/adcgroup001_2.app#//@consumed.56"/>
    <upWardMappingList xsi:type="ResourceModel:ProxyResource" href="../../ADCGROUP001/1.0.28/adcgroup001_3.app#//@consumed.56"/>
    <localValue xsi:type="ResourceModel:IntegerValue" value="78"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="78"/>
    <toolTipHelpDescription>The peripheral bus clock frequency</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Module Clock" evalFunction="&#xD;&#xA;        function ForwardMapping()&#xD;&#xA;        {&#xD;&#xA;          var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;          var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;          var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;          if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;              var Res = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;            }&#xD;&#xA;          else&#xD;&#xA;            {&#xD;&#xA;             var Res = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;          var Val = SCM.getIntValue(Res);&#xD;&#xA;        }&#xD;&#xA;        function BackwardMapping()&#xD;&#xA;        {&#xD;&#xA;          var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;          var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;          var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;          if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;                var Res = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;            }&#xD;&#xA;          else&#xD;&#xA;            {&#xD;&#xA;                 var Res = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;          var Val = SCM.getDoubleValue(Res);&#xD;&#xA;          SCM.setDoubleValue(currentResource,Val);&#xD;&#xA;        }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwmoduleclock" maxValue="3e8" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="2"/>
    <localValue xsi:type="ResourceModel:StringValue" value="2"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="78"/>
    <toolTipHelpDescription>The module clock frequency</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Desired SH Clock" evalFunction="&#xD;&#xA;          function ForwardMapping(){&#xD;&#xA;&#xD;&#xA;          var Res2 = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;          var Clock = SCM.getIntValue(Res2);&#xD;&#xA;          if (Clock == -1){&#xD;&#xA;            Clock = 32;&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;             var value2 = SCM.getDoubleValue(currentResource);&#xD;&#xA;             var tempRes = SCM.getResource(&quot;temp_shclock&quot;);&#xD;&#xA;             SCM.setDoubleValue(tempRes,value2);&#xD;&#xA;&#xD;&#xA;         var Res3 = SCM.getResource(&quot;temp_shsdivs&quot;);&#xD;&#xA;&#xD;&#xA;         var Divider = (Math.floor( (Clock) / (value2) ) - 1);&#xD;&#xA;&#xD;&#xA;            if(Divider &lt; 0) {&#xD;&#xA;               Divider = 0;&#xD;&#xA;             }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            if(Divider > 15) {&#xD;&#xA;                  Divider = 15;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            SCM.setIntValue(Res3, Divider);&#xD;&#xA;            var Res4 = SCM.getResource(&quot;adcglob001_irwselshclock&quot;);&#xD;&#xA;&#xD;&#xA;            var Divider1 = Divider + 1;&#xD;&#xA;&#xD;&#xA;           var actual_clock = (Clock / Divider1);&#xD;&#xA;&#xD;&#xA;           SCM.setDoubleValue(Res4, actual_clock);&#xD;&#xA;          }&#xD;&#xA;          function BackwardMapping(){&#xD;&#xA;            var tempRes = SCM.getResource(&quot;temp_shclock&quot;);&#xD;&#xA;            var value = SCM.getDoubleValue(tempRes);&#xD;&#xA;            SCM.setDoubleValue(currentResource,value);&#xD;&#xA;&#xD;&#xA;          var value3 = SCM.getSoftwareId().substring(0,1).compareTo(&quot;4&quot;);&#xD;&#xA;           if(value3 == 0)&#xD;&#xA;            SCM.setMinMaxValue(currentResource,0,60,1);&#xD;&#xA;           else&#xD;&#xA;            SCM.setMinMaxValue(currentResource,0,32,1);&#xD;&#xA;          }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwdesiredshclock" downWardmappedList="//@consumed.0 //@consumed.1" maxValue="3c" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="1E"/>
    <localValue xsi:type="ResourceModel:StringValue" value="1E"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="1e"/>
    <toolTipHelpDescription>This is the desired analog clock value</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="SH Clock Divider" evalFunction="&#xD;&#xA;        function ForwardMapping()&#xD;&#xA;        {&#xD;&#xA;&#xD;&#xA;           var Res2 = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;&#xD;&#xA;           var clock = SCM.getIntValue(Res2);&#xD;&#xA;           var Res3 = SCM.getResource(&quot;temp_shclock&quot;);&#xD;&#xA;           var value3 = SCM.getDoubleValue(Res3);&#xD;&#xA;        }&#xD;&#xA;        function BackwardMapping()&#xD;&#xA;        {&#xD;&#xA;&#xD;&#xA;          var Res2 = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;&#xD;&#xA;          var Clock = SCM.getDoubleValue(Res2);&#xD;&#xA;          if(Clock == -1){Clock = 32;}&#xD;&#xA;&#xD;&#xA;          var Res_2 = SCM.getResource(&quot;temp_shclock&quot;);&#xD;&#xA;          var value2 = SCM.getDoubleValue(Res_2);&#xD;&#xA;&#xD;&#xA;          var Divider = (Math.floor( Clock / (value2) ) - 1);&#xD;&#xA;&#xD;&#xA;            if(Divider &lt; 0) {&#xD;&#xA;               Divider = 0;&#xD;&#xA;             }&#xD;&#xA;&#xD;&#xA;         if(Divider > 15) {&#xD;&#xA;           Divider = 15;&#xD;&#xA;         }&#xD;&#xA;         SCM.setIntValue(currentResource, Divider);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwshclockdivider" maxValue="1F" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="2"/>
    <localValue xsi:type="ResourceModel:StringValue" value="2"/>
    <globalValue xsi:type="ResourceModel:StringValue" value="2"/>
    <toolTipHelpDescription>The clock divider for internal analog part.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Actual SH Clock" evalFunction="&#xD;&#xA;        function ForwardMapping()&#xD;&#xA;        {&#xD;&#xA;&#xD;&#xA;          var Res2 = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;&#xD;&#xA;          var clock = SCM.getIntValue(Res2);&#xD;&#xA;          var Res3 = SCM.getResource(&quot;temp_shclock&quot;);&#xD;&#xA;          var value3 = SCM.getDoubleValue(Res3);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;        function BackwardMapping()&#xD;&#xA;        {&#xD;&#xA;&#xD;&#xA;           var Res2 = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;&#xD;&#xA;           var Clock = SCM.getDoubleValue(Res2);&#xD;&#xA;           if(Clock == -1){&#xD;&#xA;                 Clock = 32;&#xD;&#xA;           }&#xD;&#xA;&#xD;&#xA;           var Res_2 = SCM.getResource(&quot;temp_shclock&quot;);&#xD;&#xA;           var value2 = SCM.getDoubleValue(Res_2);&#xD;&#xA;&#xD;&#xA;           var Divider = Math.floor( (Clock) / (value2) );&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;              if(Divider &lt;= 1)&#xD;&#xA;               { Divider = 1; }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            if(Divider > 16) {&#xD;&#xA;              Divider = 16;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;           var actual_clock = Clock / Divider;&#xD;&#xA;&#xD;&#xA;           SCM.setDoubleValue(currentResource, actual_clock);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwselshclock" maxValue="3c" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="1E"/>
    <localValue xsi:type="ResourceModel:StringValue" value="1E"/>
    <globalValue xsi:type="ResourceModel:StringValue" value="1E"/>
    <toolTipHelpDescription>This is the actual possible analog clock value.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Desired Analog Clock" evalFunction="&#xD;&#xA;          function ForwardMapping(){&#xD;&#xA;          var DeviceCheck = SCM.getSoftwareId().substring(0,1).compareTo(&quot;4&quot;);&#xD;&#xA;&#xD;&#xA;          if (DeviceCheck == 0)&#xD;&#xA;            {&#xD;&#xA;              var Res2 = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;            }&#xD;&#xA;          else&#xD;&#xA;            {&#xD;&#xA;              var Res2 = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;          var Clock = SCM.getIntValue(Res2);&#xD;&#xA;                 if (Clock == -1){&#xD;&#xA;         if (DeviceCheck == 0 )&#xD;&#xA;                  {&#xD;&#xA;            Clock = 120;}&#xD;&#xA;          else&#xD;&#xA;          {&#xD;&#xA;            Clock = 32;&#xD;&#xA;          }}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;             var value2 = SCM.getDoubleValue(currentResource);&#xD;&#xA;             var tempRes = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;             if(value2 == 61)&#xD;&#xA;             {&#xD;&#xA;              if (DeviceCheck == 0)&#xD;&#xA;              {&#xD;&#xA;               SCM.setDoubleValue(tempRes,30);&#xD;&#xA;              }&#xD;&#xA;              else&#xD;&#xA;              {&#xD;&#xA;               SCM.setDoubleValue(tempRes,8);&#xD;&#xA;              }&#xD;&#xA;             }&#xD;&#xA;&#xD;&#xA;         var Res3 = SCM.getResource(&quot;global/globcfg/diva&quot;);&#xD;&#xA;&#xD;&#xA;         var Divider = (Math.floor( (Clock) / (value2) ) - 1);&#xD;&#xA;                 if (DeviceCheck  == 0 )  // for xmc45/44/42&#xD;&#xA;           {&#xD;&#xA;             if(Divider &lt; 1) {&#xD;&#xA;               Divider = 1;&#xD;&#xA;             }&#xD;&#xA;           }&#xD;&#xA;           else                      // for xmc12/13&#xD;&#xA;           {&#xD;&#xA;            if(Divider &lt; 0) {&#xD;&#xA;               Divider = 0;&#xD;&#xA;             }&#xD;&#xA;           }&#xD;&#xA;&#xD;&#xA;            if(Divider > 31) {&#xD;&#xA;                  Divider = 31;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            SCM.setIntValue(Res3, Divider);&#xD;&#xA;            var Res4 = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;&#xD;&#xA;            var Divider1 = Math.floor( (Clock) / (value2) );&#xD;&#xA;&#xD;&#xA;            if(Divider1 &lt; 2) {&#xD;&#xA;              Divider1 = 2;&#xD;&#xA;              }&#xD;&#xA;&#xD;&#xA;           if(Divider1 > 32) {&#xD;&#xA;              Divider1 = 32;&#xD;&#xA;              }&#xD;&#xA;&#xD;&#xA;           var actual_clock = (Clock / Divider1);&#xD;&#xA;&#xD;&#xA;           SCM.setDoubleValue(Res4, actual_clock);&#xD;&#xA;          }&#xD;&#xA;          function BackwardMapping(){&#xD;&#xA;            var tempRes = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;            var value = SCM.getDoubleValue(tempRes);&#xD;&#xA;            SCM.setDoubleValue(currentResource,value);&#xD;&#xA;&#xD;&#xA;          var value3 = SCM.getSoftwareId().substring(0,1).compareTo(&quot;4&quot;);&#xD;&#xA;           if(value3 == 0)&#xD;&#xA;           {&#xD;&#xA;            SCM.setMinMaxValue(currentResource,0,60,1);&#xD;&#xA;           }&#xD;&#xA;           else&#xD;&#xA;           {&#xD;&#xA;            SCM.setMinMaxValue(currentResource,0,8,1);&#xD;&#xA;           }&#xD;&#xA;          }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwanalogclock" downWardmappedList="//@consumed.7 //@consumed.16" maxValue="3c" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="3D"/>
    <localValue xsi:type="ResourceModel:StringValue" value="3D"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="1e"/>
    <toolTipHelpDescription>This is the desired analog clock value</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Analog Clock Divider" evalFunction="&#xD;&#xA;        function ForwardMapping()&#xD;&#xA;        {&#xD;&#xA;          var DeviceCheck = SCM.getSoftwareId().substring(0,1).compareTo(&quot;4&quot;);&#xD;&#xA;&#xD;&#xA;          if (DeviceCheck  == 0 )&#xD;&#xA;            {&#xD;&#xA;                var Res2 = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;            }&#xD;&#xA;          else&#xD;&#xA;            {&#xD;&#xA;                var Res2 = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;           var clock = SCM.getIntValue(Res2);&#xD;&#xA;           var Res3 = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;           var value3 = SCM.getDoubleValue(Res3);&#xD;&#xA;        }&#xD;&#xA;        function BackwardMapping()&#xD;&#xA;        {&#xD;&#xA;          var DeviceCheck = SCM.getSoftwareId().substring(0,1).compareTo(&quot;4&quot;);&#xD;&#xA;&#xD;&#xA;          if (DeviceCheck  == 0 )&#xD;&#xA;            {&#xD;&#xA;                var Res2 = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;            }&#xD;&#xA;          else&#xD;&#xA;            {&#xD;&#xA;                var Res2 = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;          var Clock = SCM.getDoubleValue(Res2);&#xD;&#xA;          if(Clock == -1){Clock = 120;}&#xD;&#xA;&#xD;&#xA;          var Res_2 = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;          var value2 = SCM.getDoubleValue(Res_2);&#xD;&#xA;&#xD;&#xA;          var Divider = (Math.floor( Clock / (value2) ) - 1);&#xD;&#xA;&#xD;&#xA;         if (DeviceCheck  == 0 )  // for xmc45/44/42&#xD;&#xA;         {&#xD;&#xA;          if(Divider &lt; 1) {&#xD;&#xA;               Divider = 1;&#xD;&#xA;               }&#xD;&#xA;         }&#xD;&#xA;        else                      // for xmc12/13&#xD;&#xA;         {&#xD;&#xA;            if(Divider &lt; 0) {&#xD;&#xA;               Divider = 0;&#xD;&#xA;             }&#xD;&#xA;         }&#xD;&#xA;         if(Divider > 31) {&#xD;&#xA;           Divider = 31;&#xD;&#xA;         }&#xD;&#xA;         SCM.setIntValue(currentResource, Divider);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwanalogclockdivider" maxValue="1F" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="2"/>
    <localValue xsi:type="ResourceModel:StringValue" value="2"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="3"/>
    <toolTipHelpDescription>The clock divider for internal analog part.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Actual Analog Clock" evalFunction="&#xD;&#xA;        function ForwardMapping()&#xD;&#xA;        {&#xD;&#xA;          var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;          var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;          var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;          if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;                var Res2 = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;            }&#xD;&#xA;          else&#xD;&#xA;            {&#xD;&#xA;                var Res2 = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;          var clock = SCM.getIntValue(Res2);&#xD;&#xA;          var Res3 = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;          var value3 = SCM.getDoubleValue(Res3);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;        function BackwardMapping()&#xD;&#xA;        {&#xD;&#xA;          var DeviceCheck = SCM.getSoftwareId().substring(0,1).compareTo(&quot;4&quot;);&#xD;&#xA;&#xD;&#xA;          if (DeviceCheck  == 0 )&#xD;&#xA;            {&#xD;&#xA;                var Res2 = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;            }&#xD;&#xA;          else&#xD;&#xA;            {&#xD;&#xA;                var Res2 = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;           var Clock = SCM.getDoubleValue(Res2);&#xD;&#xA;           if(Clock == -1){&#xD;&#xA;               if (DeviceCheck  == 0 )&#xD;&#xA;                 { Clock = 120;}&#xD;&#xA;               else&#xD;&#xA;                 {Clock = 32;}&#xD;&#xA;           }&#xD;&#xA;&#xD;&#xA;           var Res_2 = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;           var value2 = SCM.getDoubleValue(Res_2);&#xD;&#xA;&#xD;&#xA;           var Divider = Math.floor( (Clock) / (value2) );&#xD;&#xA;&#xD;&#xA;           if (DeviceCheck  == 0 ) {&#xD;&#xA;              if(Divider &lt; 2)&#xD;&#xA;               { Divider = 2; }&#xD;&#xA;            }&#xD;&#xA;           else&#xD;&#xA;            {&#xD;&#xA;              if(Divider &lt;= 1)&#xD;&#xA;               { Divider = 1; }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;            if(Divider > 32) {&#xD;&#xA;              Divider = 32;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;           var actual_clock = Clock / Divider;&#xD;&#xA;&#xD;&#xA;           SCM.setDoubleValue(currentResource, actual_clock);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwselanalogclock" maxValue="3c" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="1E"/>
    <upWardMappingList xsi:type="ResourceModel:ProxyResource" href="../../ADCGROUP001/1.0.28/adcgroup001_0.app#//@consumed.57"/>
    <upWardMappingList xsi:type="ResourceModel:ProxyResource" href="../../ADCGROUP001/1.0.28/adcgroup001_1.app#//@consumed.57"/>
    <upWardMappingList xsi:type="ResourceModel:ProxyResource" href="../../ADCGROUP001/1.0.28/adcgroup001_2.app#//@consumed.57"/>
    <upWardMappingList xsi:type="ResourceModel:ProxyResource" href="../../ADCGROUP001/1.0.28/adcgroup001_3.app#//@consumed.57"/>
    <localValue xsi:type="ResourceModel:IntegerValue" value="1e"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="1e"/>
    <toolTipHelpDescription>This is the actual possible analog clock value.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:EnumerationParameter" name="Digital Clock" evalFunction="function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;                    var Res = SCM.getResource(&quot;global/globcfg/divd&quot;);&#xD;&#xA;                    SCM.setIntValue(Res,value);&#xD;&#xA;&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globcfg/divd&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;                    SCM.setIntValue(currentResource,ValueReg);&#xD;&#xA;&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_erwdigitalclock" downWardmappedList="//@consumed.17">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <toolTipHelpDescription>This allows to define the frequency of the arbiter clock fADCD.</toolTipHelpDescription>
    <item name="fADC" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globcfg/divd&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,0);&#xD;&#xA;                      }else if(value === -1){&#xD;&#xA;                        SCM.setIntValue(Res,0);&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globcfg/divd&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 0){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else if(ValueReg == -1){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }&#xD;&#xA;                " URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_erwdigitalclock/0" downWardmappedList="//@consumed.17" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="1"/>
      <localValue xsi:type="ResourceModel:StringValue" value="1"/>
      <globalValue xsi:type="ResourceModel:IntegerValue" value="1"/>
      <toolTipHelpDescription>This is the arbiter clock frequency when divider factor for the arbiter clock is 0.</toolTipHelpDescription>
    </item>
    <item name="fADC/2" evalFunction="&#xD;&#xA;              function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globcfg/divd&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,1);&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globcfg/divd&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 1){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_erwdigitalclock/1" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <localValue xsi:type="ResourceModel:StringValue" value="0"/>
      <globalValue xsi:type="ResourceModel:StringValue" value="0"/>
      <toolTipHelpDescription>This is the arbiter clock frequency when divider factor for the arbiter clock is 1.</toolTipHelpDescription>
    </item>
    <item name="fADC/3" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globcfg/divd&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,2);&#xD;&#xA;&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globcfg/divd&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 2){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_erwdigitalclock/2" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <localValue xsi:type="ResourceModel:StringValue" value="0"/>
      <globalValue xsi:type="ResourceModel:StringValue" value="0"/>
      <toolTipHelpDescription>This is the arbiter clock frequency when divider factor for the arbiter clock is 2.</toolTipHelpDescription>
    </item>
    <item name="fADC/4" evalFunction="&#xD;&#xA;               function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globcfg/divd&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,3);&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globcfg/divd&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 3){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_erwdigitalclock/3" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <localValue xsi:type="ResourceModel:StringValue" value="0"/>
      <globalValue xsi:type="ResourceModel:StringValue" value="0"/>
      <toolTipHelpDescription>This is the arbiter clock frequency when divider factor for the arbiter clock is 3.</toolTipHelpDescription>
    </item>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Digital Clock Divider" evalFunction="&#xD;&#xA;        function ForwardMapping()&#xD;&#xA;        {&#xD;&#xA;          var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;          var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;          var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;          if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;                var Res2 = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;            }&#xD;&#xA;          else&#xD;&#xA;            {&#xD;&#xA;                var Res2 = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;          var clock = SCM.getIntValue(Res2);&#xD;&#xA;&#xD;&#xA;          var tempRes = SCM.getResource(&quot;adcglob001_erwdigitalclock&quot;);&#xD;&#xA;          var temp = SCM.getIntValue(tempRes);&#xD;&#xA;&#xD;&#xA;          var temp = SCM.getResource(&quot;global/globcfg/divd&quot;);&#xD;&#xA;          var value = SCM.getIntValue(temp);&#xD;&#xA;        }&#xD;&#xA;        function BackwardMapping()&#xD;&#xA;        {&#xD;&#xA;          var tempRes = SCM.getResource(&quot;global/globcfg/divd&quot;);&#xD;&#xA;          var value = SCM.getIntValue(tempRes);&#xD;&#xA;          SCM.setIntValue(currentResource,value);&#xD;&#xA;        }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwdigitalclockdivider" maxValue="1F" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="1"/>
    <localValue xsi:type="ResourceModel:StringValue" value="1"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <toolTipHelpDescription>The clock divider for internal digital part.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Actual Digital Clock" evalFunction="&#xD;&#xA;        function ForwardMapping()&#xD;&#xA;        {&#xD;&#xA;          var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;          var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;          var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;          if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;                var Res2 = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;            }&#xD;&#xA;          else&#xD;&#xA;            {&#xD;&#xA;          var Res2 = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;          var clock = SCM.getIntValue(Res2);&#xD;&#xA;&#xD;&#xA;          var tempRes = SCM.getResource(&quot;adcglob001_erwdigitalclock&quot;);&#xD;&#xA;          var temp = SCM.getIntValue(tempRes);&#xD;&#xA;      var temp = SCM.getResource(&quot;global/globcfg/divd&quot;);&#xD;&#xA;          var value = SCM.getIntValue(temp);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;        function BackwardMapping()&#xD;&#xA;        {&#xD;&#xA;          var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;          var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;          var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;          if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;        var Res2 = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;        }&#xD;&#xA;      else&#xD;&#xA;            {&#xD;&#xA;                var Res2 = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;           var Clock = SCM.getDoubleValue(Res2);&#xD;&#xA;           if(Clock == -1){Clock = 120;}&#xD;&#xA;&#xD;&#xA;           var Res = SCM.getResource(&quot;global/globcfg/divd&quot;);&#xD;&#xA;           var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;          if(ValueReg == 0){&#xD;&#xA;              SCM.setIntValue(currentResource,Clock);&#xD;&#xA;          }else if(ValueReg == 1){&#xD;&#xA;            SCM.setIntValue(currentResource, (Clock/2));&#xD;&#xA;          }else if(ValueReg == 2){&#xD;&#xA;            SCM.setIntValue(currentResource, (Clock/3));&#xD;&#xA;          }else {&#xD;&#xA;            SCM.setIntValue(currentResource, (Clock/4));&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwseldigitalclock" maxValue="78" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="78"/>
    <localValue xsi:type="ResourceModel:StringValue" value="78"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="78"/>
    <toolTipHelpDescription>This is the actual possible digital clock value.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:EnumerationParameter" name="Global Class 0 Conversion Mode" evalFunction="function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;                    var Res = SCM.getResource(&quot;global/globiclass0/cms&quot;);&#xD;&#xA;                    SCM.setIntValue(Res,value);&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cms&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;                    SCM.setIntValue(currentResource,ValueReg);&#xD;&#xA;&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwconmodeclass0" downWardmappedList="//@consumed.23">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <toolTipHelpDescription>This allow the user to choose different conversion mode of VADC.
12-bit/10-bit/ 8-bit conversion or 10-bit fast compare mode.</toolTipHelpDescription>
    <item name="12 Bit Conversion" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cms&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,0);&#xD;&#xA;                      }else if(value === -1){&#xD;&#xA;                        SCM.setIntValue(Res,0);&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cms&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 0){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else if(ValueReg == -1){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }&#xD;&#xA;                " URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwconmodeclass0/0" downWardmappedList="//@consumed.23" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="1"/>
      <localValue xsi:type="ResourceModel:StringValue" value="1"/>
      <globalValue xsi:type="ResourceModel:IntegerValue" value="1"/>
      <toolTipHelpDescription>This allow the user to choose 12bit conversion mode for VADC.</toolTipHelpDescription>
    </item>
    <item name="10 Bit Conversion" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cms&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,1);&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cms&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 1){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwconmodeclass0/1" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <localValue xsi:type="ResourceModel:StringValue" value="0"/>
      <globalValue xsi:type="ResourceModel:StringValue" value="0"/>
      <toolTipHelpDescription>This allow the user to choose 10 bit conversion mode for VADC.</toolTipHelpDescription>
    </item>
    <item name="8 Bit Conversion" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                  {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cms&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,2);&#xD;&#xA;&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cms&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 2){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwconmodeclass0/2" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <localValue xsi:type="ResourceModel:StringValue" value="0"/>
      <globalValue xsi:type="ResourceModel:StringValue" value="0"/>
      <toolTipHelpDescription>This allow the user to choose 8 bit conversion mode for VADC.</toolTipHelpDescription>
    </item>
    <item name="10 Bit Fast Compare Mode" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                  {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cms&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,5);&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cms&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 5){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwconmodeclass0/3" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <localValue xsi:type="ResourceModel:StringValue" value="0"/>
      <globalValue xsi:type="ResourceModel:StringValue" value="0"/>
      <toolTipHelpDescription>This allow the user to choose 10 bit fast compare mode for VADC.</toolTipHelpDescription>
    </item>
  </provided>
  <provided xsi:type="ResourceModel:EnumerationParameter" name="Global Class 1 Conversion Mode" evalFunction="function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;                    var Res = SCM.getResource(&quot;global/globiclass1/cms&quot;);&#xD;&#xA;                    SCM.setIntValue(Res,value);&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cms&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;                    SCM.setIntValue(currentResource,ValueReg);&#xD;&#xA;&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwconmodeclass1" downWardmappedList="//@consumed.28">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <toolTipHelpDescription>This allow the user to choose different conversion mode of VADC.
12-bit/10-bit/ 8-bit conversion or 10-bit fast compare mode.</toolTipHelpDescription>
    <item name="12 Bit Conversion" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cms&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,0);&#xD;&#xA;                      }else if(value === -1){&#xD;&#xA;                        SCM.setIntValue(Res,0);&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cms&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 0){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else if(ValueReg == -1){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }&#xD;&#xA;                " URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwconmodeclass1/0" downWardmappedList="//@consumed.28" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="1"/>
      <localValue xsi:type="ResourceModel:StringValue" value="1"/>
      <globalValue xsi:type="ResourceModel:IntegerValue" value="1"/>
      <toolTipHelpDescription>This allow the user to choose 12bit conversion mode for VADC.</toolTipHelpDescription>
    </item>
    <item name="10 Bit Conversion" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cms&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,1);&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cms&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 1){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwconmodeclass1/1" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <localValue xsi:type="ResourceModel:StringValue" value="0"/>
      <globalValue xsi:type="ResourceModel:StringValue" value="0"/>
      <toolTipHelpDescription>This allow the user to choose 10 bit conversion mode for VADC.</toolTipHelpDescription>
    </item>
    <item name="8 Bit Conversion" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                  {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cms&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,2);&#xD;&#xA;&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cms&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 2){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwconmodeclass1/2" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <localValue xsi:type="ResourceModel:StringValue" value="0"/>
      <globalValue xsi:type="ResourceModel:StringValue" value="0"/>
      <toolTipHelpDescription>This allow the user to choose 8 bit conversion mode for VADC.</toolTipHelpDescription>
    </item>
    <item name="10 Bit Fast Compare Mode" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                  {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cms&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,5);&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cms&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 5){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwconmodeclass1/3" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <localValue xsi:type="ResourceModel:StringValue" value="0"/>
      <globalValue xsi:type="ResourceModel:StringValue" value="0"/>
      <toolTipHelpDescription>This allow the user to choose 10 bit fast compare mode for VADC.</toolTipHelpDescription>
    </item>
  </provided>
  <provided xsi:type="ResourceModel:EnumerationParameter" name="Global Class 0 External Multiplexer Conversion Mode" evalFunction="function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;                    var Res = SCM.getResource(&quot;global/globiclass0/cme&quot;);&#xD;&#xA;                    SCM.setIntValue(Res,value);&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cme&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;                    SCM.setIntValue(currentResource,ValueReg);&#xD;&#xA;&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwextmuxclass0" downWardmappedList="//@consumed.24">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <toolTipHelpDescription>This allow the user to choose different external multiplexer conversion mode of VADC.
12-bit/10-bit/ 8-bit conversion or 10-bit fast compare mode.</toolTipHelpDescription>
    <item name="12 Bit Conversion" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cme&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,0);&#xD;&#xA;                      }else if(value === -1){&#xD;&#xA;                        SCM.setIntValue(Res,0);&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cme&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 0){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else if(ValueReg == -1){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }&#xD;&#xA;                " URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwextmuxclass0/0" downWardmappedList="//@consumed.24" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="1"/>
      <localValue xsi:type="ResourceModel:StringValue" value="1"/>
      <globalValue xsi:type="ResourceModel:IntegerValue" value="1"/>
      <toolTipHelpDescription>This allow the user to choose 12bit external multiplexer conversion mode for VADC.</toolTipHelpDescription>
    </item>
    <item name="10 Bit Conversion" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cme&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,1);&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cme&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 1){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwextmuxclass0/1" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <localValue xsi:type="ResourceModel:StringValue" value="0"/>
      <globalValue xsi:type="ResourceModel:StringValue" value="0"/>
      <toolTipHelpDescription>This allow the user to choose 10 bit external multiplexer conversion mode for VADC.</toolTipHelpDescription>
    </item>
    <item name="8 Bit Conversion" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                  {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cme&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,2);&#xD;&#xA;&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cme&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 2){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwextmuxclass0/2" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <localValue xsi:type="ResourceModel:StringValue" value="0"/>
      <globalValue xsi:type="ResourceModel:StringValue" value="0"/>
      <toolTipHelpDescription>This allow the user to choose 8 bit external multiplexer conversion mode for VADC.</toolTipHelpDescription>
    </item>
    <item name="10 Bit Fast Compare Mode" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                  {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cme&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,5);&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass0/cme&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 5){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwextmuxclass0/3" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <localValue xsi:type="ResourceModel:StringValue" value="0"/>
      <globalValue xsi:type="ResourceModel:StringValue" value="0"/>
      <toolTipHelpDescription>This allow the user to choose 10 bit fast external multiplexer conversion mode for VADC.</toolTipHelpDescription>
    </item>
  </provided>
  <provided xsi:type="ResourceModel:EnumerationParameter" name="Global Class 1 External Multiplexer Conversion Mode" evalFunction="function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;                    var Res = SCM.getResource(&quot;global/globiclass1/cme&quot;);&#xD;&#xA;                    SCM.setIntValue(Res,value);&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cme&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;                    SCM.setIntValue(currentResource,ValueReg);&#xD;&#xA;&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwextmuxclass1" downWardmappedList="//@consumed.29">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <toolTipHelpDescription>This allow the user to choose different external multiplexer conversion mode of VADC.
12-bit/10-bit/ 8-bit conversion or 10-bit fast compare mode.</toolTipHelpDescription>
    <item name="12 Bit Conversion" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cme&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,0);&#xD;&#xA;                      }else if(value === -1){&#xD;&#xA;                        SCM.setIntValue(Res,0);&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cme&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 0){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else if(ValueReg == -1){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }&#xD;&#xA;                " URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwextmuxclass1/0" downWardmappedList="//@consumed.29" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="1"/>
      <localValue xsi:type="ResourceModel:StringValue" value="1"/>
      <globalValue xsi:type="ResourceModel:IntegerValue" value="1"/>
      <toolTipHelpDescription>This allow the user to choose 12bit external multiplexer conversion mode for VADC.</toolTipHelpDescription>
    </item>
    <item name="10 Bit Conversion" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cme&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,1);&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cme&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 1){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwextmuxclass1/1" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <localValue xsi:type="ResourceModel:StringValue" value="0"/>
      <globalValue xsi:type="ResourceModel:StringValue" value="0"/>
      <toolTipHelpDescription>This allow the user to choose 10 bit external multiplexer conversion mode for VADC.</toolTipHelpDescription>
    </item>
    <item name="8 Bit Conversion" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                  {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cme&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,2);&#xD;&#xA;&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cme&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 2){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwextmuxclass1/2" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <localValue xsi:type="ResourceModel:StringValue" value="0"/>
      <globalValue xsi:type="ResourceModel:StringValue" value="0"/>
      <toolTipHelpDescription>This allow the user to choose 8 bit external multiplexer conversion mode for VADC.</toolTipHelpDescription>
    </item>
    <item name="10 Bit Fast Compare Mode" evalFunction="&#xD;&#xA;                function ForwardMapping()&#xD;&#xA;                  {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cme&quot;);&#xD;&#xA;                      var value = SCM.getIntValue(currentResource);&#xD;&#xA;&#xD;&#xA;                      if(value == 1){&#xD;&#xA;                        SCM.setIntValue(Res,5);&#xD;&#xA;                      }&#xD;&#xA;                   }&#xD;&#xA;                function BackwardMapping()&#xD;&#xA;                {&#xD;&#xA;                      var Res = SCM.getResource(&quot;global/globiclass1/cme&quot;);&#xD;&#xA;                    var ValueReg = SCM.getIntValue(Res);&#xD;&#xA;&#xD;&#xA;                      if(ValueReg == 5){&#xD;&#xA;                        SCM.setIntValue(currentResource,1);&#xD;&#xA;&#xD;&#xA;                      }else {&#xD;&#xA;                        SCM.setIntValue(currentResource,0);&#xD;&#xA;                      }&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001001_erwextmuxclass1/3" maxValue="1" minValue="0">
      <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
      <localValue xsi:type="ResourceModel:StringValue" value="0"/>
      <globalValue xsi:type="ResourceModel:StringValue" value="0"/>
      <toolTipHelpDescription>This allow the user to choose 10 bit fast external multiplexer conversion mode for VADC.</toolTipHelpDescription>
    </item>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Class 0 Desired Sample Time" evalFunction="&#xD;&#xA;          function ForwardMapping(){&#xD;&#xA;            var value2 = SCM.getDoubleValue(currentResource);&#xD;&#xA;            var tempRes = SCM.getResource(&quot;temp_dsamptime0&quot;);&#xD;&#xA;            SCM.setDoubleValue(tempRes,value2);&#xD;&#xA;&#xD;&#xA;           var actanalogclk = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;           var actanalogclkvalue = SCM.getDoubleValue(actanalogclk);&#xD;&#xA;&#xD;&#xA;           var resource = SCM.getResource(&quot;global/globiclass0/stcs&quot;);&#xD;&#xA;&#xD;&#xA;           var tADCI = 1000/actanalogclkvalue;&#xD;&#xA;&#xD;&#xA;            var temp = (value2/tADCI) - 2;&#xD;&#xA;&#xD;&#xA;            var STC = 0;&#xD;&#xA;&#xD;&#xA;            if(temp &lt; 0) {&#xD;&#xA;              STC =0;&#xD;&#xA;            } else if (temp > 256) {&#xD;&#xA;                STC=31;&#xD;&#xA;            } else if ((temp > 16) &amp;&amp; (temp &lt;= 256) ) {&#xD;&#xA;                STC= Math.floor( (temp) / (16) );&#xD;&#xA;                STC=(STC+15);&#xD;&#xA;            } else {&#xD;&#xA;                STC= Math.floor(temp);&#xD;&#xA;            }&#xD;&#xA;            SCM.setIntValue(resource, STC);&#xD;&#xA;          }&#xD;&#xA;          function BackwardMapping(){&#xD;&#xA;            var tempRes = SCM.getResource(&quot;temp_dsamptime0&quot;);&#xD;&#xA;            var value = SCM.getDoubleValue(tempRes);&#xD;&#xA;            SCM.setDoubleValue(currentResource,value);&#xD;&#xA;          }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwclass0desiredsampletime" downWardmappedList="//@consumed.3 //@consumed.21" maxValue="2198" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="43"/>
    <localValue xsi:type="ResourceModel:StringValue" value="43"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="43"/>
    <toolTipHelpDescription>This is the desired sample time used for sampling in standard conversion.
Sample time= (2+STC)*Tadci, where STC - Additional Clock Cycle.
Total conversion time depends on sample time and result width.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Class 0 Sample Time Control for SC" evalFunction="&#xD;&#xA;        function ForwardMapping()&#xD;&#xA;        {&#xD;&#xA;      var Res3 = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;          var clock = SCM.getDoubleValue(Res3);&#xD;&#xA;&#xD;&#xA;          var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;          var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;          var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;          if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;        var preclock = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;        }&#xD;&#xA;      else&#xD;&#xA;            {&#xD;&#xA;                var preclock = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;          var preclockval = SCM.getIntValue(preclock);&#xD;&#xA;      var resource = SCM.getResource(&quot;global/globiclass0/stcs&quot;);&#xD;&#xA;      var value = SCM.getDoubleValue(resource);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;        function BackwardMapping()&#xD;&#xA;        {&#xD;&#xA;       var actanalogclk = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;          var actanalogclkvalue = SCM.getDoubleValue(actanalogclk);&#xD;&#xA;      var stReg = SCM.getResource(&quot;temp_dsamptime0&quot;);&#xD;&#xA;          var stvalue = SCM.getDoubleValue(stReg);&#xD;&#xA;&#xD;&#xA;          var tADCI = 1000/actanalogclkvalue;&#xD;&#xA;&#xD;&#xA;            var temp = (stvalue/tADCI) - 2;&#xD;&#xA;&#xD;&#xA;            var STC = 0;&#xD;&#xA;&#xD;&#xA;            if(temp &lt; 0) {&#xD;&#xA;              STC =0;&#xD;&#xA;            } else if (temp > 256) {&#xD;&#xA;                STC=31;&#xD;&#xA;            } else if ((temp > 16) &amp;&amp; (temp &lt;= 256) ) {&#xD;&#xA;                STC= Math.floor( (temp) / (16) );&#xD;&#xA;                STC=(STC+15);&#xD;&#xA;            } else {&#xD;&#xA;                STC= Math.floor(temp);&#xD;&#xA;            }&#xD;&#xA;            SCM.setIntValue(currentResource, STC);&#xD;&#xA;        }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwclass0stcsvalue" maxValue="1F" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <toolTipHelpDescription>This is the actual register value for additional cycles
 used for sampling in standard conversion.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Class 0 Actual Sample Time" evalFunction="&#xD;&#xA;          function ForwardMapping(){&#xD;&#xA;&#xD;&#xA;            var Res3 = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;            var clock = SCM.getDoubleValue(Res3);&#xD;&#xA;            var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;            var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;            var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;            if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;        var preclock = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;            {&#xD;&#xA;                var preclock = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;            var preclockval = SCM.getIntValue(preclock);&#xD;&#xA;            var resource = SCM.getResource(&quot;global/globiclass0/stcs&quot;);&#xD;&#xA;            var value = SCM.getDoubleValue(resource);&#xD;&#xA;&#xD;&#xA;          }&#xD;&#xA;          function BackwardMapping(){&#xD;&#xA;            var stRes = SCM.getResource(&quot;temp_dsamptime0&quot;);&#xD;&#xA;            var stvalue = SCM.getDoubleValue(stRes);&#xD;&#xA;&#xD;&#xA;            var actanalogclk = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;            var actanalogclkvalue = SCM.getDoubleValue(actanalogclk);&#xD;&#xA;&#xD;&#xA;            var tADCI = 1000/actanalogclkvalue;&#xD;&#xA;&#xD;&#xA;            var temp = (stvalue/tADCI) - 2;&#xD;&#xA;&#xD;&#xA;            var STC = 0;&#xD;&#xA;&#xD;&#xA;            if(temp &lt; 0) {&#xD;&#xA;              STC =0;&#xD;&#xA;            } else if (temp > 256) {&#xD;&#xA;                STC=256;&#xD;&#xA;            } else if ((temp > 16) &amp;&amp; (temp &lt;= 256) ) {&#xD;&#xA;&#xD;&#xA;                STC= Math.floor( (temp) / (16) );&#xD;&#xA;                STC=(STC*16);&#xD;&#xA;            } else {&#xD;&#xA;                STC= Math.floor(temp);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            var ts = (2+STC)*tADCI;&#xD;&#xA;&#xD;&#xA;            SCM.setDoubleValue(currentResource,ts);&#xD;&#xA;          }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwclass0actualsampletime" maxValue="FFFFFFFF" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="4050aaaaaaaaaaab"/>
    <toolTipHelpDescription>This is the actual number of additional clock cycles
 used for sampling in standard conversion</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Class 0 Actual Conversion Time" evalFunction="&#xD;&#xA;        function ForwardMapping()&#xD;&#xA;        {&#xD;&#xA;            var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;            var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;            var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;            if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;           var preclock = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;            {&#xD;&#xA;                var preclock = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;          var preclockval = SCM.getIntValue(preclock);&#xD;&#xA;&#xD;&#xA;          var anclock = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;          var anclockval = SCM.getDoubleValue(anclock);&#xD;&#xA;&#xD;&#xA;          var convmode = SCM.getResource(&quot;global/globiclass0/cms&quot;);&#xD;&#xA;          var convmodeval = SCM.getIntValue(convmode);&#xD;&#xA;&#xD;&#xA;          var msbreg  = SCM.getResource(&quot;global/globcfg/dcmsb&quot;);&#xD;&#xA;          var msbval = SCM.getIntValue(msbreg);&#xD;&#xA;&#xD;&#xA;          var Res4 = SCM.getResource(&quot;global/globiclass0/stcs&quot;);&#xD;&#xA;          var value4 = SCM.getIntValue(Res4);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;        function BackwardMapping()&#xD;&#xA;        {&#xD;&#xA;            var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;            var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;            var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;            var DeviceCheck = SCM.getSoftwareId().substring(0,1).compareTo(&quot;1&quot;);&#xD;&#xA;&#xD;&#xA;            if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;        var preclock = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;            {&#xD;&#xA;                var preclock = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;          var preclockval = SCM.getDoubleValue(preclock);&#xD;&#xA;          if(preclockval == -1){preclockval = 120;}&#xD;&#xA;&#xD;&#xA;          var anclock = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;          var anclockval = SCM.getDoubleValue(anclock);&#xD;&#xA;&#xD;&#xA;          var convmode = SCM.getResource(&quot;global/globiclass0/cms&quot;);&#xD;&#xA;          var convmodeval = SCM.getIntValue(convmode);&#xD;&#xA;&#xD;&#xA;          var msbreg  = SCM.getResource(&quot;global/globcfg/dcmsb&quot;);&#xD;&#xA;          var msbval = SCM.getIntValue(msbreg);&#xD;&#xA;&#xD;&#xA;          var Res4 = SCM.getResource(&quot;global/globiclass0/stcs&quot;);&#xD;&#xA;          var temp = SCM.getIntValue(Res4);&#xD;&#xA;&#xD;&#xA;          var STC = 0;&#xD;&#xA;&#xD;&#xA;           if(temp > 30) {&#xD;&#xA;              STC = 256;&#xD;&#xA;           } else if (temp &lt; 0) {&#xD;&#xA;                STC=0;&#xD;&#xA;           } else if ((temp > 16) &amp;&amp; (temp &lt; 31) ) {&#xD;&#xA;                STC=temp-16;&#xD;&#xA;                STC=16+STC*16;&#xD;&#xA;            } else {&#xD;&#xA;                STC= temp;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;          var temp_N = 0;&#xD;&#xA;          var temp_DM = 0;&#xD;&#xA;          var temp_PC = 0;&#xD;&#xA;&#xD;&#xA;         if(convmodeval == 0) {&#xD;&#xA;              temp_N =12;&#xD;&#xA;          } else if (convmodeval == 1) {&#xD;&#xA;             temp_N =10;&#xD;&#xA;          } else if (convmodeval == 2) {&#xD;&#xA;             temp_N =8;&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;          if(msbval == 1) {&#xD;&#xA;              temp_DM =1;&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;         var temp_tADC = (2000/preclockval);&#xD;&#xA;         var temp_tADCI = (1000/anclockval);&#xD;&#xA;         var Tsh = (1000/32);&#xD;&#xA;          if(convmodeval == 5) {&#xD;&#xA;              ActSampling = (2+STC+2)*temp_tADCI + temp_tADC;&#xD;&#xA;           } else {&#xD;&#xA;            if(DeviceCheck != 0)&#xD;&#xA;            {&#xD;&#xA;              ActSampling = (2+STC+temp_N+temp_DM+temp_PC)*temp_tADCI + temp_tADC;&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;              ActSampling = (2+STC)*temp_tADCI + (4*Tsh)+((temp_N + 8)*Tsh)+(5*(temp_tADC/2));&#xD;&#xA;            }&#xD;&#xA;           }&#xD;&#xA;       &#xD;&#xA;&#xD;&#xA;          SCM.setDoubleValue(currentResource, ActSampling);&#xD;&#xA;        }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwclass0actconversiontime" maxValue="FFFFFFFF" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="1"/>
    <localValue xsi:type="ResourceModel:StringValue" value="1"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="407e355555555556"/>
    <toolTipHelpDescription>This is the class 0 actual Sampling time for standard Conversion.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Class 1 Desired Sample Time" evalFunction="&#xD;&#xA;          function ForwardMapping(){&#xD;&#xA;            var value2 = SCM.getDoubleValue(currentResource);&#xD;&#xA;            var tempRes = SCM.getResource(&quot;temp_dsamptime1&quot;);&#xD;&#xA;            SCM.setDoubleValue(tempRes,value2);&#xD;&#xA;&#xD;&#xA;           var actanalogclk = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;           var actanalogclkvalue = SCM.getDoubleValue(actanalogclk);&#xD;&#xA;&#xD;&#xA;           var resource = SCM.getResource(&quot;global/globiclass1/stcs&quot;);&#xD;&#xA;&#xD;&#xA;           var tADCI = 1000/actanalogclkvalue;&#xD;&#xA;&#xD;&#xA;            var temp = (value2/tADCI) - 2;&#xD;&#xA;&#xD;&#xA;            var STC = 0;&#xD;&#xA;&#xD;&#xA;            if(temp &lt; 0) {&#xD;&#xA;              STC =0;&#xD;&#xA;            } else if (temp > 256) {&#xD;&#xA;                STC=31;&#xD;&#xA;            } else if ((temp > 16) &amp;&amp; (temp &lt;= 256) ) {&#xD;&#xA;                STC= Math.floor( (temp) / (16) );&#xD;&#xA;                STC=(STC+15);&#xD;&#xA;            } else {&#xD;&#xA;                STC= Math.floor(temp);&#xD;&#xA;            }&#xD;&#xA;            SCM.setIntValue(resource, STC);&#xD;&#xA;          }&#xD;&#xA;          function BackwardMapping(){&#xD;&#xA;            var tempRes = SCM.getResource(&quot;temp_dsamptime1&quot;);&#xD;&#xA;            var value = SCM.getDoubleValue(tempRes);&#xD;&#xA;            SCM.setDoubleValue(currentResource,value);&#xD;&#xA;          }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwclass1desiredsampletime" downWardmappedList="//@consumed.4 //@consumed.26" maxValue="2198" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="43"/>
    <localValue xsi:type="ResourceModel:StringValue" value="43"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="43"/>
    <toolTipHelpDescription>This is the desired sample time used for sampling in standard conversion.
Sample time= (2+STC)*Tadci, where STC - Additional Clock Cycle.
Total conversion time depends on sample time and result width.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Class 1 Sample Time Control for SC" evalFunction="&#xD;&#xA;        function ForwardMapping()&#xD;&#xA;        {&#xD;&#xA;           var Res3 = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;           var clock = SCM.getDoubleValue(Res3);&#xD;&#xA;&#xD;&#xA;            var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;            var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;            var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;            if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;        var preclock = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;            {&#xD;&#xA;                var preclock = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;           var preclockval = SCM.getIntValue(preclock);&#xD;&#xA;&#xD;&#xA;            var resource = SCM.getResource(&quot;global/globiclass1/stcs&quot;);&#xD;&#xA;             var value = SCM.getDoubleValue(resource);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;        function BackwardMapping()&#xD;&#xA;        {&#xD;&#xA;           var actanalogclk = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;          var actanalogclkvalue = SCM.getDoubleValue(actanalogclk);&#xD;&#xA;&#xD;&#xA;          var stReg = SCM.getResource(&quot;temp_dsamptime1&quot;);&#xD;&#xA;          var stvalue = SCM.getDoubleValue(stReg);&#xD;&#xA;&#xD;&#xA;          var tADCI = 1000/actanalogclkvalue;&#xD;&#xA;&#xD;&#xA;            var temp = (stvalue/tADCI) - 2;&#xD;&#xA;&#xD;&#xA;            var STC = 0;&#xD;&#xA;&#xD;&#xA;            if(temp &lt; 0) {&#xD;&#xA;              STC =0;&#xD;&#xA;            } else if (temp > 256) {&#xD;&#xA;                STC=31;&#xD;&#xA;            } else if ((temp > 16) &amp;&amp; (temp &lt;= 256) ) {&#xD;&#xA;                STC= Math.floor( (temp) / (16) );&#xD;&#xA;                STC=(STC+15);&#xD;&#xA;            } else {&#xD;&#xA;                STC= Math.floor(temp);&#xD;&#xA;            }&#xD;&#xA;            SCM.setIntValue(currentResource, STC);&#xD;&#xA;        }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwclass1stcsvalue" maxValue="1F" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <toolTipHelpDescription>This is the actual register value for additional cycles
 used for sampling in standard conversion.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Class 1 Actual Sample Time" evalFunction="&#xD;&#xA;          function ForwardMapping(){&#xD;&#xA;&#xD;&#xA;            var Res3 = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;            var clock = SCM.getDoubleValue(Res3);&#xD;&#xA;&#xD;&#xA;            var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;            var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;            var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;            if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;        var preclock = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;            {&#xD;&#xA;                var preclock = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;          var preclockval = SCM.getIntValue(preclock);&#xD;&#xA;            var resource = SCM.getResource(&quot;global/globiclass1/stcs&quot;);&#xD;&#xA;             var value = SCM.getDoubleValue(resource);&#xD;&#xA;&#xD;&#xA;          }&#xD;&#xA;          function BackwardMapping(){&#xD;&#xA;            var stRes = SCM.getResource(&quot;temp_dsamptime1&quot;);&#xD;&#xA;            var stvalue = SCM.getDoubleValue(stRes);&#xD;&#xA;&#xD;&#xA;            var actanalogclk = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;            var actanalogclkvalue = SCM.getDoubleValue(actanalogclk);&#xD;&#xA;&#xD;&#xA;            var tADCI = 1000/actanalogclkvalue;&#xD;&#xA;&#xD;&#xA;            var temp = (stvalue/tADCI) - 2;&#xD;&#xA;&#xD;&#xA;            var STC = 0;&#xD;&#xA;&#xD;&#xA;            if(temp &lt; 0) {&#xD;&#xA;              STC =0;&#xD;&#xA;            } else if (temp > 256) {&#xD;&#xA;                STC=256;&#xD;&#xA;            } else if ((temp > 16) &amp;&amp; (temp &lt;= 256) ) {&#xD;&#xA;&#xD;&#xA;                STC= Math.floor( (temp) / (16) );&#xD;&#xA;                STC=(STC*16);&#xD;&#xA;            } else {&#xD;&#xA;                STC= Math.floor(temp);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            var ts = (2+STC)*tADCI;&#xD;&#xA;&#xD;&#xA;            SCM.setDoubleValue(currentResource,ts);&#xD;&#xA;          }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwclass1actualsampletime" maxValue="FFFFFFFF" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="4050aaaaaaaaaaab"/>
    <toolTipHelpDescription>This is the actual number of additional clock cycles
 used for sampling in standard conversion</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Class 1 Actual Conversion Time" evalFunction="&#xD;&#xA;        function ForwardMapping()&#xD;&#xA;        {&#xD;&#xA;&#xD;&#xA;            var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;            var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;            var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;            if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;        var preclock = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;            {&#xD;&#xA;                var preclock = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;          var preclockval = SCM.getIntValue(preclock);&#xD;&#xA;&#xD;&#xA;          var anclock = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;          var anclockval = SCM.getDoubleValue(anclock);&#xD;&#xA;&#xD;&#xA;          var convmode = SCM.getResource(&quot;global/globiclass1/cms&quot;);&#xD;&#xA;          var convmodeval = SCM.getIntValue(convmode);&#xD;&#xA;&#xD;&#xA;          var msbreg  = SCM.getResource(&quot;global/globcfg/dcmsb&quot;);&#xD;&#xA;          var msbval = SCM.getIntValue(msbreg);&#xD;&#xA;&#xD;&#xA;          var Res4 = SCM.getResource(&quot;global/globiclass1/stcs&quot;);&#xD;&#xA;          var value4 = SCM.getIntValue(Res4);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;        function BackwardMapping()&#xD;&#xA;        {&#xD;&#xA;            var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;            var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;            var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;           var DeviceCheck = SCM.getSoftwareId().substring(0,1).compareTo(&quot;1&quot;);&#xD;&#xA;&#xD;&#xA;            if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;        var preclock = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;            {&#xD;&#xA;            var preclock = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;          var preclockval = SCM.getDoubleValue(preclock);&#xD;&#xA;          if(preclockval == -1){preclockval = 120;}&#xD;&#xA;&#xD;&#xA;          var anclock = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;          var anclockval = SCM.getDoubleValue(anclock);&#xD;&#xA;&#xD;&#xA;          var convmode = SCM.getResource(&quot;global/globiclass1/cms&quot;);&#xD;&#xA;          var convmodeval = SCM.getIntValue(convmode);&#xD;&#xA;&#xD;&#xA;          var msbreg  = SCM.getResource(&quot;global/globcfg/dcmsb&quot;);&#xD;&#xA;          var msbval = SCM.getIntValue(msbreg);&#xD;&#xA;&#xD;&#xA;          var Res4 = SCM.getResource(&quot;global/globiclass1/stcs&quot;);&#xD;&#xA;         var temp = SCM.getIntValue(Res4);&#xD;&#xA;&#xD;&#xA;          var STC = 0;&#xD;&#xA;&#xD;&#xA;           if(temp > 30) {&#xD;&#xA;              STC = 256;&#xD;&#xA;           } else if (temp &lt; 0) {&#xD;&#xA;                STC=0;&#xD;&#xA;           } else if ((temp > 16) &amp;&amp; (temp &lt; 31) ) {&#xD;&#xA;                STC=temp-16;&#xD;&#xA;                STC=16+STC*16;&#xD;&#xA;            } else {&#xD;&#xA;                STC= temp;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;          var temp_N = 0;&#xD;&#xA;          var temp_DM = 0;&#xD;&#xA;          var temp_PC = 0;&#xD;&#xA;&#xD;&#xA;         if(convmodeval == 0) {&#xD;&#xA;              temp_N =12;&#xD;&#xA;          } else if (convmodeval == 1) {&#xD;&#xA;             temp_N =10;&#xD;&#xA;          } else if (convmodeval == 2) {&#xD;&#xA;             temp_N =8;&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;          if(msbval == 1) {&#xD;&#xA;              temp_DM =1;&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;         var temp_tADC = (2000/preclockval);&#xD;&#xA;         var temp_tADCI = (1000/anclockval);&#xD;&#xA;         var Tsh = (1000/32);&#xD;&#xA;         if(convmodeval == 5) {&#xD;&#xA;              ActSampling = (2+STC+2)*temp_tADCI + temp_tADC;&#xD;&#xA;&#xD;&#xA;          } else {&#xD;&#xA;            if(DeviceCheck != 0)&#xD;&#xA;            {&#xD;&#xA;              ActSampling = (2+STC+temp_N+temp_DM+temp_PC)*temp_tADCI + temp_tADC;&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;              ActSampling = (2+STC)*temp_tADCI + (4*Tsh)+((temp_N + 8)*Tsh)+(5*(temp_tADC/2));&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;          SCM.setDoubleValue(currentResource, ActSampling);&#xD;&#xA;        }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwclass1actconversiontime" maxValue="FFFFFFFF" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="1"/>
    <localValue xsi:type="ResourceModel:StringValue" value="1"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="407e355555555556"/>
    <toolTipHelpDescription>This is the class 1 actual Sampling time for standard Conversion.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Class 0 Desired EMUX Sample Time" evalFunction="&#xD;&#xA;          function ForwardMapping(){&#xD;&#xA;            var value2 = SCM.getDoubleValue(currentResource);&#xD;&#xA;            var tempRes = SCM.getResource(&quot;temp_demuxsamptime0&quot;);&#xD;&#xA;            SCM.setDoubleValue(tempRes,value2);&#xD;&#xA;&#xD;&#xA;           var actanalogclk = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;           var actanalogclkvalue = SCM.getDoubleValue(actanalogclk);&#xD;&#xA;&#xD;&#xA;           var resource = SCM.getResource(&quot;global/globiclass0/stce&quot;);&#xD;&#xA;&#xD;&#xA;           var tADCI = 1000/actanalogclkvalue;&#xD;&#xA;&#xD;&#xA;            var temp = (value2/tADCI) - 2;&#xD;&#xA;&#xD;&#xA;            var STC = 0;&#xD;&#xA;&#xD;&#xA;            if(temp &lt; 0) {&#xD;&#xA;              STC =0;&#xD;&#xA;            } else if (temp > 256) {&#xD;&#xA;                STC=31;&#xD;&#xA;            } else if ((temp > 16) &amp;&amp; (temp &lt;= 256) ) {&#xD;&#xA;                STC= Math.floor( (temp) / (16) );&#xD;&#xA;                STC=(STC+15);&#xD;&#xA;            } else {&#xD;&#xA;                STC= Math.floor(temp);&#xD;&#xA;            }&#xD;&#xA;            SCM.setIntValue(resource, STC);&#xD;&#xA;          }&#xD;&#xA;          function BackwardMapping(){&#xD;&#xA;            var tempRes = SCM.getResource(&quot;temp_demuxsamptime0&quot;);&#xD;&#xA;            var value = SCM.getDoubleValue(tempRes);&#xD;&#xA;            SCM.setDoubleValue(currentResource,value);&#xD;&#xA;          }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwclass0desiredemuxsampletime" downWardmappedList="//@consumed.5 //@consumed.22" maxValue="2198" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="43"/>
    <localValue xsi:type="ResourceModel:StringValue" value="43"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="43"/>
    <toolTipHelpDescription>This is the desired sample time used for sampling in EMUX.
Sample time= (2+STC)*Tadci, where STC - Additional clock cycle.
Total conversion time depends on sample time and result width.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Class 0 Sample Time Control for EMUX" evalFunction="&#xD;&#xA;        function ForwardMapping()&#xD;&#xA;        {&#xD;&#xA;      var Res3 = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;          var clock = SCM.getDoubleValue(Res3);&#xD;&#xA;      var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;      var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;      var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;      if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;      {&#xD;&#xA;         var preclock = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;      }&#xD;&#xA;      else&#xD;&#xA;      {&#xD;&#xA;         var preclock = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;      }&#xD;&#xA;          var preclockval = SCM.getIntValue(preclock);&#xD;&#xA;&#xD;&#xA;            var resource = SCM.getResource(&quot;global/globiclass0/stce&quot;);&#xD;&#xA;             var value = SCM.getDoubleValue(resource);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;        function BackwardMapping()&#xD;&#xA;        {&#xD;&#xA;           var actanalogclk = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;          var actanalogclkvalue = SCM.getDoubleValue(actanalogclk);&#xD;&#xA;&#xD;&#xA;          var stReg = SCM.getResource(&quot;temp_demuxsamptime0&quot;);&#xD;&#xA;          var stvalue = SCM.getDoubleValue(stReg);&#xD;&#xA;&#xD;&#xA;          var tADCI = 1000/actanalogclkvalue;&#xD;&#xA;&#xD;&#xA;            var temp = (stvalue/tADCI) - 2;&#xD;&#xA;&#xD;&#xA;            var STC = 0;&#xD;&#xA;&#xD;&#xA;            if(temp &lt; 0) {&#xD;&#xA;              STC =0;&#xD;&#xA;            } else if (temp > 256) {&#xD;&#xA;                STC=31;&#xD;&#xA;            } else if ((temp > 16) &amp;&amp; (temp &lt;= 256) ) {&#xD;&#xA;                STC= Math.floor( (temp) / (16) );&#xD;&#xA;                STC=(STC+15);&#xD;&#xA;            } else {&#xD;&#xA;                STC= Math.floor(temp);&#xD;&#xA;            }&#xD;&#xA;            SCM.setIntValue(currentResource, STC);&#xD;&#xA;        }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwclass0stcevalue" maxValue="1F" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <toolTipHelpDescription>This is the actual register value for additional cycles
 used for sampling in EMUX.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Class 0 Actual EMUX Sample Time" evalFunction="&#xD;&#xA;          function ForwardMapping(){&#xD;&#xA;&#xD;&#xA;            var Res3 = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;            var clock = SCM.getDoubleValue(Res3);&#xD;&#xA;&#xD;&#xA;            var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;        var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;            var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;            if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;          var preclock = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;        }&#xD;&#xA;            else&#xD;&#xA;        {&#xD;&#xA;              var preclock = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;          var preclockval = SCM.getIntValue(preclock);&#xD;&#xA;            var resource = SCM.getResource(&quot;global/globiclass0/stce&quot;);&#xD;&#xA;             var value = SCM.getDoubleValue(resource);&#xD;&#xA;&#xD;&#xA;          }&#xD;&#xA;          function BackwardMapping(){&#xD;&#xA;            var stRes = SCM.getResource(&quot;temp_demuxsamptime0&quot;);&#xD;&#xA;            var stvalue = SCM.getDoubleValue(stRes);&#xD;&#xA;&#xD;&#xA;            var actanalogclk = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;            var actanalogclkvalue = SCM.getDoubleValue(actanalogclk);&#xD;&#xA;&#xD;&#xA;            var tADCI = 1000/actanalogclkvalue;&#xD;&#xA;&#xD;&#xA;            var temp = (stvalue/tADCI) - 2;&#xD;&#xA;&#xD;&#xA;            var STC = 0;&#xD;&#xA;&#xD;&#xA;            if(temp &lt; 0) {&#xD;&#xA;              STC =0;&#xD;&#xA;            } else if (temp > 256) {&#xD;&#xA;                STC=256;&#xD;&#xA;            } else if ((temp > 16) &amp;&amp; (temp &lt;= 256) ) {&#xD;&#xA;&#xD;&#xA;                STC= Math.floor( (temp) / (16) );&#xD;&#xA;                STC=(STC*16);&#xD;&#xA;            } else {&#xD;&#xA;                STC= Math.floor(temp);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            var ts = (2+STC)*tADCI;&#xD;&#xA;&#xD;&#xA;            SCM.setDoubleValue(currentResource,ts);&#xD;&#xA;          }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwclass0actualemuxsampletime" maxValue="FFFFFFFF" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="4050aaaaaaaaaaab"/>
    <toolTipHelpDescription>This is the actual number of additional clock cycles
 used for sampling in standard conversion</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Class 0 EMUX Conversion Time" evalFunction="&#xD;&#xA;        function ForwardMapping()&#xD;&#xA;        {&#xD;&#xA;&#xD;&#xA;          var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;          var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;          var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;          if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;          {&#xD;&#xA;            var preclock = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;          }&#xD;&#xA;          else&#xD;&#xA;          {&#xD;&#xA;            var preclock = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;          }&#xD;&#xA;          var preclockval = SCM.getIntValue(preclock);&#xD;&#xA;&#xD;&#xA;          var anclock = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;          var anclockval = SCM.getDoubleValue(anclock);&#xD;&#xA;&#xD;&#xA;          var convmode = SCM.getResource(&quot;global/globiclass0/cme&quot;);&#xD;&#xA;          var convmodeval = SCM.getIntValue(convmode);&#xD;&#xA;&#xD;&#xA;          var msbreg  = SCM.getResource(&quot;global/globcfg/dcmsb&quot;);&#xD;&#xA;          var msbval = SCM.getIntValue(msbreg);&#xD;&#xA;&#xD;&#xA;          var Res4 = SCM.getResource(&quot;temp_demuxsamptime0&quot;);&#xD;&#xA;          var value4 = SCM.getIntValue(Res4);&#xD;&#xA;&#xD;&#xA;          var Res5 = SCM.getResource(&quot;global/globiclass0/stce&quot;);&#xD;&#xA;          var value4 = SCM.getIntValue(Res5);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;        function BackwardMapping()&#xD;&#xA;        {&#xD;&#xA;&#xD;&#xA;          var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;          var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;          var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;      var DeviceCheck = SCM.getSoftwareId().substring(0,1).compareTo(&quot;1&quot;);&#xD;&#xA;          if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;          {&#xD;&#xA;            var preclock = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;          }&#xD;&#xA;          else&#xD;&#xA;          {&#xD;&#xA;            var preclock = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;          }&#xD;&#xA;          var preclockval = SCM.getDoubleValue(preclock);&#xD;&#xA;          if(preclockval == -1){preclockval = 120;}&#xD;&#xA;&#xD;&#xA;          var anclock = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;          var anclockval = SCM.getDoubleValue(anclock);&#xD;&#xA;&#xD;&#xA;          var convmode = SCM.getResource(&quot;global/globiclass0/cme&quot;);&#xD;&#xA;          var convmodeval = SCM.getIntValue(convmode);&#xD;&#xA;&#xD;&#xA;          var msbreg  = SCM.getResource(&quot;global/globcfg/dcmsb&quot;);&#xD;&#xA;          var msbval = SCM.getIntValue(msbreg);&#xD;&#xA;&#xD;&#xA;          var Res4 = SCM.getResource(&quot;global/globiclass0/stce&quot;);&#xD;&#xA;         var temp = SCM.getIntValue(Res4);&#xD;&#xA;&#xD;&#xA;          var STC = 0;&#xD;&#xA;&#xD;&#xA;           if(temp > 30) {&#xD;&#xA;              STC = 256;&#xD;&#xA;           } else if (temp &lt; 0) {&#xD;&#xA;                STC=0;&#xD;&#xA;           } else if ((temp > 16) &amp;&amp; (temp &lt; 31) ) {&#xD;&#xA;                STC=temp-16;&#xD;&#xA;                STC=16+STC*16;&#xD;&#xA;            } else {&#xD;&#xA;                STC= temp;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;          var temp_N = 0;&#xD;&#xA;          var temp_DM = 0;&#xD;&#xA;          var temp_PC = 0;&#xD;&#xA;&#xD;&#xA;         if(convmodeval == 0) {&#xD;&#xA;              temp_N =12;&#xD;&#xA;          } else if (convmodeval == 1) {&#xD;&#xA;             temp_N =10;&#xD;&#xA;          } else if (convmodeval == 2) {&#xD;&#xA;             temp_N =8;&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;          if(msbval == 1) {&#xD;&#xA;              temp_DM =1;&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;         var temp_tADC = (2000/preclockval);&#xD;&#xA;         var temp_tADCI = (1000/anclockval);&#xD;&#xA;         var Tsh = (1000/32)&#xD;&#xA;         if(convmodeval == 5) {&#xD;&#xA;              ActSampling = (2+STC+2)*temp_tADCI + temp_tADC;&#xD;&#xA;&#xD;&#xA;          } else {&#xD;&#xA;            if(DeviceCheck != 0)&#xD;&#xA;            {&#xD;&#xA;              ActSampling = (2+STC+temp_N+temp_DM+temp_PC)*temp_tADCI + temp_tADC;&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;              ActSampling = (2+STC)*temp_tADCI + (4*Tsh)+((temp_N + 8)*Tsh)+(5*(temp_tADC/2));&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;          SCM.setDoubleValue(currentResource, ActSampling);&#xD;&#xA;        }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwclass0extmuxconvtime" maxValue="FFFFFFFF" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="407e355555555556"/>
    <toolTipHelpDescription>This is the class 0 actual Sampling time for external multiplexer Conversion.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Class 1 Desired EMUX Sample Time" evalFunction="&#xD;&#xA;          function ForwardMapping(){&#xD;&#xA;            var value2 = SCM.getDoubleValue(currentResource);&#xD;&#xA;            var tempRes = SCM.getResource(&quot;temp_demuxsamptime1&quot;);&#xD;&#xA;            SCM.setDoubleValue(tempRes,value2);&#xD;&#xA;&#xD;&#xA;           var actanalogclk = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;           var actanalogclkvalue = SCM.getDoubleValue(actanalogclk);&#xD;&#xA;&#xD;&#xA;           var resource = SCM.getResource(&quot;global/globiclass1/stce&quot;);&#xD;&#xA;&#xD;&#xA;           var tADCI = 1000/actanalogclkvalue;&#xD;&#xA;&#xD;&#xA;            var temp = (value2/tADCI) - 2;&#xD;&#xA;&#xD;&#xA;            var STC = 0;&#xD;&#xA;&#xD;&#xA;            if(temp &lt; 0) {&#xD;&#xA;              STC =0;&#xD;&#xA;            } else if (temp > 256) {&#xD;&#xA;                STC=31;&#xD;&#xA;            } else if ((temp > 16) &amp;&amp; (temp &lt;= 256) ) {&#xD;&#xA;                STC= Math.floor( (temp) / (16) );&#xD;&#xA;                STC=(STC+15);&#xD;&#xA;            } else {&#xD;&#xA;                STC= Math.floor(temp);&#xD;&#xA;            }&#xD;&#xA;            SCM.setIntValue(resource, STC);&#xD;&#xA;          }&#xD;&#xA;          function BackwardMapping(){&#xD;&#xA;            var tempRes = SCM.getResource(&quot;temp_demuxsamptime1&quot;);&#xD;&#xA;            var value = SCM.getDoubleValue(tempRes);&#xD;&#xA;            SCM.setDoubleValue(currentResource,value);&#xD;&#xA;          }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwclass1desiredemuxsampletime" downWardmappedList="//@consumed.6 //@consumed.27" maxValue="2198" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="43"/>
    <localValue xsi:type="ResourceModel:StringValue" value="43"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="43"/>
    <toolTipHelpDescription>This is the desired sample time used for sampling in EMUX.
Sample Time= (2+STC)*Tadci, where STC - Additional clock cycle.
Total conversion time depends on sample time and result width.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Class 1 Sample Time Control for EMUX" evalFunction="&#xD;&#xA;        function ForwardMapping()&#xD;&#xA;        {&#xD;&#xA;           var Res3 = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;           var clock = SCM.getDoubleValue(Res3);&#xD;&#xA;&#xD;&#xA;           var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;           var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;           var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;           if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;           {&#xD;&#xA;             var preclock = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;           }&#xD;&#xA;           else&#xD;&#xA;           {&#xD;&#xA;             var preclock = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;           }&#xD;&#xA;          var preclockval = SCM.getIntValue(preclock);&#xD;&#xA;&#xD;&#xA;            var resource = SCM.getResource(&quot;global/globiclass1/stce&quot;);&#xD;&#xA;             var value = SCM.getDoubleValue(resource);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;        function BackwardMapping()&#xD;&#xA;        {&#xD;&#xA;           var actanalogclk = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;          var actanalogclkvalue = SCM.getDoubleValue(actanalogclk);&#xD;&#xA;&#xD;&#xA;          var stReg = SCM.getResource(&quot;temp_demuxsamptime1&quot;);&#xD;&#xA;          var stvalue = SCM.getDoubleValue(stReg);&#xD;&#xA;&#xD;&#xA;          var tADCI = 1000/actanalogclkvalue;&#xD;&#xA;&#xD;&#xA;            var temp = (stvalue/tADCI) - 2;&#xD;&#xA;&#xD;&#xA;            var STC = 0;&#xD;&#xA;&#xD;&#xA;            if(temp &lt; 0) {&#xD;&#xA;              STC =0;&#xD;&#xA;            } else if (temp > 256) {&#xD;&#xA;                STC=31;&#xD;&#xA;            } else if ((temp > 16) &amp;&amp; (temp &lt;= 256) ) {&#xD;&#xA;                STC= Math.floor( (temp) / (16) );&#xD;&#xA;                STC=(STC+15);&#xD;&#xA;            } else {&#xD;&#xA;                STC= Math.floor(temp);&#xD;&#xA;            }&#xD;&#xA;            SCM.setIntValue(currentResource, STC);&#xD;&#xA;        }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwclass1stcevalue" maxValue="1F" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <toolTipHelpDescription>This is the actual register value for additional cycles
 used for sampling in EMUX.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Class 1 Actual EMUX Sample Time" evalFunction="&#xD;&#xA;          function ForwardMapping(){&#xD;&#xA;&#xD;&#xA;            var Res3 = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;            var clock = SCM.getDoubleValue(Res3);&#xD;&#xA;&#xD;&#xA;            var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;            var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;            var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;            if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;            {&#xD;&#xA;                var preclock = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                var preclock = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;            }&#xD;&#xA;            var preclockval = SCM.getIntValue(preclock);&#xD;&#xA;            var resource = SCM.getResource(&quot;global/globiclass1/stce&quot;);&#xD;&#xA;             var value = SCM.getDoubleValue(resource);&#xD;&#xA;&#xD;&#xA;          }&#xD;&#xA;          function BackwardMapping(){&#xD;&#xA;            var stRes = SCM.getResource(&quot;temp_demuxsamptime1&quot;);&#xD;&#xA;            var stvalue = SCM.getDoubleValue(stRes);&#xD;&#xA;&#xD;&#xA;            var actanalogclk = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;            var actanalogclkvalue = SCM.getDoubleValue(actanalogclk);&#xD;&#xA;&#xD;&#xA;            var tADCI = 1000/actanalogclkvalue;&#xD;&#xA;&#xD;&#xA;            var temp = (stvalue/tADCI) - 2;&#xD;&#xA;&#xD;&#xA;            var STC = 0;&#xD;&#xA;&#xD;&#xA;            if(temp &lt; 0) {&#xD;&#xA;              STC =0;&#xD;&#xA;            } else if (temp > 256) {&#xD;&#xA;                STC=256;&#xD;&#xA;            } else if ((temp > 16) &amp;&amp; (temp &lt;= 256) ) {&#xD;&#xA;&#xD;&#xA;                STC= Math.floor( (temp) / (16) );&#xD;&#xA;                STC=(STC*16);&#xD;&#xA;            } else {&#xD;&#xA;                STC= Math.floor(temp);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            var ts = (2+STC)*tADCI;&#xD;&#xA;&#xD;&#xA;            SCM.setDoubleValue(currentResource,ts);&#xD;&#xA;          }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwclass1actualemuxsampletime" maxValue="FFFFFFFF" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="4050aaaaaaaaaaab"/>
    <toolTipHelpDescription>This is the actual number of additional clock cycles
 used for sampling in standard conversion</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Class 1 EMUX Conversion Time" evalFunction="&#xD;&#xA;        function ForwardMapping()&#xD;&#xA;        {&#xD;&#xA;&#xD;&#xA;          var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;          var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;          var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;&#xD;&#xA;          if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;          {&#xD;&#xA;            var preclock = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;          }&#xD;&#xA;          else&#xD;&#xA;          {&#xD;&#xA;            var preclock = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;          }&#xD;&#xA;          var preclockval = SCM.getIntValue(preclock);&#xD;&#xA;&#xD;&#xA;          var anclock = SCM.getResource(&quot;temp_analogclock&quot;);&#xD;&#xA;          var anclockval = SCM.getDoubleValue(anclock);&#xD;&#xA;&#xD;&#xA;          var convmode = SCM.getResource(&quot;global/globiclass1/cme&quot;);&#xD;&#xA;          var convmodeval = SCM.getIntValue(convmode);&#xD;&#xA;&#xD;&#xA;          var msbreg  = SCM.getResource(&quot;global/globcfg/dcmsb&quot;);&#xD;&#xA;          var msbval = SCM.getIntValue(msbreg);&#xD;&#xA;&#xD;&#xA;          var Res4 = SCM.getResource(&quot;temp_demuxsamptime1&quot;);&#xD;&#xA;          var value4 = SCM.getIntValue(Res4);&#xD;&#xA;&#xD;&#xA;          var Res5 = SCM.getResource(&quot;global/globiclass1/stce&quot;);&#xD;&#xA;          var value4 = SCM.getIntValue(Res5);&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;        function BackwardMapping()&#xD;&#xA;        {&#xD;&#xA;          var value1 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;45&quot;);&#xD;&#xA;          var value2 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;44&quot;);&#xD;&#xA;          var value3 = SCM.getSoftwareId().substring(0,2).compareTo(&quot;42&quot;);&#xD;&#xA;      var DeviceCheck = SCM.getSoftwareId().substring(0,1).compareTo(&quot;1&quot;);&#xD;&#xA;          if (value1  == 0 || value2  == 0 || value3  == 0)&#xD;&#xA;          {&#xD;&#xA;            var preclock = SCM.getResource(&quot;clk001app/clk001_iroactualfreqpb&quot;);&#xD;&#xA;          }&#xD;&#xA;          else&#xD;&#xA;          {&#xD;&#xA;            var preclock = SCM.getResource(&quot;clk002app/clk002_irMCLK&quot;);&#xD;&#xA;          }&#xD;&#xA;          var preclockval = SCM.getDoubleValue(preclock);&#xD;&#xA;          if(preclockval == -1){preclockval = 120;}&#xD;&#xA;&#xD;&#xA;          var anclock = SCM.getResource(&quot;adcglob001_irwselanalogclock&quot;);&#xD;&#xA;          var anclockval = SCM.getDoubleValue(anclock);&#xD;&#xA;&#xD;&#xA;          var convmode = SCM.getResource(&quot;global/globiclass1/cme&quot;);&#xD;&#xA;          var convmodeval = SCM.getIntValue(convmode);&#xD;&#xA;&#xD;&#xA;          var msbreg  = SCM.getResource(&quot;global/globcfg/dcmsb&quot;);&#xD;&#xA;          var msbval = SCM.getIntValue(msbreg);&#xD;&#xA;&#xD;&#xA;          var Res4 = SCM.getResource(&quot;global/globiclass1/stce&quot;);&#xD;&#xA;          var temp = SCM.getIntValue(Res4);&#xD;&#xA;&#xD;&#xA;          var STC = 0;&#xD;&#xA;&#xD;&#xA;           if(temp > 30) {&#xD;&#xA;              STC = 256;&#xD;&#xA;           } else if (temp &lt; 0) {&#xD;&#xA;                STC=0;&#xD;&#xA;           } else if ((temp > 16) &amp;&amp; (temp &lt; 31) ) {&#xD;&#xA;                STC=temp-16;&#xD;&#xA;                STC=16+STC*16;&#xD;&#xA;            } else {&#xD;&#xA;                STC= temp;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;          var temp_N = 0;&#xD;&#xA;          var temp_DM = 0;&#xD;&#xA;          var temp_PC = 0;&#xD;&#xA;&#xD;&#xA;         if(convmodeval == 0) {&#xD;&#xA;              temp_N =12;&#xD;&#xA;          } else if (convmodeval == 1) {&#xD;&#xA;             temp_N =10;&#xD;&#xA;          } else if (convmodeval == 2) {&#xD;&#xA;             temp_N =8;&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;          if(msbval == 1) {&#xD;&#xA;              temp_DM =1;&#xD;&#xA;          }&#xD;&#xA;&#xD;&#xA;         var temp_tADC = (2000/preclockval);&#xD;&#xA;         var temp_tADCI = (1000/anclockval);&#xD;&#xA;         var Tsh = (1000/32);&#xD;&#xA;         if(convmodeval == 5) {&#xD;&#xA;              ActSampling = (2+STC+2)*temp_tADCI + temp_tADC;&#xD;&#xA;&#xD;&#xA;          } else {&#xD;&#xA;            if(DeviceCheck != 0)&#xD;&#xA;            {&#xD;&#xA;              ActSampling = (2+STC+temp_N+temp_DM+temp_PC)*temp_tADCI + temp_tADC;&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;              ActSampling = (2+STC)*temp_tADCI + (4*Tsh)+((temp_N + 8)*Tsh)+(5*(temp_tADC/2));&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;          SCM.setDoubleValue(currentResource, ActSampling);&#xD;&#xA;        }&#xD;&#xA;" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwclass1extmuxconvtime" maxValue="FFFFFFFF" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="407e355555555556"/>
    <toolTipHelpDescription>This is the class 1 actual Sampling time for external multiplexer Conversion.</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Global specific boundary0" evalFunction="&#xD;&#xA;            function ForwardMapping()&#xD;&#xA;            {&#xD;&#xA;              var boundary0Res = SCM.getResource(&quot;global_limits/globbound/boundary0&quot;);&#xD;&#xA;              var CurrentValue = SCM.getIntValue(currentResource);&#xD;&#xA;              SCM.setIntValue(boundary0Res,CurrentValue);&#xD;&#xA;            }&#xD;&#xA;            function BackwardMapping()&#xD;&#xA;            {&#xD;&#xA;              var boundary0Res = SCM.getResource(&quot;global_limits/globbound/boundary0&quot;);&#xD;&#xA;              var boundary0Value = SCM.getIntValue(boundary0Res);&#xD;&#xA;              SCM.setIntValue(currentResource,boundary0Value);&#xD;&#xA;            }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwglobboundary0" downWardmappedList="//@consumed.31" maxValue="FFF" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <toolTipHelpDescription>Standard Mode: This is boundary0 value
which is compared against the left-aligned conversion result.
For 10/8-bit results,the lower 2/4 bits must be zero</toolTipHelpDescription>
  </provided>
  <provided xsi:type="ResourceModel:IntegerParameter" name="Global specific boundary1" evalFunction="&#xD;&#xA;            function ForwardMapping()&#xD;&#xA;            {&#xD;&#xA;              var boundary1Res = SCM.getResource(&quot;global_limits/globbound/boundary1&quot;);&#xD;&#xA;              var CurrentValue = SCM.getIntValue(currentResource);&#xD;&#xA;              SCM.setIntValue(boundary1Res,CurrentValue);&#xD;&#xA;            }&#xD;&#xA;            function BackwardMapping()&#xD;&#xA;            {&#xD;&#xA;              var boundary1Res = SCM.getResource(&quot;global_limits/globbound/boundary1&quot;);&#xD;&#xA;              var boundary1Value = SCM.getIntValue(boundary1Res);&#xD;&#xA;              SCM.setIntValue(currentResource,boundary1Value);&#xD;&#xA;            }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/adcglob001_irwglobboundary1" downWardmappedList="//@consumed.32" maxValue="FFF" minValue="0">
    <defaultValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <localValue xsi:type="ResourceModel:StringValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <toolTipHelpDescription>Standard Mode: This is boundary1 value
which is compared against the left-aligned conversion result.
For 10/8-bit results,the lower 2/4 bits must be zero</toolTipHelpDescription>
  </provided>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/temp_shclock" upWardMappingList="//@provided.6 //@provided.7 //@provided.8" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="1e"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="1e"/>
    <requiredResource uriString="" uriType="LOCALTYPE"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/temp_shsdivs" upWardMappingList="//@provided.6" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <requiredResource uriString="" uriType="LOCALTYPE"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/temp_clkvalue0" isSystemDefined="true">
    <requiredResource uriString="" uriType="LOCALTYPE"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/temp_dsamptime0" upWardMappingList="//@provided.19 //@provided.20 //@provided.21" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="43"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="43"/>
    <requiredResource uriString="" uriType="LOCALTYPE"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/temp_dsamptime1" upWardMappingList="//@provided.23 //@provided.24 //@provided.25" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="43"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="43"/>
    <requiredResource uriString="" uriType="LOCALTYPE"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/temp_demuxsamptime0" upWardMappingList="//@provided.27 //@provided.30 //@provided.28 //@provided.29" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="43"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="43"/>
    <requiredResource uriString="" uriType="LOCALTYPE"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/temp_demuxsamptime1" upWardMappingList="//@provided.31 //@provided.34 //@provided.32 //@provided.33" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="43"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="43"/>
    <requiredResource uriString="" uriType="LOCALTYPE"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/temp_analogclock" upWardMappingList="//@provided.9 //@provided.10 //@provided.11 //@provided.20 //@provided.21 //@provided.22 //@provided.24 //@provided.25 //@provided.26 //@provided.28 //@provided.29 //@provided.30 //@provided.32 //@provided.33 //@provided.34" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="1e"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="1e"/>
    <requiredResource uriString="" uriType="LOCALTYPE"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" evalFunction="function resourceCondition() {&#xD;&#xA;                    var value1 = Solver.getSoftwareId().substring(0,2).compareTo(&quot;11&quot;);&#xD;&#xA;                    if(value1 == 0 ) {&#xD;&#xA;                      return false;&#xD;&#xA;                    }&#xD;&#xA;                    return true;&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/limit">
    <downWardmappedList xsi:type="ResourceModel:ResourceGroup" href="../../VADC/VADC_0.dd#//@provided.392"/>
    <requiredResource uriString="peripheral/vadc/0/global_limits" uriType="LOCALTYPE"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global">
    <downWardmappedList xsi:type="ResourceModel:ResourceGroup" href="../../VADC/VADC_0.dd#//@provided.394"/>
    <requiredResource uriString="peripheral/vadc/0/global" uriType="LOCALTYPE"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" evalFunction="function resourceCondition() {&#xD;&#xA;                    var value1 = Solver.getSoftwareId().substring(0,1).compareTo(&quot;1&quot;);&#xD;&#xA;                    if(value1  == 0 ) {&#xD;&#xA;                      return false;&#xD;&#xA;                    }&#xD;&#xA;                    return true;&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/resetapp">
    <downWardmappedList xsi:type="ResourceModel:App" href="../../RESET001/1.0.14/reset001_0.app#/"/>
    <requiredResource uriString="app/reset001/*" uriType="LOCALTYPE"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" evalFunction="function resourceCondition() {&#xD;&#xA;                    var value1 = Solver.getSoftwareId().substring(0,1).compareTo(&quot;1&quot;);&#xD;&#xA;                    if(value1  == 0 ) {&#xD;&#xA;                      return true;&#xD;&#xA;                    }&#xD;&#xA;                    return false;&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/clk002app">
    <requiredResource uriString="app/clk002/*" uriType="LOCALTYPE"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" evalFunction="function resourceCondition() {&#xD;&#xA;                    var value1 = Solver.getSoftwareId().substring(0,1).compareTo(&quot;1&quot;);&#xD;&#xA;                    if(value1  == 0 ) {&#xD;&#xA;                      return false;&#xD;&#xA;                    }&#xD;&#xA;                    return true;&#xD;&#xA;                }" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/clk001app">
    <downWardmappedList xsi:type="ResourceModel:App" href="../../CLK001/1.0.44/clk001_0.app#/"/>
    <requiredResource uriString="app/clk001/*" uriType="LOCALTYPE"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/limit/global_signal" isSystemDefined="true">
    <downWardmappedList xsi:type="ResourceModel:SignalDeclaration" href="../../VADC/VADC_0.dd#//@provided.393"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global/global_signal" isSystemDefined="true">
    <downWardmappedList xsi:type="ResourceModel:SignalDeclaration" href="../../VADC/VADC_0.dd#//@provided.395"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global/globcfg" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="0000000F"/>
    <downWardmappedList xsi:type="ResourceModel:RegisterParameter" href="../../VADC/VADC_0.dd#//@provided.396"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0000000F"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global/globcfg/diva" upWardMappingList="//@provided.9" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="1"/>
    <downWardmappedList xsi:type="ResourceModel:BitField" href="../../VADC/VADC_0.dd#//@provided.396/@bitFields.0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="1"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global/globcfg/divd" upWardMappingList="//@provided.12 //@provided.12/@item.0 //@provided.13 //@provided.14" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <downWardmappedList xsi:type="ResourceModel:BitField" href="../../VADC/VADC_0.dd#//@provided.396/@bitFields.2"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global/globcfg/sucal" upWardMappingList="//@provided.3 //@provided.3/@item.0" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="1"/>
    <downWardmappedList xsi:type="ResourceModel:BitField" href="../../VADC/VADC_0.dd#//@provided.396/@bitFields.8"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="1"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global/globcfg/dcmsb" upWardMappingList="//@provided.2 //@provided.2/@item.0 //@provided.22 //@provided.26 //@provided.30 //@provided.34" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <downWardmappedList xsi:type="ResourceModel:BitField" href="../../VADC/VADC_0.dd#//@provided.396/@bitFields.1"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global/globiclass0" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="00000000"/>
    <downWardmappedList xsi:type="ResourceModel:RegisterParameter" href="../../VADC/VADC_0.dd#//@provided.397"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="00000000"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global/globiclass0/stcs" upWardMappingList="//@provided.19 //@provided.20 //@provided.21 //@provided.22" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <downWardmappedList xsi:type="ResourceModel:BitField" href="../../VADC/VADC_0.dd#//@provided.397/@bitFields.0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global/globiclass0/stce" upWardMappingList="//@provided.27 //@provided.28 //@provided.29 //@provided.30" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <downWardmappedList xsi:type="ResourceModel:BitField" href="../../VADC/VADC_0.dd#//@provided.397/@bitFields.2"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global/globiclass0/cms" upWardMappingList="//@provided.15 //@provided.15/@item.0 //@provided.22" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <downWardmappedList xsi:type="ResourceModel:BitField" href="../../VADC/VADC_0.dd#//@provided.397/@bitFields.1"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global/globiclass0/cme" upWardMappingList="//@provided.17 //@provided.17/@item.0 //@provided.30" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <downWardmappedList xsi:type="ResourceModel:BitField" href="../../VADC/VADC_0.dd#//@provided.397/@bitFields.3"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global/globiclass1" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="00000000"/>
    <downWardmappedList xsi:type="ResourceModel:RegisterParameter" href="../../VADC/VADC_0.dd#//@provided.398"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="00000000"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global/globiclass1/stcs" upWardMappingList="//@provided.23 //@provided.24 //@provided.25 //@provided.26" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <downWardmappedList xsi:type="ResourceModel:BitField" href="../../VADC/VADC_0.dd#//@provided.398/@bitFields.0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global/globiclass1/stce" upWardMappingList="//@provided.31 //@provided.32 //@provided.33 //@provided.34" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <downWardmappedList xsi:type="ResourceModel:BitField" href="../../VADC/VADC_0.dd#//@provided.398/@bitFields.2"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global/globiclass1/cms" upWardMappingList="//@provided.16 //@provided.16/@item.0 //@provided.26" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <downWardmappedList xsi:type="ResourceModel:BitField" href="../../VADC/VADC_0.dd#//@provided.398/@bitFields.1"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global/globiclass1/cme" upWardMappingList="//@provided.18 //@provided.18/@item.0 //@provided.34" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <downWardmappedList xsi:type="ResourceModel:BitField" href="../../VADC/VADC_0.dd#//@provided.398/@bitFields.3"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global_limits/globbound" isSystemDefined="true"/>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global_limits/globbound/boundary0" upWardMappingList="//@provided.35" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/global_limits/globbound/boundary1" upWardMappingList="//@provided.36" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="0"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="0"/>
  </consumed>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/clk002app/clk002_irmclk" upWardMappingList="//@provided.6 //@provided.7 //@provided.8" isSystemDefined="true"/>
  <consumed xsi:type="ResourceModel:ProxyResource" URI="http://www.infineon.com/1.0.28/app/adcglob001/0/clk001app/clk001_iroactualfreqpb" upWardMappingList="//@provided.4 //@provided.5 //@provided.9 //@provided.10 //@provided.11 //@provided.13 //@provided.14 //@provided.20 //@provided.21 //@provided.22 //@provided.24 //@provided.25 //@provided.26 //@provided.28 //@provided.29 //@provided.30 //@provided.32 //@provided.33 //@provided.34" isSystemDefined="true">
    <localValue xsi:type="ResourceModel:IntegerValue" value="78"/>
    <downWardmappedList xsi:type="ResourceModel:IntegerParameter" href="../../CLK001/1.0.44/clk001_0.app#//@provided.42"/>
    <globalValue xsi:type="ResourceModel:IntegerValue" value="78"/>
  </consumed>
  <propertyConstants name="uridevice" value="device">
    <propertyConstants name="uriPeri_VADC" value="peripheral/vadc/">
      <propertyConstants name="uriadcglobalapp" value="app/adcglob001/"/>
    </propertyConstants>
  </propertyConstants>
  <categoryDescription description="Peripheral Specific Apps" name="Peripheral Specific Apps">
    <subCategory description="Analog" name="Analog">
      <subCategory description="Analog to Digital Converter" name="Versatile Analog to Digital Converter(VADC)"/>
    </subCategory>
  </categoryDescription>
  <categoryDescription description="Basic Applications" name="Basic Applications">
    <subCategory description="Acquisition of Analog Signals" name="Acquisition of Analog Signals"/>
  </categoryDescription>
  <manifestInfo version="1.0.28">
    <keywords>VADC</keywords>
    <keywords>GLOBAL CONFIG</keywords>
    <keywords>ADC</keywords>
    <properties xsi:type="ResourceModel:AppProperties_1_0" initProvider="true" singleton="true"/>
  </manifestInfo>
  <datagenerate fileName="ADCGlob001.h" fileType="HFILE" templateFileName="ADCGlob001h.jet"/>
  <datagenerate fileName="ADCGlob001.c" templateFileName="ADCGlob001c.jet"/>
  <datagenerate fileName="ADCGlob001_Conf.h" fileType="HFILE" templateFileName="ADCGlob001_Confh.jet"/>
  <datagenerate fileName="ADCGlob001_Conf.c" templateFileName="ADCGlob001_Confc.jet"/>
  <connections sourceSignal="adcglob001_globalsignal_vs" targetSignal="adcglob001_globallimitsignal_vs"/>
  <softwareIdList>45.0.1</softwareIdList>
  <softwareIdList>45.0.2</softwareIdList>
  <softwareIdList>45.0.3</softwareIdList>
  <softwareIdList>45.2.3</softwareIdList>
  <softwareIdList>45.4.2</softwareIdList>
  <softwareIdList>45.4.3</softwareIdList>
  <softwareIdList>45.0200.1</softwareIdList>
  <softwareIdList>45.0200.2</softwareIdList>
  <softwareIdList>45.0200.3</softwareIdList>
  <softwareIdList>45.0202.3</softwareIdList>
  <softwareIdList>45.0204.3</softwareIdList>
  <softwareIdList>45.0204.2</softwareIdList>
  <softwareIdList>44.0.3</softwareIdList>
  <softwareIdList>44.00.5</softwareIdList>
  <softwareIdList>44.02.3</softwareIdList>
  <softwareIdList>44.02.5</softwareIdList>
  <softwareIdList>42.00.5</softwareIdList>
  <softwareIdList>42.0.6</softwareIdList>
  <softwareIdList>42.04.5</softwareIdList>
  <softwareIdList>42.04.6</softwareIdList>
  <softwareIdList>11.0100.7</softwareIdList>
  <softwareIdList>11.0100.9</softwareIdList>
  <softwareIdList>12.0100.7</softwareIdList>
  <softwareIdList>13.0102.7</softwareIdList>
  <softwareIdList>12.0101.7</softwareIdList>
  <softwareIdList>12.0102.9</softwareIdList>
  <softwareIdList>12.0102.8</softwareIdList>
  <softwareIdList>13.0101.9</softwareIdList>
  <softwareIdList>13.0101.7</softwareIdList>
  <softwareIdList>42.0200.5</softwareIdList>
  <softwareIdList>42.0204.5</softwareIdList>
  <softwareIdList>42.0204.6</softwareIdList>
  <softwareIdList>42.0200.6</softwareIdList>
  <softwareIdList>42.0208.6</softwareIdList>
  <softwareIdList>44.0200.5</softwareIdList>
  <softwareIdList>44.0202.3</softwareIdList>
  <softwareIdList>44.0202.5</softwareIdList>
  <softwareIdList>44.0200.3</softwareIdList>
  <softwareIdList>45.0300.1</softwareIdList>
  <softwareIdList>45.0300.3</softwareIdList>
  <softwareIdList>45.0302.3</softwareIdList>
  <softwareIdList>45.0304.2</softwareIdList>
  <softwareIdList>45.0300.2</softwareIdList>
  <softwareIdList>45.0304.3</softwareIdList>
  <softwareIdList>11.0100.10</softwareIdList>
  <softwareIdList>11.0100.11</softwareIdList>
  <softwareIdList>12.0101.11</softwareIdList>
  <softwareIdList>12.0102.10</softwareIdList>
  <softwareIdList>12.0102.11</softwareIdList>
  <softwareIdList>13.0101.10</softwareIdList>
  <softwareIdList>13.0101.11</softwareIdList>
  <softwareIdList>13.0102.10</softwareIdList>
  <softwareIdList>13.0102.11</softwareIdList>
  <softwareIdList>13.0102.9</softwareIdList>
</ResourceModel:App>
