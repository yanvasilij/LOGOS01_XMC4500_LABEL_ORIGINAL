<%@ jet package="CodeGenerator" class="flash002h_template"
imports="java.util.* com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>
<% String AppBaseuri = "app/flash001/";%>
/******************************************************************************
 *
 * Copyright (C) 2014 Infineon Technologies AG. All rights reserved.
 *
 * Infineon Technologies AG (Infineon) is supplying this software for use with
 * Infineon's microcontrollers.
 * This file can be freely distributed within development tools that are
 * supporting such microcontrollers.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
 * OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC4500 Series                                         **
**                                                                            **
** COMPILER : GCC                                                             **
**                                                                            **
** AUTHOR : App Developer                                                     **
**                                                                            **
** MAY BE CHANGED BY USER [Yes/No]: Yes                                       **
**                                                                            **
** MODIFICATION DATE : Feb 18, 2014                                           **
**                                                                            **
*******************************************************************************/

/*******************************************************************************
**                       Author(s) Identity                                   **
********************************************************************************
**                                                                            **
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** RP         App Developer                                                   **
*******************************************************************************/
/* Revision History
 *****************************************************************************
 * Date           Version     Remarks
 * 14-Dec-12    1.0.2      Initial Version
 * 28-Jun-13	1.0.6      File converted as a jet file to generate the code 
 * 						   based on the flash size.
 * 18-Feb-14    1.0.8      Added support for XMC4108-Q48K64 device 
 *                         
 */
/**
 * @file FLASH002.h
 *
 * @brief  FLASH002 App implementation header file.
 *
 **/

#ifndef FLASH002_H_
#define FLASH002_H_
 

/*******************************************************************************
**                      Include Files                                         **
*******************************************************************************/


/* Inclusion of Platform specific file */
#include <DAVE3.h>


/*******************************************************************************
**                      Global Macro Definitions                              **
*******************************************************************************/
/*Flash array address, sizes and offsets*/

/**
 * @ingroup FLASH002_publicparam
 * @{
 */
<% String flash002_device_name = null; %>
<% int flash002_ab_type = 0; %>
<% int flash002_k_type = 0; %>
<% int flash002_flash_size = 0;%>
<% flash002_device_name = app.getDeviceName().toLowerCase();%>
<% flash002_ab_type = flash002_device_name.lastIndexOf("-");%>
<% flash002_k_type = flash002_device_name.lastIndexOf("k");%>
<% if(flash002_ab_type > 7){ %>
<% flash002_flash_size = Integer.valueOf(flash002_device_name.substring(flash002_device_name.lastIndexOf("x")+1,flash002_device_name.lastIndexOf("-")));%>
<% } else if(flash002_k_type > 10){ %>
<% flash002_flash_size = Integer.valueOf(flash002_device_name.substring(flash002_device_name.lastIndexOf("k")+1));%>
<% } else { %>
<% flash002_flash_size = Integer.valueOf(flash002_device_name.substring(flash002_device_name.lastIndexOf("x")+1));%>
<%}%>
#define FLASH002_SIZE <%= flash002_flash_size%>U
/** Base address of the uncached area of the Flash array*/
#define FLASH002_UNCACHED_BASE  0x0C000000U
/** Base address of Sector-0*/
#define FLASH002_SECTOR0_BASE   FLASH002_UNCACHED_BASE
/** Base address of Sector-1*/
#define FLASH002_SECTOR1_BASE   (FLASH002_UNCACHED_BASE + 0x4000U)
/** Base address of Sector-2*/
#define FLASH002_SECTOR2_BASE   (FLASH002_UNCACHED_BASE + 0x8000U)
/** Base address of Sector-3*/
#define FLASH002_SECTOR3_BASE   (FLASH002_UNCACHED_BASE + 0xC000U)
#if FLASH002_SIZE>=128U
/** Base address of Sector-4*/
#define FLASH002_SECTOR4_BASE   (FLASH002_UNCACHED_BASE + 0x10000U)
/** Base address of Sector-5*/
#define FLASH002_SECTOR5_BASE   (FLASH002_UNCACHED_BASE + 0x14000U)
/** Base address of Sector-6*/
#define FLASH002_SECTOR6_BASE   (FLASH002_UNCACHED_BASE + 0x18000U)
/** Base address of Sector-7*/
#define FLASH002_SECTOR7_BASE   (FLASH002_UNCACHED_BASE + 0x1C000U)
#if FLASH002_SIZE>=256U
/** Base address of Sector-8*/
#define FLASH002_SECTOR8_BASE   (FLASH002_UNCACHED_BASE + 0x20000U)
#if FLASH002_SIZE>=512U
/** Base address of Sector-9*/
#define FLASH002_SECTOR9_BASE   (FLASH002_UNCACHED_BASE + 0x40000U)
#if FLASH002_SIZE>=768U
/** Base address of Sector-10*/
#define FLASH002_SECTOR10_BASE  (FLASH002_UNCACHED_BASE + 0x80000U)
#if FLASH002_SIZE>=1024U
/** Base address of Sector-11*/
#define FLASH002_SECTOR11_BASE  (FLASH002_UNCACHED_BASE + 0xC0000U)
#endif
#endif
#endif
#endif
#endif
/** Size of one Flash page*/
#define FLASH002_PAGE_SIZE      0x100U
/** Size of one User Control Block*/
#define FLASH002_UCB_SIZE       0x400U

/**
 *@}
 */

/**
 * @ingroup FLASH002_apidoc
 * @{
 */

/**
 * This Macro configures the Margin in Margin Control register. <br>
 * This may be used to adjust the 'Margin - the limit which defines a Flash
 * cell is read as 0 or 1.<br>
 * Additionally the bus error trap on Double bit error can be suppressed by setting TrapDisable to 1<br>
 * Margin shall by any of the following three values<br>
 * FLASH002_MARGIN_DEFAULT - Default(Standard) margin<br>
 * FLASH002_MARGIN_TIGHT0  - Tight margin for '0' (Sub-optimal 0 is read as 1)<br>
 * FLASH002_MARGIN_TIGHT1  - Tight margin for '1' (Sub-optimal 1 is read as 0)<br>
 * TrapDisable can be set to 1 to suppress bus error on a Double Bit Error. Else keep it 0<br>
 */
#define FLASH002_SET_MARGIN_CONTROL(Margin, TrapDisable)\
  WR_REG(FLASH0->MARP, FLASH_MARP_MARGIN_Msk, FLASH_MARP_MARGIN_Pos, Margin);\
  WR_REG(FLASH0->MARP, FLASH_MARP_TRAPDIS_Msk, FLASH_MARP_TRAPDIS_Pos, TrapDisable)
  

/**
 * This Macro Invalidates the instruction buffer in the Prefetch unit.<br>
 * May be used when the program in the Flash is re-programmed during run time.<br>
 */

#define FLASH002_PREFETCH_INVALIDATE_INSTRUCTION_BUFFER()\
  WR_REG(PREF->PCON, PREF_PCON_IINV_Msk, PREF_PCON_IINV_Pos, 1U)

/**
 * This Macro Configures the Prefetch unit to bypass instruction prefetch buffer.<br>
 * bypass = 1 - bypass instruction prefetch buffer. <br>
 * bypass = 0 - Do not bypass instruction prefetch buffer. <br>
 */
#define FLASH002_PREFETCH_BYPASS_INSTRUCTION_BUFFER(bypass)\
  WR_REG(PREF->PCON, PREF_PCON_IBYP_Msk, PREF_PCON_IBYP_Pos, bypass)

/**
 *@}
 */
/*******************************************************************************
**                      Global Type Definitions                               **
*******************************************************************************/


/**
 * @ingroup FLASH002_publicparam
 * @{
 */

/**
 * This enumeration defines error codes for FLASH002 app
 */
typedef enum FLASH002Status_Type
{
  /** FLASH002 Invalid Parameter */
  FLASH002_INVALID_PARAM = 1,
  /** FLASH002 Error */
  FLASH002_ERROR,
}FLASH002Status_Type;

/**
 * This enumeration provides the options to select Sectors for write
 * protection and select global read protection.<br>
 * They can be combined using 'OR' operator for multiple selection.<br>
 *
 */
typedef enum FLASH002ProtectionFlags_Type
{
  /** sector 0 write protection */
  FLASH002_PROT_WR_SECTOR0 = 0x0001,
  /** sector 1 write protection */
  FLASH002_PROT_WR_SECTOR1 = 0x0002,
  /** sector 2 write protection */
  FLASH002_PROT_WR_SECTOR2 = 0x0004,
  /** sector 3 write protection */
  FLASH002_PROT_WR_SECTOR3 = 0x0008,
  #if FLASH002_SIZE>=128U
  /** sector 4 write protection */
  FLASH002_PROT_WR_SECTOR4 = 0x0010,
  /** sector 5 write protection */
  FLASH002_PROT_WR_SECTOR5 = 0x0020,
  /** sector 6 write protection */
  FLASH002_PROT_WR_SECTOR6 = 0x0040,
  /** sector 7 write protection */
  FLASH002_PROT_WR_SECTOR7 = 0x0080,
  #if FLASH002_SIZE>=256U
  /** sector 8 write protection */
  FLASH002_PROT_WR_SECTOR8 = 0x0100,
  #if FLASH002_SIZE>=512U
  /** sector 9 write protection */
  FLASH002_PROT_WR_SECTOR9 = 0x0200,
  #if FLASH002_SIZE>=768U
  /** sector  10 and 11 write protection */
  FLASH002_PROT_WR_SECTOR10_11 = 0x0400,
  #endif
  #endif
  #endif
  #endif
  /** Global read protection (Applicable for UserLevel0 alone) */
  FLASH002_PROT_RD_GLOBAL = 0x8000
}FLASH002ProtectionFlags_Type;

/**
 * This enumeration provides the options for Flash Margin Control
 *
 */

typedef enum FLASH002_MARGIN_Type
{
  /**Default(Standard) margin*/
  FLASH002_MARGIN_DEFAULT = 0x0U,
  /**Tight margin for '0' (Sub-optimal 0 is read as 1)*/
  FLASH002_MARGIN_TIGHT0  = 0x1U,
  /**Tight margin for '1' (Sub-optimal 1 is read as 0) */
  FLASH002_MARGIN_TIGHT1  = 0x4U
}FLASH002_MARGIN_Type;

/**
 * This enumeration can be used to configure BMI Flags while configuring
 * the BMI string in UCB2 Page2. They can be combined using OR operator
 * to specify multiple options
 */
typedef enum FLASH002_BMI_FLAGS_Type
{
  /** Valid MAC Address present in BMI string*/
  FLASH002_BMI_MAC_ADDR_VALID = 0x0020,
  /** Ethernet IP address extension is a IPv4 address*/
  FLASH002_BMI_IP_ADDR_IS_IPV4 = 0x0080,
  /** Ethernet IP address extension is a IPv6 address*/
  FLASH002_BMI_IP_ADDR_IS_IPV6 = 0x0100,
  /** Valid USB serial number part of the BMI string*/
  FLASH002_BMI_USB_SN_VALID = 0x0400,
  /** Parity error detection of PSRAM shall be initialized by Startup Software*/
  FLASH002_BMI_INIT_PSRAM_PARITY = 0x1000,
  /** Parity error detection of DSRAM1 shall be initialized by Startup Software*/
  FLASH002_BMI_INIT_DSRAM1_PARITY = 0x2000,
  /** Parity error detection of DSRAM2 shall be initialized by Startup Software*/
  FLASH002_BMI_INIT_DSRAM2_PARITY = 0x4000,
  /** Clock tree of the device shall be set up to maximum frequency by SSW*/
  FLASH002_BMI_SPEEDUP = 0x8000
}FLASH002_BMI_FLAGS_Type; 
  
/**
 * This enumeration can be used to select the Boot Mode via BMI
 */
typedef enum FLASH002_BOOT_MODE_Type
{
  /** Normal boot mode - boot from flash*/
  FLASH002_BMI_BOOT_NORMAL = 0x0,
  /** Boot using ASC (UART) BSL*/
  FLASH002_BMI_BOOT_ASC = 0x1,
  /** Boot using CAN BSL*/
  FLASH002_BMI_BOOT_CAN = 0x3,
  /** Boot using CSRAM (Code SRAM also known as PSRAM) boot mode*/
  FLASH002_BMI_BOOT_CSARM = 0x4,
  /** Boot using Alternate Boot Mode Addres0*/
  FLASH002_BMI_BOOT_ABM0 = 0x8,
  /** Boot using Alternate Boot Mode Addres1*/
  FLASH002_BMI_BOOT_ABM1 = 0xC,
  /** Boot using Fall Back Alternate Boot Mode*/
  FLASH002_BMI_BOOT_FABM = 0xE,
}FLASH002_BOOT_MODE_Type;
  

/**
 * This structure is used to compile the BMI string.
 */ 


typedef struct FLASH002BMIString_Type
{
  /** Boot mode*/
  FLASH002_BOOT_MODE_Type BootMode;
  /** BMI Flags*/
  FLASH002_BMI_FLAGS_Type BMIFlags;
  /** MAC Address Extension (if used), LSB as first element.
  Valid only if specified as 'valid' in BMIFlags*/
  uint8_t MACAddrExtn[6];
  /** Ethernet IP Extension (if used) LSB as first element.
    Valid only if specified as 'valid' in BMIFlags.
  can be an IPv4 or an IPv6 address*/
  uint8_t EthernetIPExtn[16];
  /** USB Serial Number (if used)
  Valid only if specified as 'valid' in BMIFlags*/
  uint8_t USBSerialNumber[4];
}FLASH002BMIString_Type;

/**
 *@}
 */

 
/*******************************************************************************
**                      Global Constant Declarations                          **
*******************************************************************************/


/*******************************************************************************
**                      Extern Variables                                      **
*******************************************************************************/


/*******************************************************************************
**                     FUNCTION PROTOTYPES                                    **
*******************************************************************************/
/**
 * @ingroup FLASH002_apidoc
 * @{
 */
 
 /** 
 * This function configures a few parameters based on UI settings.
 * It also clears the Error Status bits in the Flash Status Register
 *
 * @return     void
 *             
 *             
 * <b>Reentrant: NO </b><BR>
 * <BR><P ALIGN="LEFT"><B>Example:</B>
 * @code
 *  #include <DAVE3.h>
 *  int main(void)
 *  {
 *    // Initialize
 *    DAVE_Init(); // FLASH002_Init() will be called within DAVE_Init()
 *    // ... infinite loop ...
 *    while(1)
 *    {
 *
 *    }
 *  }
 * @endcode<BR> </p>
 */
void FLASH002_Init (void);

 
 /** 
  *  This function executes a 'Clear Status' Command.
 *  A clear status command clears all error flags in the 
 *  Flash Status Register. It also clears the 'Erase State' and
 *  'Programming State' flags in the Flash Status Register.
*
 * @return     void
 *             
 *             
 * <b>Reentrant: NO </b><BR>
 * <BR><P ALIGN="LEFT"><B>Example:</B>
 * @code
 *  #include <DAVE3.h>
 *  int main(void)
 *  {
 *    // Initialize
 *    DAVE_Init(); // FLASH002_Init() will be called within DAVE_Init()
 *    //Do some flash operation here
 *    //....
 *    //then clear status
 *    FLASH002_ClearStatus();
 *    // ... infinite loop ...
 *    while(1)
 *    {
 *
 *    }
 *  }
 * @endcode<BR> </p>
 */
void FLASH002_ClearStatus(void);


 /** 
 *  The function programs one page of the Flash using Write Page command.
 *  This function returns only once the programming is completed or
 *  once the programming has resulted in error condition.
 *
 *  NOTE: While the programming operation is in progress, the flash array
 *  will be busy and no access to flash can happen. Hence this function shall
 *  be executed from RAM.
 *
 *
 * @param[in] Address Start address of the page
 * @param[in] pBuf Buffer with data to be programmed
 *
 * @return     status_t<BR>
 *             DAVEApp_SUCCESS          : if page write was successful<BR>
 *             FLASH002_INVALID_PARAM   : If invalid address entered<BR>
 *             FLASH002_ERROR           : If error occurred while programming<BR>
 *             
 *             
 * <b>Reentrant: NO </b><BR>
 * <BR><P ALIGN="LEFT"><B>Example:</B>
 * @code
 *  #include <DAVE3.h>
 *  int main(void)
 *  {
 *    uint32_t StartAddr = FLASH002_SECTOR11_BASE; //Page-0 of sector 11
 *    status_t status;
 *    uint32_t i;
 *    uint32_t Buffer[FLASH002_PAGE_SIZE/4];
 *    // Initialize
 *    DAVE_Init(); // FLASH002_Init() will be called within DAVE_Init()
 *     // fill buffer with test pattern for a page.
 *    for(i=0;i<(FLASH002_PAGE_SIZE/4);i++)
 *    {
 *      Buffer[i]=StartAddr+4*i;
 *    }
 *
 *    status = Flash002_WritePage(StartAddr,Buffer);
 *
 *    while(1)
 *    {
 *
 *    }
 *  }
 * @endcode<BR> </p>
 */
status_t Flash002_WritePage
(
  uint32_t Address,
  const uint32_t pBuf[]
);


 /** 
 * This function erases the sector indicated by the sector start address.
 * This function returns only once the erase operation is completed or
 * once the erase operation has resulted in error condition.
 *
 *  NOTE: While the erase operation is in progress, the flash array
 *  will be busy and no access to flash can happen. Hence this function may
 *  be executed from RAM.
 *
 * @param[in] Address Start address of the sector to be erased
 *
 * @return     status_t<BR>
 *             DAVEApp_SUCCESS          : if page write was successful<BR>
 *             FLASH002_INVALID_PARAM   : If invalid address entered<BR>
 *             FLASH002_ERROR           : If error occurred while erasing<BR>
 *             
 *             
 *
 * <b>Reentrant: NO </b><BR>
 * <BR><P ALIGN="LEFT"><B>Example:</B>
 * @code
 *  #include <DAVE3.h>
 *  int main(void)
 *  {
 *    uint32_t status;
 *    uint32_t StartAddr = FLASH002_SECTOR7_BASE;
 *    // Initialize
 *    DAVE_Init(); // FLASH002_Init() will be called within DAVE_Init()
 *    status = Flash002_EraseSector(StartAddr);
 *    while(1)
 *    {
 *    }
 *  }
 * @endcode<BR> </p>
 */
status_t Flash002_EraseSector (uint32_t Address);


/**
 * This function Configures Sector Write Protection and/or global read
 * protection in Page0 of UCB. This function returns only once the program
 * operation is completed or once the program operation has resulted in error
 * condition.
 *
 * NOTE: While the programming operation is in progress, the flash array
 * will be busy and no access to flash can happen. Hence this function shall
 * be executed from RAM.
 *
 * @param[in] UserLevel The User Level (UCB) in which protection needs to be configured
 * @param[in] PW0 First 32 bits of the password (is don't care for UCB2)
 * @param[in] PW1 Second 32 bits of the password (is don't care of UCB2)
 * @param[in] ProtectionFlags Indicates set of sectors for write protection
 *            and/or Global read protection. The following values may be
 *            combined using OR operator<br>
 *            FLASH002_PROT_WR_SECTOR0<br>
 *            FLASH002_PROT_WR_SECTOR1<br>
 *            FLASH002_PROT_WR_SECTOR2<br>
 *            FLASH002_PROT_WR_SECTOR3<br>
 *            FLASH002_PROT_WR_SECTOR4<br>
 *            FLASH002_PROT_WR_SECTOR5<br>
 *            FLASH002_PROT_WR_SECTOR6<br>
 *            FLASH002_PROT_WR_SECTOR7<br>
 *            FLASH002_PROT_WR_SECTOR8<br>
 *            FLASH002_PROT_WR_SECTOR9<br>
 *            FLASH002_PROT_WR_SECTOR10_11<br>
 *            FLASH002_PROT_RD_GLOBAL - valid only for UCB0<br>
 *
 * @return     status_t<BR>
 *             DAVEApp_SUCCESS          : if programming the UCB is successful<BR>
 *             FLASH002_INVALID_PARAM   : If user level is invalid <BR>
 *             FLASH002_ERROR           : If error occurred while programming UCB<BR>
 *
 *
 *
 * <b>Reentrant: NO </b><BR>
 * <BR><P ALIGN="LEFT"><B>Example:</B>
 * @code
 *  #include <DAVE3.h>
 *  int main(void)
 *  {
 *    uint32_t status;
 *    uint32_t UserLevel = 0;
 *    uint32_t PW0 = 0x00010002; //first 32 bit of password
 *    uint32_t PW1 = 0x00030004; //second 32 bit of password
 *    FLASH002ProtectionFlags_Type ProtectionFlags;
 *
 *     //write protect Sector 7 and Sector 8
 *    ProtectionFlags = FLASH002_PROT_WR_SECTOR7 | FLASH002_PROT_WR_SECTOR8;

 *    DAVE_Init(); // FLASH002_Init() will be called within DAVE_Init()
 *
 *    status = Flash002_ConfigureProtection(UserLevel, PW0, PW1, ProtectionFlags);
 *    while(1)
 *    {
 *    }
 *  }
 * @endcode<BR> </p>
 */
status_t Flash002_ConfigureProtection
(uint32_t UserLevel, uint32_t PW0, uint32_t PW1,
   FLASH002ProtectionFlags_Type ProtectionFlags);



/**
 * This function Confirms the protection configured in the User Control Blocks.
 * The confirmation code is programmed into Page2 of the UCB. This function
 * returns only once the program operation is completed or once the program
 * operation has resulted in error condition.
 *
 * IMPORTANT:  This function shall be used after the following steps only<br>
 * - Protection is configured in UCB Page0<br>
 * - A system reset is performed and then:<br>
 * - Password is verified by attempting temporary disabling of protection<br>
 * - Sector locking is verified by attempting write or read<br>
 *
 * This step may lock sectors permanently. So care shall be taken
 * before executing this.
 *
 * NOTE: While the programming operation is in progress, the flash array
 * will be busy and no access to flash can happen. Hence this function shall
 * be executed from RAM.
 *
 * @param[in] UserLevel The User Level (UCB) in which protection needs to be confirmed
 *
 * @return     status_t<BR>
 *             DAVEApp_SUCCESS          : if programming the UCB is successful<BR>
 *             FLASH002_INVALID_PARAM   : If user level is invalid <BR>
 *             FLASH002_ERROR           : If error occurred while programming UCB<BR>
 *
 * <b>Reentrant: NO </b><BR>
 * <BR><P ALIGN="LEFT"><B>Example:</B>
 * @code
 *  #include <DAVE3.h>
 *  int main(void)
 *  {
 *     //Demonstrates how Sector Write protection via UCB1 can be confirmed.
 *     //the following steps shall be executed after configuring the protection
 *     //in Page0 and a system reset has been performed
 *     uint32_t status;
 *     uint32_t UserLevel = 1;
 *     uint32_t PW0 = 0x00010002; //first 32 bit of password configured in Page0
 *     uint32_t PW1 = 0x00030004; //second 32 bit of password configured in Page0
 *
 *
 *
 *     DAVE_Init(); // FLASH002_Init() will be called within DAVE_Init()
 *
 *     //Disable write protection in UCB1
 *     status = Flash002_DisableSectorWriteProtection(UserLevel, PW0, PW1);
 *
 *     //confirm protection only if password verification is OK
 *     if (status == DAVEApp_SUCCESS)
 *     {
 *       status = Flash002_ConfirmProtection(UserLevel);
 *     }
 *
 *     while(1)
 *     {
 *     }
 *     return 0;
 * }
 * @endcode<BR> </p>
 */
status_t Flash002_ConfirmProtection (uint32_t UserLevel);

/**
 * This function disables global read protection temporarily.
 *
 * NOTE: This operation does not put the Flash into BUSY state
 *
 * @param[in] PW0 First 32 bits of the password
 * @param[in] PW1 Second 32 bits of the password
 *
 * @return     status_t<BR>
 *             DAVEApp_SUCCESS          : if disabling protection is successful <BR>
 *             FLASH002_ERROR           : if protection could not be disabled <BR>
 *
 * <b>Reentrant: NO </b><BR>
 * <BR><P ALIGN="LEFT"><B>Example:</B>
 * @code
 *  #include <DAVE3.h>
 *  int main(void)
 *  {
 *     uint32_t status;
 *     uint32_t PW0 = 0x00010002; //first 32 bit of password
 *     uint32_t PW1 = 0x00030004; //second 32 bit of password
 *
 *     DAVE_Init(); // FLASH002_Init() will be called within DAVE_Init()
 *
 *     status = Flash002_DisableGlobalReadProtection(PW0, PW1);
 *     while(1)
 *     {
 *     }
 *     return 0;
 *  }
 * @endcode<BR> </p>
 */
status_t Flash002_DisableGlobalReadProtection(uint32_t PW0, uint32_t PW1);

/**
 * This function disables Sector Write protection temporarily.
 *
 * NOTE: This operation does not put the Flash into BUSY state
 *
 * @param[in] UserLevel UCB in which sector write protection needs to be disabled.
 *                      Only 0 or 1 is valid.
 * @param[in] PW0 First 32 bits of the password
 * @param[in] PW1 Second 32 bits of the password
 *
 * @return     status_t<BR>
 *             DAVEApp_SUCCESS          : if disabling protection is successful <BR>
 *             FLASH002_ERROR           : if protection could not be disabled <BR>
 *
 * <b>Reentrant: NO </b><BR>
 * <BR><P ALIGN="LEFT"><B>Example:</B>
 * @code
 *  #include <DAVE3.h>
 *  int main(void)
 *  {
 *     uint32_t status;
 *     uint32_t UserLevel = 1;    //Protection in UCB1 will be disabled
 *     uint32_t PW0 = 0x00010002; //first 32 bit of password
 *     uint32_t PW1 = 0x00030004; //second 32 bit of password
 *
 *     DAVE_Init(); // FLASH002_Init() will be called within DAVE_Init()
 *
 *     //Disable write protection in UCB1
 *     status = Flash002_DisableSectorWriteProtection(UserLevel, PW0, PW1);
 *
 *     while(1)
 *     {
 *     }
 *  }
 * @endcode<BR> </p>
 */
status_t Flash002_DisableSectorWriteProtection
(uint32_t UserLevel, uint32_t PW0, uint32_t PW1);

/**
 * This function Erases an UCB.
 * If protection is confirmed, UCB2 cannot be erased (OTP).
 * For UCB0 and UCB1 protection (if confirmed already) shall be disabled
 * temporarily before erasing.<br>
 *
 * This function returns only once the erase operation is completed or
 * once the erase operation has resulted in error condition.
 *
 * IMPORTANT:  The UCBs can be erased only up to 4 times.
 * So care shall be before doing this.
 *
 * NOTE: While the erase operation is in progress, the flash array
 * will be busy and no access to flash can happen. Hence this function may
 * be executed from RAM.
 *
 * @param[in] UserLevel The UCB (0 or 1) which needs to be erased.
 *
 * @return     status_t<BR>
 *             DAVEApp_SUCCESS          : if erasing the UCB is successful<BR>
 *             FLASH002_INVALID_PARAM   : If user level is invalid <BR>
 *             FLASH002_ERROR           : If error occurred while Erasing UCB<BR>
 *
 * <b>Reentrant: NO </b><BR>
 * <BR><P ALIGN="LEFT"><B>Example:</B>
 * @code
 *  #include <DAVE3.h>
 *  int main(void)
 *  {
 *     //Demonstrates how UCB1 can be erased if the protection is confirmed.
 *
 *     uint32_t status;
 *     uint32_t UserLevel = 1;
 *     uint32_t PW0 = 0x00010002; //first 32 bit of password for UCB1
 *     uint32_t PW1 = 0x00030004; //second 32 bit of password for UCB1
 *
 *     DAVE_Init(); // FLASH002_Init() will be called within DAVE_Init()
 *
 *     //Disable write protection in UCB1
 *     status = Flash002_DisableSectorWriteProtection(UserLevel, PW0, PW1);
 *
 *     //Erase the UCB if Disable Protection is successful
 *     if (status == DAVEApp_SUCCESS)
 *     {
 *       status = Flash002_EraseUCB(UserLevel);
 *     }
 *
 *     while(1)
 *     {
 *     }
 *     return 0;
 * }
 * @endcode<BR> </p>
 */
status_t Flash002_EraseUCB(uint32_t UserLevel);

/**
 * This function resumes the protection if it had been temporarily disabled.
 *
 *
 * @return     status_t<BR>
 *             DAVEApp_SUCCESS          : if protection could be resumed <BR>
 *             FLASH002_ERROR           : If protection is still disabled <BR>
 *
 * <b>Reentrant: NO </b><BR>
 * <BR><P ALIGN="LEFT"><B>Example:</B>
 * @code
 *  #include <DAVE3.h>
 *  int main(void)
 *  {
 *    // Initialize
 *    DAVE_Init(); // FLASH002_Init() will be called within DAVE_Init()
 *    Flash002_ResumeProtection();
 *    while(1)
 *    {
 *
 *    }
 *  }
 * @endcode<BR> </p>
 */
status_t Flash002_ResumeProtection (void);

/**
 * This function can be used to configure the BMI (Boot Mode Index)
 * in page1 of UCB2
 *
 * NOTE: 1. While the programming operation is in progress, the flash array
 * will be busy and no access to flash can happen. Hence this function shall
 * be executed from RAM<br>
 * 2. If protection needs to be configured in UCB2, then verify both protection
 * and BMI before confirming the protection in UCB2<br>
 *
 * @param[in] BMIString Structure containing Boot Mode Index information
 *
 * @return     status_t<BR>
 *             DAVEApp_SUCCESS          : if programming the UCB is successful<BR>
 *             FLASH002_ERROR           : If error occurred while programming UCB<BR>
 *
 * <b>Reentrant: NO </b><BR>
 * <BR><P ALIGN="LEFT"><B>Example:</B>
 * @code
 *  #include <DAVE3.h>
 *  int main(void)
 *  {
 *     status_t status;
 *     const FLASH002BMIString_Type MyBMITestString =
 *     {
 *       //boot mode
 *       FLASH002_BMI_BOOT_NORMAL,
 *       //BMI Flags
 *       FLASH002_BMI_MAC_ADDR_VALID | FLASH002_BMI_IP_ADDR_IS_IPV6 |\
 *       FLASH002_BMI_USB_SN_VALID,
 *       //MAC ADDR extension
 *       {0x11, 0x22, 0x33, 0x44, 0x55, 0x66},
 *       //IP ADDR extension
 *       {0xFF, 0xEE, 0xDD, 0xCC, 0xBB, 0xAA, 0x99, 0x88, 0x77, 0x66,\
 *        0x55, 0x44, 0x33, 0x22, 0x11, 0x00},
 *        //USB serial number
 *       {0x12, 0x34, 0x56, 0x78}
 *     };
 *
 *     DAVE_Init(); // FLASH002_Init() will be called within DAVE_Init()
 *     //configure the BMI string in UCB2 Page1
 *    status = Flash002_ConfigureBMI (&MyBMITestString);
 *    while(1)
 *    {
 *    }
 *  }
 * @endcode<BR> </p>
 */
status_t Flash002_ConfigureBMI (const FLASH002BMIString_Type *BMIString);

/** 
 * This function can be used to verify protection configured in UCBs before
 * the protection is confirmed. The protection is verified by reading the
 * Protection Configuration registers and attempting unlock sequence with 
 * the provided password.
 *
 *  NOTE:<br>
 *  1. This function does not do any flash operation and does not
 *  set the Flash into busy state. <br>
 *  2. This function shall be executed after a system reset once protection
 *  is configured in a UCB. This function is meant to be executed only before the UCB
 *  is confirmed.<br>
 *  3. Once this function is executed, the protection is left 'unlocked'.
 *  A System reset is required to re-enable the protection. Resume protection 
 *  operation does not work if UCB is not confirmed.<br>
 * 
 * @param[in] UserLevel The User Level (UCB) in which protection needs to be verified
 * @param[in] PW0 First 32 bits of the password configured for the UCB (is don't care for UCB2)
 * @param[in] PW1 Second 32 bits of the password configured for the UCB  (is don't care of UCB2)
 * @param[in] ProtectionFlags Indicates set of sectors for write protection
 *            and/or Global read protection that is configured already in the UCB.
              The following values may be combined using OR operator<br>
 *            FLASH002_PROT_WR_SECTOR0<br>
 *            FLASH002_PROT_WR_SECTOR1<br>
 *            FLASH002_PROT_WR_SECTOR2<br>
 *            FLASH002_PROT_WR_SECTOR3<br>
 *            FLASH002_PROT_WR_SECTOR4<br>
 *            FLASH002_PROT_WR_SECTOR5<br>
 *            FLASH002_PROT_WR_SECTOR6<br>
 *            FLASH002_PROT_WR_SECTOR7<br>
 *            FLASH002_PROT_WR_SECTOR8<br>
 *            FLASH002_PROT_WR_SECTOR9<br>
 *            FLASH002_PROT_WR_SECTOR10_11<br>
 *            FLASH002_PROT_RD_GLOBAL - valid only for UCB0<br> 
 *
 * @return     status_t<BR>
 *             DAVEApp_SUCCESS          : if protection configuration and password 
 *                                        are correct<BR>
 *             FLASH002_ERROR           : If verify protection fails<BR>
 *
 *
 *
 * <b>Reentrant: NO </b><BR>
 * <BR><P ALIGN="LEFT"><B>Example:</B>
 * @code
 *  #include <DAVE3.h>
 *  int main(void)
 *  {
 *    uint32_t status;
 *    uint32_t UserLevel = 0;
 *    uint32_t PW0 = 0x00010002; //first 32 bit of password
 *    uint32_t PW1 = 0x00030004; //second 32 bit of password
 *    FLASH002ProtectionFlags_Type ProtectionFlags;
 *
 *     //write protect Sector 7 and Sector 8 are configured in UCB0 already
 *    ProtectionFlags = FLASH002_PROT_WR_SECTOR7 | FLASH002_PROT_WR_SECTOR8;

 *    DAVE_Init(); // FLASH002_Init() will be called within DAVE_Init()
 *
 *    status = Flash002_VerifyProtection(UserLevel, PW0, PW1, ProtectionFlags);
 *    while(1)
 *    {
 *    }
 *  }
 * @endcode<BR> </p>
 */
status_t Flash002_VerifyProtection
(uint32_t UserLevel, uint32_t PW0, uint32_t PW1,
   FLASH002ProtectionFlags_Type ProtectionFlags);


/**
 *@}
 */


#endif /* FLASH002_H_ */



