<%@ jet package="CodeGenerator" class="gmm001c_template"
imports="java.util.* com.ifx.davex.appjetinteract.App2JetInterface" 
imports="java.util.* com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>

/*CODE_BLOCK_BEGIN[gmm001.c]*/
/*******************************************************************************
 Copyright (c) 2014, Infineon Technologies AG                                 **
 All rights reserved.                                                         **
                                                                              **
 Redistribution and use in source and binary forms, with or without           **
 modification,are permitted provided that the following conditions are met:   **
                                                                              **
 *Redistributions of source code must retain the above copyright notice,      **
 this list of conditions and the following disclaimer.                        **
 *Redistributions in binary form must reproduce the above copyright notice,   **
 this list of conditions and the following disclaimer in the documentation    **
 and/or other materials provided with the distribution.                       **
 *Neither the name of the copyright holders nor the names of its contributors **
 may be used to endorse or promote products derived from this software without** 
 specific prior written permission.                                           **
                                                                              **
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
 ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
 LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
 SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
 CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
 POSSIBILITY OF SUCH DAMAGE.                                                  **
                                                                              **
 To improve the quality of the software, users are encouraged to share        **
 modifications, enhancements or bug fixes with Infineon Technologies AG       **
 dave@infineon.com).                                                          **
                                                                              **
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC4000 Series                           			  **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR : App Developer                                         		      **
**                                                                            **
** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
**                                                                            **
** MODIFICATION DATE : Jan 20, 2014                                           **
**                                                                            **
*******************************************************************************/

/*******************************************************************************
**                       Author(s) Identity                                   **
********************************************************************************
**                                                                            **
** Initials   Name                                                            **
** ---------------------------------------------------------------------------**
** kks        App Developer                                                   **
*******************************************************************************/

/**
 * @file GMM001.c
 *
 * @brief This file implements the APIs for GMM001 App.
 *
 */

/*******************************************************************************
**                      Include Files                                         **
*******************************************************************************/
#include <DAVE3.h>
#include "../../inc/LMM001/LMM001.h"
#include "../../inc/GMM001/GMM001.h"

<% String TempApps = null;
   String MyAppName = null;
   ArrayList<String> apps;
   String TempLowerApps = null; 
   boolean DBGApp = false;   
   apps=(ArrayList<String>)(app.getApps());
        for (int k = 0; k < apps.size(); k++) {
              TempApps = apps.get(k);
//            if(app.isAppInitProvider(apps.get(k)) == true) {
              MyAppName = TempApps.substring(TempApps.indexOf("/app/") + 5, TempApps.lastIndexOf("/"));
              TempLowerApps = MyAppName.toLowerCase();
              if (TempLowerApps.equalsIgnoreCase("dbg002")) {DBGApp = true;}   
//   }  
  } %>

<% if (!DBGApp) { %>  
/*****************************************************************************
              DUMMY DEFINTIONS OF DEBUG LOG MACROS
*****************************************************************************/
/*These definitions are included here to avoid compilation errors,
 since the DBG002 app is not part of the project. All the macros are defined
 as empty*/ 
#ifndef _DBG002_H_

#define DBG002_RegisterCallBack(A,B,C)
#define DBG002_I(e) 
#define DBG002_IG(e,g) 
#define DBG002_IH(e,h) 
#define DBG002_IP(e,p) 
#define DBG002_IGH(e,g,h) 
#define DBG002_IGP(e,g,p) 
#define DBG002_IHP(e,h,p) 
#define DBG002_IGHP(e,g,h,p) 
#define DBG002_N(e) 
#define DBG002_NG(e,g) 
#define DBG002_NH(e,h) 
#define DBG002_NP(e,p) 
#define DBG002_NGH(e,g,h) 
#define DBG002_NGP(e,g,p) 
#define DBG002_NHP(e,h,p) 
#define DBG002_NGHP(e,g,h,p) 
#define DBG002_ID(e) 
#define DBG002_IS(e) 
#define DBG002_ISG(e,g) 
#define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
#define DBG002_CRITICAL(groupid,messageid,length,value)
#define DBG002_ERROR(groupid,messageid,length,value)
#define DBG002_WARNING(groupid,messageid,length,value)
#define DBG002_INFO(groupid,messageid,length,value)
#define DBG002_TRACE(groupid,messageid,length,value)
#define DBG002_FUNCTION_ENTRY(GID, Status) 
#define DBG002_FUNCTION_EXIT(GID, Status) 

#endif/* End of defintions of dummy Debug Log macros*/
<% } %>                  

/*******************************************************************************
**                      Global Variable declarations                          **
*******************************************************************************/
/**
 * GROUP ID FOR DBG LOG APP .
 */
#define APP_GID DBG002_GID_GMM001

#if defined (__GNUC__) || defined (__TASKING__)
/**
 * Heap Banks : Defined in Linker script
 */
extern unsigned char Heap_Bank1_Start[];
extern unsigned char Heap_Bank2_Start[];
extern unsigned char Heap_Bank3_Start[];

/**
  * Sizes of Heap Banks : Defined in Linker script
  */
extern unsigned int Heap_Bank1_Size;
extern unsigned int Heap_Bank2_Size;
extern unsigned int Heap_Bank3_Size;

#define LENGTH1 ((uint32_t)(&Heap_Bank1_Size))
#define LENGTH2 ((uint32_t)(&Heap_Bank2_Size))
#define LENGTH3 ((uint32_t)(&Heap_Bank3_Size))
#endif

#if defined (__CC_ARM)
/**
 * Heap Banks : Defined in Linker script
 */
extern int Image$$Heap_Bank1_Start$$Base;
extern int Image$$Heap_Bank1_End$$Base;
extern int Image$$Heap_Bank2_Start$$Base;
extern int Image$$Heap_Bank2_End$$Base;
extern int Image$$Heap_Bank3_Start$$Base;
extern int Image$$Heap_Bank3_End$$Base;

/**
 * Length of the respective memory banks
 * calculated from linker symbols
 */
#define LENGTH1 ((uint32_t)&Image$$Heap_Bank1_End$$Base -\
                               (uint32_t)&Image$$Heap_Bank1_Start$$Base)
#define LENGTH2 ((uint32_t)&Image$$Heap_Bank2_End$$Base -\
                               (uint32_t)&Image$$Heap_Bank2_Start$$Base)
#define LENGTH3 ((uint32_t)&Image$$Heap_Bank3_End$$Base -\
                               (uint32_t)&Image$$Heap_Bank3_Start$$Base)

/**
 * Aliases for start of the banks - 
 * used in further assignments
 */
#define Heap_Bank1_Start (&Image$$Heap_Bank1_Start$$Base)
#define Heap_Bank2_Start (&Image$$Heap_Bank2_Start$$Base)
#define Heap_Bank3_Start (&Image$$Heap_Bank3_Start$$Base)
#endif

#if defined (__ICCARM__)
/**
 * Heap Banks : Defined in Linker script
 */

#pragma section = "Heap_Bank1_Start" 
#pragma section = "Heap_Bank1_End" 
#pragma section = "Heap_Bank2_Start" 
#pragma section = "Heap_Bank2_End" 
#pragma section = "Heap_Bank3_Start" 
#pragma section = "Heap_Bank3_End" 

/**
 * Aliases for start of the banks - 
 * used in further assignments
 */
#define Heap_Bank1_Start ((uint32_t)__section_begin ("Heap_Bank1_Start"))
#define Heap_Bank2_Start ((uint32_t)__section_begin ("Heap_Bank2_Start"))
#define Heap_Bank3_Start ((uint32_t)__section_begin ("Heap_Bank3_Start"))

/**
 * Length of the respective memory banks
 * calculated from linker symbols
 */
#define LENGTH1 (((uint32_t)__section_begin ("Heap_Bank1_End")) -\
               ((uint32_t)__section_begin ("Heap_Bank1_Start")))
#define LENGTH2 (((uint32_t)__section_begin ("Heap_Bank2_End")) -\
               ((uint32_t)__section_begin ("Heap_Bank2_Start")))
#define LENGTH3 (((uint32_t)__section_begin ("Heap_Bank3_End")) -\
               ((uint32_t)__section_begin ("Heap_Bank3_Start")))
#endif

/**
 * These are the LMM001 handles per RAM section.
*/
LMM001_HandleType GMM001_handle0;
LMM001_HandleType GMM001_handle1;
LMM001_HandleType GMM001_handle2;

/*******************************************************************************
**                      Public Function Definitions                           **
*******************************************************************************/
/*<<<DD_GMM001_API_1>>>*/
/* This function configures LMM001 handles using different RAM sections available
 * depending on the heap requirement.
 */
void GMM001_Init (void)
{
  
  
  memset ((void *)Heap_Bank1_Start, 0, LENGTH1);
  memset ((void *)Heap_Bank2_Start, 0, LENGTH2);
  memset ((void *)Heap_Bank3_Start, 0, LENGTH3);

/* Allocate Heap from RAM1 and RAM2 and RAM3*/  
/*<<<DD_GMM001_API_1_6>>>*/  
  GMM001_handle0.umm_heap = ((LMM001_BlockType *)Heap_Bank1_Start);
  GMM001_handle0.umm_numblocks = (uint32_t)LENGTH1 / (sizeof(LMM001_BlockType));
  GMM001_handle1.umm_heap = ((LMM001_BlockType *)Heap_Bank2_Start);
  GMM001_handle1.umm_numblocks = (uint32_t)LENGTH2 / (sizeof(LMM001_BlockType));
  GMM001_handle2.umm_heap = ((LMM001_BlockType *)Heap_Bank3_Start);
  GMM001_handle2.umm_numblocks = (uint32_t) LENGTH3/ (sizeof(LMM001_BlockType));

  
}

/*<<<DD_GMM001_API_2>>>*/
/*
 * The function allocates memory of 'size' number of bytes.
 */
void * GMM001_malloc (uint32_t size)
{
  void * MemPtr = NULL;
  

/*<<<DD_GMM001_API_2_1>>>*/  
  MemPtr = LMM001_malloc(&GMM001_handle0, size);
  if (MemPtr == NULL)
  {
    MemPtr = LMM001_malloc(&GMM001_handle1, size);
	if (MemPtr == NULL)
	{
		MemPtr = LMM001_malloc(&GMM001_handle2, size);
	}
  }

  
  return MemPtr;
}

/*<<<DD_GMM001_API_3>>>*/ 
/*
 * This function changes the size of a block of memory that was previously allocated with malloc().
 */
void * GMM001_realloc (uint32_t size, void * MemPtr)
{
  void * MemPtr1 = NULL;
  

  if (MemPtr == NULL)
  {
    return(GMM001_malloc(size));
  }

/*<<<DD_GMM001_API_3_1>>>*/   
  if (((uint32_t)MemPtr >= (uint32_t)Heap_Bank1_Start) && ((uint32_t)MemPtr <= ((uint32_t)Heap_Bank1_Start + LENGTH1)))
  {
    MemPtr1 = LMM001_realloc(&GMM001_handle0, MemPtr, size);
  }

/*<<<DD_GMM001_API_3_2>>>*/   
  else if (((uint32_t)MemPtr >= (uint32_t)Heap_Bank2_Start) && ((uint32_t)MemPtr <= ((uint32_t)Heap_Bank2_Start + LENGTH2)))
  {
 	MemPtr1 = LMM001_realloc(&GMM001_handle1, MemPtr, size);
  }

/*<<<DD_GMM001_API_3_3>>>*/   
  else if (((uint32_t)MemPtr >= (uint32_t)Heap_Bank3_Start) && ((uint32_t)MemPtr <= ((uint32_t)Heap_Bank3_Start + LENGTH3)))
  {
    MemPtr1 = LMM001_realloc(&GMM001_handle2, MemPtr, size);
  }
  else 
  {
    MemPtr1 = NULL;
  }
  
  return MemPtr1;
}

/*<<<DD_GMM001_API_4>>>*/ 
/*
 *  The function deallocates the memory pointed by Memptr.
 */
void GMM001_free (void * MemPtr)
{
  

/*<<<DD_GMM001_API_4_1>>>*/   
  if (((uint32_t)MemPtr >= (uint32_t)Heap_Bank1_Start) && ((uint32_t)MemPtr <= ((uint32_t)Heap_Bank1_Start + LENGTH1)))
  {
    LMM001_free(&GMM001_handle0, MemPtr);
  }

/*<<<DD_GMM001_API_4_2>>>*/   
  if (((uint32_t)MemPtr >= (uint32_t)Heap_Bank2_Start) && ((uint32_t)MemPtr <= ((uint32_t)Heap_Bank2_Start + LENGTH2)))
  {
    LMM001_free(&GMM001_handle1, MemPtr);
  }

/*<<<DD_GMM001_API_4_3>>>*/   
  if (((uint32_t)MemPtr >= (uint32_t)Heap_Bank3_Start) && ((uint32_t)MemPtr <= ((uint32_t)Heap_Bank3_Start + LENGTH3)))
  {
    LMM001_free(&GMM001_handle2, MemPtr);
  }
  
}
