<%@ jet package="CodeGenerator" class="pwmsp002confc_template"
imports="java.util.* java.text.* com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>

/*CODE_BLOCK_BEGIN[PWMSP002Conf.c]*/

/*******************************************************************************
 Copyright (c) 2012, Infineon Technologies AG                                 **
 All rights reserved.                                                         **
                                                                              **
 Redistribution and use in source and binary forms, with or without           **
 modification,are permitted provided that the following conditions are met:   **
                                                                              **
 *Redistributions of source code must retain the above copyright notice,      **
 this list of conditions and the following disclaimer.                        **
 *Redistributions in binary form must reproduce the above copyright notice,   **
 this list of conditions and the following disclaimer in the documentation    **
 and/or other materials provided with the distribution.                       **
 *Neither the name of the copyright holders nor the names of its contributors **
 may be used to endorse or promote products derived from this software without**
 specific prior written permission.                                           **
                                                                              **
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
 ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
 LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
 SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
 CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
 POSSIBILITY OF SUCH DAMAGE.                                                  **
                                                                              **
 To improve the quality of the software, users are encouraged to share        **
 modifications, enhancements or bug fixes with Infineon Technologies AG       **
 dave@infineon.com).                                                          **
                                                                              **
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR   : DAVE App Developer                                              **
**                                                                            **
** MAY BE CHANGED BY USER [yes/Yes]: Yes                                      **
**                                                                            **
** MODIFICATION DATE : December 01, 2012                                       **
**                                                                            **
*******************************************************************************/

/*******************************************************************************
**                       Author(s) Identity                                   **
********************************************************************************
**                                                                            **
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** KS           DAVE App Developer                                            **
*******************************************************************************/
<% String AppBaseuri = "app/pwmsp002/"; %>
/**
 * @file  PWMSP002_Conf.c
 * @App Version <<%=app.getAppVersion(AppBaseuri)%>>
 * @brief This file contains App parameter data as per GUI configurations
 *
 */
/* Revision History
 * 01 Dec 2012   v1.0.16   taken as base version
 */
#include <DAVE3.h>


<% String SliceUri = null; %>
<% String Slice1Uri = null; %>
<% String kernelNo = null; %>
<% String sliceNo = null; %>
<% String slice1No = null; %>
<% String zero = "0"; %> 
<% String one = "1"; %> 
<% String two = "2"; %> 
<% String three = "3"; %>

<% String appInst  = null; %>

<% ArrayList<String> appsList = (ArrayList<String>)(app.getApps("app/pwmsp002/"));
for (String appIns : appsList ) {
appInst = appIns.substring(appIns.lastIndexOf("/")+1);%>

<% SliceUri = app.getMappedUri(AppBaseuri + appInst +"/slice"); %>
<% if ((SliceUri != null) && (SliceUri.trim() != "")) { %>
<% kernelNo = SliceUri.substring(SliceUri.indexOf("/ccu8")+6,SliceUri.indexOf("/cc8/")); %>
<% sliceNo = SliceUri.substring(SliceUri.length() -1); %>
<% Slice1Uri = app.getMappedUri(AppBaseuri + appInst +"/slice1"); %>
<% if ((Slice1Uri != null) && (Slice1Uri.trim() != "")) { %>
  <% slice1No = Slice1Uri.substring(Slice1Uri.length() -1); %>
<%}else{ slice1No = "0"; }%>

<% int interrupt = (app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_erwcomaprematch/0") << 2) | app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_erwperiodmatch/0") 
|(app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_erwextstop/0") << 9) |(app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_erwtrap/0") << 10)
|(app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_erwextstart/0") << 8);%>
<% String SetDutyCycle = null;
String SetCompare = null;
int countingmode = app.getIntegerValue(AppBaseuri + appInst + "/slice/tc/tcm");
int comparemode = app.getIntegerValue(AppBaseuri + appInst + "/slice/chc/ase");
int timerconcat =  app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_irtimerconcat");

if(countingmode == 0 && comparemode == 0 && timerconcat == 0){
  SetDutyCycle = "CCU8PWMLIB_SetDutyEdgeAlignSymmetric";
  SetCompare = "CCU8PWMLIB_SetCompareSymmetric";
}
else if(countingmode == 0 && comparemode == 0 && timerconcat == 1 ){
  SetDutyCycle = "CCU8PWMLIB_SetDutyEdgeAlignSymmetricTimerConcat";
  SetCompare = "CCU8PWMLIB_SetCompareEdgeAlignSymmetricTimerConcat";
}
else if (countingmode == 0 && comparemode == 1){
  SetDutyCycle = "CCU8PWMLIB_SetDutyEdgeAlignAsymmetric";
  SetCompare = "CCU8PWMLIB_SetCompareAsymmetric"; 
}
else if (countingmode == 1 && comparemode == 0){
  SetDutyCycle = "CCU8PWMLIB_SetDutyCenterAlignSymmetric";
  SetCompare = "CCU8PWMLIB_SetCompareSymmetric"; 
}
else if (countingmode == 1 && comparemode == 1){
  SetDutyCycle = "CCU8PWMLIB_SetDutyCenterAlignAsymmetric";
  SetCompare = "CCU8PWMLIB_SetCompareAsymmetric"; 
}
%>
<%DecimalFormat df = new DecimalFormat("0.000");%>

PWMSP002_DynamicHandleType PWMSP002_DynamicHandle<%= appInst%> =
{
.State = PWMSP002_UNINITIALIZED
};

const PWMSP002_HandleType PWMSP002_Handle<%= appInst%> =
{

  .kTimerMode= <%= app.getIntegerValue(AppBaseuri + appInst + "/slice/tc/tssm")%>U,
  <%if(app.getIntegerValue(AppBaseuri + appInst + "/slice/chc/ase")==0) { %>
  .CompareMode= CCU8PWMLIB_SYMMETRIC,
  <% } else  { %>
  .CompareMode= CCU8PWMLIB_ASYMMETRIC,
  <% } %>
 <%if(app.getIntegerValue(AppBaseuri + appInst + "/slice/tc/tcm")==0) { %>
  .CountingMode= CCU8PWMLIB_EDGE_ALIGNED,
  <% } else  { %>
  .CountingMode= CCU8PWMLIB_CENTER_ALIGNED,
  <% } %>
  
  .kPassiveState0= <%= app.getIntegerValue(AppBaseuri + appInst + "/slice/chc/ocs1") %>U,
  .kPassiveState1= <%= app.getIntegerValue(AppBaseuri + appInst + "/slice/chc/ocs2") %>U,
  .kPassiveLevel0= <%= app.getIntegerValue(AppBaseuri + appInst + "/slice/psl/psl11") %>U,
  .kPassiveLevel1= <%= app.getIntegerValue(AppBaseuri + appInst + "/slice/psl/psl12") %>U,
  

  .kExtStartTrig= <%if(app.getIntegerValue(AppBaseuri + appInst + "/PWMSP002_erwStartEdge/0") ==1){%> 0U, <%}else{%> 1U, <%}%>
  .kExtStopTrig= <%if(app.getIntegerValue(AppBaseuri + appInst + "/PWMSP002_erwStopEdge/0") == 1){%> 0U, <%}else{%> 1U, <%}%>
  <%if(app.getIntegerValue(AppBaseuri + appInst + "/slice/ins/ev0em")==0) {%>
  .kStartEdge=  CCU8PWMLIB_NOTRIGGER,
  <% } else if(app.getIntegerValue(AppBaseuri + appInst + "/slice/ins/ev0em")==1) { %>
  .kStartEdge=  CCU8PWMLIB_RISINGEDGE,
  <% } else if(app.getIntegerValue(AppBaseuri + appInst + "/slice/ins/ev0em")==2) { %>
  .kStartEdge=  CCU8PWMLIB_FALLINGEDGE,
  <% } else { %>
  .kStartEdge=  CCU8PWMLIB_BOTHEDGES,
  <% } %>
  <%if(app.getIntegerValue(AppBaseuri + appInst + "/slice/ins/ev1em")==0) {%>
  .kStopEdge=  CCU8PWMLIB_NOTRIGGER,
  <% } else if(app.getIntegerValue(AppBaseuri + appInst + "/slice/ins/ev1em")==1) { %>
  .kStopEdge=  CCU8PWMLIB_RISINGEDGE,
  <% } else if(app.getIntegerValue(AppBaseuri + appInst + "/slice/ins/ev1em")==2) { %>
  .kStopEdge=  CCU8PWMLIB_FALLINGEDGE,
  <% } else { %>
  .kStopEdge=  CCU8PWMLIB_BOTHEDGES,
  <% } %>  
  <%if(app.getIntegerValue(AppBaseuri + appInst + "/slice/tc/strm")==0) {%>
  .ExtStartConfig=  CCU8PWMLIB_START_TIMER,
  <% } else { %>
  .ExtStartConfig=  CCU8PWMLIB_CLEAR_START_TIMER,
  <% } %>  
  <%if(app.getIntegerValue(AppBaseuri + appInst + "/slice/tc/endm")==0) {%>
  .ExtStopConfig=  CCU8PWMLIB_STOP_TIMER,
  <% } else if(app.getIntegerValue(AppBaseuri + appInst + "/slice/tc/endm")==1) { %>
  .ExtStopConfig=  CCU8PWMLIB_CLEAR_TIMER,
  <% } else { %>  
  .ExtStopConfig=  CCU8PWMLIB_CLEAR_STOP_TIMER,
  <% } %>  

  .kTrapEnable= <%= app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_erwenabletrap/0") %>U,
  .kTrapSync= <%= app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_erwtrapexittime/0") %>U,
  .kTrapExitControl= <%= app.getIntegerValue(AppBaseuri + appInst + "/slice/tc/trpsw") %>U,
  .kTrapLevel= <%= app.getIntegerValue(AppBaseuri + appInst + "/slice/ins/ev2lm") %>U,
  
  .kResolution = (float)<%= app.getFormattedDoubleValue((AppBaseuri + appInst + "/PWMSP002_irSelResolution"),"0.000")%>,
  .kCCUPrescalar= <%= app.getIntegerValue(AppBaseuri + appInst + "/PWMSP002_irSelprescalar") %>U,
  .kTimerConcatenation= <%= app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_irtimerconcat")  %>U,
  .kCompareValue1= <%= app.getIntegerValue(AppBaseuri + appInst + "/PWMSP002_irCompareVal1")  %>U,
  .kCompareValue2 = <%= app.getIntegerValue(AppBaseuri + appInst + "/PWMSP002_irCompareVal2")  %>U,
  .kPeriodVal= <%= app.getIntegerValue(AppBaseuri + appInst + "/PWMSP002_irSelPeriodReg")  %>U,
  
  .kFallingDeadTime = <%= app.getIntegerValue(AppBaseuri + appInst + "/PWMSP002_irwselFallDeadTimereg")%>U,
  .kRisingDeadTime= <%= app.getIntegerValue(AppBaseuri + appInst + "/PWMSP002_irwselRiseDeadTimereg")%>U,
  .kDeadTimePrescalar= <%= app.getIntegerValue(AppBaseuri + appInst + "/PWMSP002_irseldeadtimeprescalar")%>U,
  .DeadTimeConf= <%if(app.getIntegerValue(AppBaseuri + appInst + "/PWMSP002_erwDeadTimeConf/0") ==1){%> CCU8PWMLIB_DISABLE, <%}
  else if(app.getIntegerValue(AppBaseuri + appInst + "/PWMSP002_erwDeadTimeConf/1") ==1 ){%> CCU8PWMLIB_ENABLEDIRECTOUTPUT, <%}
  else if(app.getIntegerValue(AppBaseuri + appInst + "/PWMSP002_erwDeadTimeConf/2") ==1 ){%> CCU8PWMLIB_ENABLEINVERTEDOUTPUT, <%}
  else if(app.getIntegerValue(AppBaseuri + appInst + "/PWMSP002_erwDeadTimeConf/3") ==1 ){%> CCU8PWMLIB_ENABLE, <%}
  %>
  
  .kDitherSetting= <%= app.getIntegerValue(AppBaseuri + appInst + "/slice/tc/dithe")%>U,
  .kDitherCompare = <%= app.getIntegerValue(AppBaseuri + appInst + "/slice/dits/dcvs")%>U,

  .ShadowTransfer= <%= app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_irwshadowtransfer")%>U,
  .ShadowTransferMask= 
  <%if(app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_irwtoplevelapp") == 1){%>
  <%=app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_irwshadowtransfermask") %>U,
  <%}else {
  if(sliceNo.equals(zero)){
  if (app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_irtimerconcat") == 0){ %> 0x01U, 
  <%}
  else {%> 0x01U,
  <%}
  } 
  else if(sliceNo.equals(one)){
   if (app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_irtimerconcat") == 0){ %> 0x10U, 
   <%}
   else { %> 0x11U,
   <%}
  }  
  else if(sliceNo.equals(two) ){
  if (app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_irtimerconcat") == 0){ %> 0x100U, 
  <%}
  else { %> 0x110U,
  <%}
  }  
  else if(sliceNo.equals(three)){
  if (app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_irtimerconcat") == 0){ %> 0x1000U, 
  <%}
  else { %> 0x1100U,
  <%}
  }  
  }%>  
  .Start= <%= app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_irwstart")%>U,
  .StartMask= <%if(app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_irwtoplevelapp") == 1){%>
  <%= app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_irwshadowtransfermask")%>U,
  <%}else {
    if(sliceNo.equals(zero)){
      if (app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_irtimerconcat") == 0){ %> 0x01U, 
      <%}
      else {%> 0x01U,
      <%}
    } 
    else if(sliceNo.equals(one)){
       if (app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_irtimerconcat") == 0){ %> 0x2U, 
       <%}
       else { %> 0x3U,
       <%}
    }  
    else if(sliceNo.equals(two) ){
      if (app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_irtimerconcat") == 0){ %> 0x4U, 
      <%}
      else { %> 0x6U,
      <%}
    }  
    else if(sliceNo.equals(three)){
      if (app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_irtimerconcat") == 0){ %> 0x8U, 
      <%}
      else { %> 0xCU,
      <%}
    }  
  }%>  
  
  .FirstSlice= <% if(timerconcat == 0){%> CCU8PWMLIB_SLICE<%=sliceNo%> <%} else if(timerconcat == 1){ %> CCU8PWMLIB_SLICE<%=slice1No%><%} %>,
  .SecondSlice= CCU8PWMLIB_SLICE<%=sliceNo%>,
  .CC8yKernRegsPtr= (CCU8_GLOBAL_TypeDef*) CCU8<%= kernelNo%>_BASE,
  .CC8yRegsPtr= <% if(timerconcat == 0){%>CCU8<%= kernelNo%>_CC8<%=sliceNo%>,<%} else if(timerconcat == 1){ %> CCU8<%= kernelNo%>_CC8<%=slice1No%>,<%} %>
  .CC8yRegs1Ptr= CCU8<%= kernelNo%>_CC8<%=sliceNo%>,
  .DynamicHandleType= &PWMSP002_DynamicHandle<%= appInst%>,
  .StartControl = <%=app.getIntegerValue(AppBaseuri + appInst + "/pwmsp002_erwstart/0")%>U,
  .InterruptControl = 0x<%= Integer.toHexString(interrupt) %>U,
  .SetCompareFuncPtr = &<%= SetCompare%>,
  .SetDutyFuncPtr = &<%= SetDutyCycle%>,

};  
  
<%}else {%>
//This app is not mapped to any CCU8 slice.
<%}}%>

/**
 * @}
 */
 
/*CODE_BLOCK_END*/
