<%@ jet package="CodeGenerator" class="adcgroup001_confc_template"
imports="java.util.* java.text.* com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>
<% int Is45Device = -1; %>
<% Is45Device = ((app.getSoftwareId().substring(0,2).compareTo("45")==0)?1:0); %>
/*CODE_BLOCK_BEGIN[ADCGROUP001Conf.c]*/

/*******************************************************************************
 Copyright (c) 2013, Infineon Technologies AG                                 **
 All rights reserved.                                                         **
                                                                              **
 Redistribution and use in source and binary forms, with or without           **
 modification,are permitted provided that the following conditions are met:   **
                                                                              **
 *Redistributions of source code must retain the above copyright notice,      **
 this list of conditions and the following disclaimer.                        **
 *Redistributions in binary form must reproduce the above copyright notice,   **
 this list of conditions and the following disclaimer in the documentation    **
 and/or other materials provided with the distribution.                       **
 *Neither the name of the copyright holders nor the names of its contributors **
 may be used to endorse or promote products derived from this software without**
 specific prior written permission.                                           **
                                                                              **
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
 ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
 LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
 SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
 CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
 POSSIBILITY OF SUCH DAMAGE.                                                  **
                                                                              **
 To improve the quality of the software, users are encouraged to share        **
 modifications, enhancements or bug fixes with Infineon Technologies AG       **
 dave@infineon.com).                                                          **
                                                                              **
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR   : DAVE App Developer                                              **
**                                                                            **
** MAY BE CHANGED BY USER [yes/Yes]: Yes                                      **
**                                                                            **
** MODIFICATION DATE : Jun 09, 2014                                          **
**                                                                            **
*******************************************************************************/

/*******************************************************************************
**                       Author(s) Identity                                   **
********************************************************************************
**                                                                            **
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** CM           DAVE App Developer                                            **
*******************************************************************************/

/*
 * Change History:
 * Date       version       Details
 * 01-Jan-2013   1.0.6    Initial code added for XMC1000
 * 29-Jan-2013   1.0.8    Merging with XMC1000 done
 * 09-Apr-2013   1.0.12   Channel selection style is removed and made EMXCSS=1
 *                        always
 * 24-Apr-2013   1.0.14   Ported to XMC4500 step AB 
 * 11-Jun-2013   1.0.16   1.Variable name in manifest is corrected.
 *                        2.In the Header comment section device name changed to
 *                         XMC1000.
 *                        3.copy right year changed to 2013
 * 11-Sep-2013   1.0.20   1. Analog converter control(ANONC) Code sequence
 *                           corrected.
 *                        2. Added support for the following devices under 
 *                        XMC1200 and XMC1300 Series - XMC1201, XMC1202, XMC1301
 * 09-Jun-2014   1.0.28   ADC conversion time calculations are updated for XMC1X 
 *                        devices.
 *                        Order of function call for post calibration function is updated.
 */
 
<% String AppBaseuri = "app/adcgroup001/"; %>
/**
 * @file  ADCGROUP001_Conf.c
 * @App Version ADCGROUP001 <<%=app.getAppVersion(AppBaseuri)%>>
 * @brief This file contains App parameter data as per GUI configurations
 */

#include <DAVE3.h>

<% String appInst  = null; %>
<% String ConfigUri = null; %>
<% String kernelUri = null; %>
<% String kernelNo = null; %>


<% ArrayList<String> appsList = (ArrayList<String>)(app.getApps("app/adcgroup001/"));

for (String appIns : appsList ) {
    appInst = appIns.substring(appIns.lastIndexOf("/")+1);%>
<% ConfigUri = app.getMappedUri(AppBaseuri + appInst +"/adcgroupconfig"); %>
<% if ((ConfigUri != null) && (ConfigUri.trim() != "")) { %>
<% kernelUri = ConfigUri.substring(ConfigUri.length()-8,ConfigUri.indexOf("/config")); %>
<% kernelNo = kernelUri.substring(kernelUri.length() -1); %>

ADCGROUP001_DynamicDataType ADCGROUP001_DynamicHandle<%= appInst%> =
{
  .State = ADCGROUP001_UNINITIALIZED
};


const ADCGROUP001_HandleType ADCGROUP001_Handle<%= appInst%> =
{
  .kGroupNo = (uint8_t)<%=kernelNo%>,
  .kPostCalibration = (uint8_t)<% if (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwdatapostcalibration/0") == 1){%>ADCGROUP001_AUTOPOSTCALIBRATION,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwdatapostcalibration/0") == 0){%>ADCGROUP001_POSTCALIBRATIONDISABLE,<%} %>
  .kArbitrationMode = (uint8_t)<% if (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwdataarbitrationmode/0") == 1){%>ADCGROUP001_RUNSPERMANENTLY,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwdataarbitrationmode/1") == 1){%>ADCGROUP001_RUNSONREQUEST,<%} %>
  .kGrpBoundary0 = (uint16_t)<%= app.getIntegerValue(AppBaseuri + appInst +"/adcgroup001_irwgrpboundary0") %>,  
  .kGrpBoundary1 = (uint16_t)<%= app.getIntegerValue(AppBaseuri + appInst +"/adcgroup001_irwgrpboundary1") %>, 
  .kEMUXCodeScheme = (uint8_t)<% if (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwemuxcodingscheme/0") == 1){%>ADCGROUP001_BINARYCODE,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwemuxcodingscheme/1") == 1){%>ADCGROUP001_GRAYCODE,<%} %> 
  .kEMUXStartSelect = (uint8_t)<%if (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwemuxmode/0") != 1){%><%= app.getIntegerValue(AppBaseuri + appInst +"/adcgroup001_irwemuxset") %>,<%} else{%>0,<%}%>
  .kEMUXMode = (uint8_t)<% if (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwemuxmode/0") == 1){%>ADCGROUP001_SOFTWARECONTROLMODE,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwemuxmode/1") == 1){%>ADCGROUP001_STEADYMODE,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwemuxmode/2") == 1){%>ADCGROUP001_SINGLESTEPMODE,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwemuxmode/3") == 1){%>ADCGROUP001_SEQUENCEMODE,<%}%>
  .kAnalogConverterCtrl = (uint8_t)ADCGROUP001_ANALOG_CONVERTER_ON,
  .VADCGlobalPtr= (VADC_GLOBAL_TypeDef*)(void*)VADC,
  .VADCGroupPtr= (VADC_G_TypeDef*)(void*) VADC_G<%= kernelNo%>,
  .DynamicHandlePtr= &ADCGROUP001_DynamicHandle<%= appInst%>,
  .kConversionModeClass0 = (uint8_t)<% if (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwconversionmodeclass0/0") == 1){%>ADCGROUP001_12BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwconversionmodeclass0/1") == 1){%>ADCGROUP001_10BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwconversionmodeclass0/2") == 1){%>ADCGROUP001_8BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwconversionmodeclass0/3") == 1){%>ADCGROUP001_10BITFAST,<%} %>
  .kConversionModeClass1 = (uint8_t)<% if (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwconversionmodeclass1/0") == 1){%>ADCGROUP001_12BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwconversionmodeclass1/1") == 1){%>ADCGROUP001_10BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwconversionmodeclass1/2") == 1){%>ADCGROUP001_8BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwconversionmodeclass1/3") == 1){%>ADCGROUP001_10BITFAST,<%} %>
  .kEMUXConversionModeClass0 = (uint8_t)<% if (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwemuxconversionmodeclass0/0") == 1){%>ADCGROUP001_12BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwemuxconversionmodeclass0/1") == 1){%>ADCGROUP001_10BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwemuxconversionmodeclass0/2") == 1){%>ADCGROUP001_8BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwemuxconversionmodeclass0/3") == 1){%>ADCGROUP001_10BITFAST,<%} %>
  .kEMUXConversionModeClass1 = (uint8_t)<% if (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwemuxconversionmodeclass1/0") == 1){%>ADCGROUP001_12BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwemuxconversionmodeclass1/1") == 1){%>ADCGROUP001_10BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwemuxconversionmodeclass1/2") == 1){%>ADCGROUP001_8BIT,<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_erwemuxconversionmodeclass1/3") == 1){%>ADCGROUP001_10BITFAST,<%} %>
  .kSampleTimeControlClass0 = (uint8_t)<%= app.getIntegerValue(AppBaseuri + appInst +"/adcgroup001_irwactualsampletimecontrolclass0") %>,
  .kSampleTimeControlClass1 = (uint8_t)<%= app.getIntegerValue(AppBaseuri + appInst +"/adcgroup001_irwactualsampletimecontrolclass1") %>,
  .kEMUXSampleTimeControlClass0 = (uint8_t)<%= app.getIntegerValue(AppBaseuri + appInst +"/adcgroup001_irwemuxactualsampletimecontrolclass0") %>,
  .kEMUXSampleTimeControlClass1 = (uint8_t)<%= app.getIntegerValue(AppBaseuri + appInst +"/adcgroup001_irwemuxactualsampletimecontrolclass1") %>  
 };

<%}%>
<%else {%>
// This app is not mapped to any Group
<%}%>
<%}%>
/*CODE_BLOCK_END*/
