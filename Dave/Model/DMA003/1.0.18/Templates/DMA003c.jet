<%@ jet package="CodeGenerator" class="DMA003Template" 
imports="java.util.* com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>

/*CODE_BLOCK_BEGIN[DMA003.c]*/

/*******************************************************************************
 Copyright (c) 2012, Infineon Technologies AG                                 **
 All rights reserved.                                                         **
                                                                              **
 Redistribution and use in source and binary forms, with or without           **
 modification,are permitted provided that the following conditions are met:   **
                                                                              **
 *Redistributions of source code must retain the above copyright notice,      **
 this list of conditions and the following disclaimer.                        **
 *Redistributions in binary form must reproduce the above copyright notice,   **
 this list of conditions and the following disclaimer in the documentation    **
 and/or other materials provided with the distribution.                       **
 *Neither the name of the copyright holders nor the names of its contributors **
 may be used to endorse or promote products derived from this software without** 
 specific prior written permission.                                           **
                                                                              **
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
 ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
 LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
 SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
 CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
 POSSIBILITY OF SUCH DAMAGE.                                                  **
                                                                              **
 To improve the quality of the software, users are encouraged to share        **
 modifications, enhancements or bug fixes with Infineon Technologies AG       **
 dave@infineon.com).                                                          **
                                                                              **
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC4XXX Series                                         **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR   : App Developer                                                   **
**                                                                            **
** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
**                                                                            **
** MODIFICATION DATE : Feb 11, 2013                                           **
**                                                                            **
*******************************************************************************/
/*******************************************************************************
**                      Author(s) Identity                                    **
********************************************************************************
**                                                                            **
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** PAE        App Developer                                                   **
*******************************************************************************/
/**
 * @file   DMA003.c
 *
 * @brief  Standard DMA Application
 *
 */
 /*
 * Revision History
 * 18 Jan 2013 v1.0.11 Initial version
 * 11 Feb 2013 v1.0.12 Channel priority bug fix
 * 13 Feb 2013 v1.0.12 Misra update
 */

/*******************************************************************************
 ** INCLUDE FILES                                                             **
 ******************************************************************************/
/** Inclusion of header file */
#include <DAVE3.h>

<% String TempApps = null;
   String MyAppName = null;
   ArrayList<String> apps;
   String TempLowerApps = null; 
   boolean DBGApp = false;   
   apps=(ArrayList<String>)(app.getApps());
        for (int k = 0; k < apps.size(); k++) {
              TempApps = apps.get(k);
//            if(app.isAppInitProvider(apps.get(k)) == true) {
              MyAppName = TempApps.substring(TempApps.indexOf("/app/") + 5, TempApps.lastIndexOf("/"));
              TempLowerApps = MyAppName.toLowerCase();
              if (TempLowerApps.equalsIgnoreCase("dbg002")) {DBGApp = true;}   
//   }  
  } %>

<% if (!DBGApp) { %>  
/*****************************************************************************
              DUMMY DEFINTIONS OF DEBUG LOG MACROS
*****************************************************************************/
/*These definitions are included here to avoid compilation errors,
 since the DBG002 app is not part of the project. All the macros are defined
 as empty*/ 
#ifndef _DBG002_H_

#define DBG002_RegisterCallBack(A,B,C)
#define DBG002_I(e) 
#define DBG002_IG(e,g) 
#define DBG002_IH(e,h) 
#define DBG002_IP(e,p) 
#define DBG002_IGH(e,g,h) 
#define DBG002_IGP(e,g,p) 
#define DBG002_IHP(e,h,p) 
#define DBG002_IGHP(e,g,h,p) 
#define DBG002_N(e) 
#define DBG002_NG(e,g) 
#define DBG002_NH(e,h) 
#define DBG002_NP(e,p) 
#define DBG002_NGH(e,g,h) 
#define DBG002_NGP(e,g,p) 
#define DBG002_NHP(e,h,p) 
#define DBG002_NGHP(e,g,h,p) 
#define DBG002_ID(e) 
#define DBG002_IS(e) 
#define DBG002_ISG(e,g) 
#define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
#define DBG002_CRITICAL(groupid,messageid,length,value)
#define DBG002_ERROR(groupid,messageid,length,value)
#define DBG002_WARNING(groupid,messageid,length,value)
#define DBG002_INFO(groupid,messageid,length,value)
#define DBG002_TRACE(groupid,messageid,length,value)
#define DBG002_FUNCTION_ENTRY(GID, Status) 
#define DBG002_FUNCTION_EXIT(GID, Status) 

#endif/* End of defintions of dummy Debug Log macros*/
<% } %>                  

/*******************************************************************************
**                      Private Macro Definitions                             **
*******************************************************************************/
#undef APP_GID
#define APP_GID DBG002_GID_DMA003

/*******************************************************************************
**                      Private Type Definitions                              **
*******************************************************************************/

/*******************************************************************************
**                 Private Function Declarations:
*******************************************************************************/

static status_t DMA003_lCheckChannelBusy(const DMA003_ChannelHandleType* Handle);

static status_t DMA003_lStartTransfer(const DMA003_ChannelHandleType* Handle);

static status_t DMA003_lCheckConfigParameters(const DMA003_ChannelConfigType* ChConfig);

static void DMA003_lInit(const DMA003_ChannelHandleType* Handle);
/*******************************************************************************
**                      Global Constant Definitions                           **
*******************************************************************************/

/*******************************************************************************
**                      Global Variable Definitions                           **
*******************************************************************************/

/*******************************************************************************
**                      Private Constant Definitions                          **
*******************************************************************************/

/*******************************************************************************
**                 Function like macro definitions                            **
*******************************************************************************/
/*******************************************************************************
**                      Private Function Definitions                          **
*******************************************************************************/
static status_t DMA003_lCheckChannelBusy(const DMA003_ChannelHandleType* Handle)
{
  GPDMA0_GLOBAL_TypeDef* DMARegs = Handle->DMARegs;
  uint8_t Channel = Handle->ChannelID;
  status_t Status = (uint32_t)DAVEApp_SUCCESS;
  /* <<<DD_DMA003_PRIVATE_API_1>>> */
  if((DMARegs->CHENREG) & ((uint32_t)0x01U << Channel))
  {
      Status = (status_t)DMA_EBUSY;
  }
  return Status;
}

/* Local function to Enable Channel Enable Register */
static status_t DMA003_lStartTransfer(const DMA003_ChannelHandleType* Handle)
{

  GPDMA0_GLOBAL_TypeDef* DMARegs = Handle->DMARegs;
  uint8_t Channel = Handle->ChannelID;
  status_t Status = (uint32_t)DAVEApp_SUCCESS;
  
  /* <<<DD_DMA003_PRIVATE_API_2>>> */
  Status = DMA003_lCheckChannelBusy(Handle);
    
  if(Status == (uint32_t)DAVEApp_SUCCESS)
  {
      /* UnMask  channel interrupts based on UI Settings */
	  if(Handle->TfrEventEn)
	  {
		  DMARegs->MASKTFR   = DMA_CH_NUM(Channel);
	  }
	  if(Handle->BlockEventEn)
	  {
		  DMARegs->MASKBLOCK = DMA_CH_NUM(Channel);
	  }
	  if(Handle->ErrorEventEn)
	  {
		  DMARegs->MASKERR   = DMA_CH_NUM(Channel);
	  }
	  if(Handle->SrcTranEventEn)
	  {
		  DMARegs->MASKSRCTRAN = DMA_CH_NUM(Channel);
	  }
	  if(Handle->DstTranEventEn)
	  {
		  DMARegs->MASKDSTTRAN   = DMA_CH_NUM(Channel);
	  }
  }
  /* Enable the channel */
  DMARegs->CHENREG = DMA_CH_NUM(Channel);
  
  return Status;
}

static status_t DMA003_lCheckConfigParameters(const DMA003_ChannelConfigType* ChConfig)
{
  status_t Status = (uint32_t)DAVEApp_SUCCESS;
  if(ChConfig->TransferFlow > DMA_PRF2MEM_DMA)
  {
    Status = (status_t)DMA_EINVAL;
  }
  if(ChConfig->ChPriority > DMA_PRIORITY_7)
  {
    Status = (status_t)DMA_EINVAL;
  }
  if(ChConfig->SrcTrWidth > DMA_TRANS_WIDTH_256)
  {
    Status = (status_t)DMA_EINVAL;
  }
  if(ChConfig->DstTrWidth > DMA_TRANS_WIDTH_256)
  {
    Status = (status_t)DMA_EINVAL;
  }
  if(ChConfig->SrcMSize > DMA_MSIZE_256)
  {
    Status = (status_t)DMA_EINVAL;
  }
  if(ChConfig->DstMSize > DMA_MSIZE_256)
  {
    Status = (status_t)DMA_EINVAL;
  }
  if(ChConfig->SrcInc > DMA_ADDR_NOCHANGE)  
  {
    Status = (status_t)DMA_EINVAL;
  }
  if(ChConfig->DstInc > DMA_ADDR_NOCHANGE)
  {
    Status = (status_t)DMA_EINVAL;
  }
  return Status;
}

static void DMA003_lInit(const DMA003_ChannelHandleType* Handle)
{

  GPDMA0_CH_TypeDef* DMAChRegs = Handle->DMAChRegs;

  DBG002_FUNCTION_ENTRY(APP_GID,DMA003_FUN_ENTRY);
  /* <<<DD_DMA003_API_1>>> */

  /* <<<DD_DMA003_API_1_1>>> */
  /* Set the Source and destination addresses */
  DMAChRegs->SAR = (uint32_t) Handle->ChConfig.SrcAddress;
  DMAChRegs->DAR = (uint32_t) Handle->ChConfig.DstAddress;
  DMAChRegs->LLP = (uint32_t)0x00000000;
  /* Set the Channel Configuration Parameters */
  DMAChRegs->CTLL  = (DMA_CTLL_DST_WIDTH(Handle->ChConfig.DstTrWidth) \
                  | DMA_CTLL_SRC_WIDTH(Handle->ChConfig.SrcTrWidth) \
                  | DMA_CTLL_DST_INC(Handle->ChConfig.DstInc)     \
                  | DMA_CTLL_SRC_INC(Handle->ChConfig.SrcInc)     \
                  | DMA_CTLL_DST_MSIZE(Handle->ChConfig.DstMSize)  \
                  | DMA_CTLL_SRC_MSIZE(Handle->ChConfig.SrcMSize)  \
                  | DMA_CTLL_FC(Handle->ChConfig.TransferFlow)    \
                  | DMA_CTLL_INT_EN );
 

  /* Set the block size for the DMA transfer */
  DMAChRegs->CTLH = ((uint32_t)GPDMA0_CH_CTLH_BLOCK_TS_Msk & Handle->ChConfig.BlockSize);
  
  /* Set the channel configuration */

  /* Polarity should be Active High */
  DMAChRegs->CFGL &= ~(DMA_CFGL_CH_PRIOR_Msk);
  DMAChRegs->CFGL |=( (DMA_CFGL_CH_PRIOR(Handle->ChConfig.ChPriority)) & DMA_CFGL_CH_PRIOR_Msk );
 
  /*Hardware handshaking register bits enabled */
  if(Handle->HWHandshakeEnabled)
  { 
    if(Handle->ChConfig.TransferFlow == DMA_PRF2MEM_DMA)
    {
	  DMA_CFGL_SET_HS_SRC(DMAChRegs->CFGL);
    }
	else
	{
	  DMA_CFGL_SET_HS_DST(DMAChRegs->CFGL);
	}
  }
 
  /* Check if channel enabling at initialization is enabled*/ 
  /* <<<DD_DMA003_API_1_3>>> */
  if(Handle->ChannelEnabled)
  {
    DMA003_lStartTransfer(Handle);
  }

  DBG002_FUNCTION_EXIT(APP_GID,DMA003_FUN_EXIT);

}

/*******************************************************************************
**                      Public Function Definitions                           **
*******************************************************************************/
/*  Function to initialize the DMA channel parameters based on 
 *  user configuration.
 */
void DMA003_Init(void)
{
<% String AppBaseuri = "app/dma003/";%>
<% String MappedUri = null; %>
<% int HWMode = 0; %>
<% String DLRInst = null; %>
<% String appInst  = null; %>

<% ArrayList<String> appsList = (ArrayList<String>)(app.getApps("app/dma003/"));
 for (String appIns : appsList ) {
 appInst = appIns.substring(appIns.lastIndexOf("/")+1);%>
<% MappedUri = app.getMappedUri(AppBaseuri + appInst + "/channel"); %>
<% if((MappedUri != null) && (MappedUri != "")) { %>
  DMA003_lInit(&DMA003_Handle<%=appInst%>);
<%String EventHandler = app.getStringValue(AppBaseuri + appInst +"/DMA003_irwCallbackFunc");
  if((EventHandler != null) && (EventHandler != "")) { %>
  /* Register User defined Event Handler function */  
  DMA003_SetListener(&DMA003_Handle<%=appInst%>,<%=EventHandler%>,0);
  <% } %>
<% HWMode = app.getIntegerValue(AppBaseuri + appInst +"/DMA003_erwChannelHWSel/0"); 
if(HWMode == 1) {
 MappedUri = app.getMappedUri(AppBaseuri + appInst + "/dlr");
 DLRInst= MappedUri.substring(MappedUri.indexOf("/peripheral/dlr/")+21,MappedUri.length());
 int Unit = Integer.parseInt(DLRInst); %>
  /* Enable DLR Line */
  DLR->LNEN |= DLR_LNEN_LN<%=Unit%>_Msk;
<% }} %>
<% else { %>
/* DMA CHANNEL NOT MAPPED FOR INSTANCE <%=appInst%> */
<% } %>

<%} %> 

}

/*  Function to reset channel parameters to default values.
 * 
 */
void  DMA003_DeInitChannel(const DMA003_ChannelHandleType* Handle)
{
  GPDMA0_CH_TypeDef* DMAChRegs = Handle->DMAChRegs;
  
  DBG002_FUNCTION_ENTRY(APP_GID,DMA003_FUN_ENTRY);
  
  /* <<<DD_DMA003_API_2>>> */
  DMAChRegs->SAR   = 0x00000000UL;
  DMAChRegs->DAR   = 0x00000000UL;
  DMAChRegs->CTLL  = 0x00304801UL;
  DMAChRegs->CTLH  = 0x00000002UL;
  DMAChRegs->CFGL  = 0x00000E40UL;
  DMAChRegs->CFGH  = 0x00000004UL;
  DMAChRegs->LLP   = 0x00000000UL;
  
  DBG002_FUNCTION_EXIT(APP_GID,DMA003_FUN_EXIT);
}

/*   Function to Get the DMA Channel parameters at run time.
 * 
 */
status_t  DMA003_GetChannelTransferParams 
( 
  const DMA003_ChannelHandleType* Handle,
  DMA003_ChannelConfigType* ChConfig
)
{
  GPDMA0_CH_TypeDef* DMAChRegs = Handle->DMAChRegs;
  status_t Status = (uint32_t)DAVEApp_SUCCESS;
  /* <<<DD_DMA003_API_3>>> */
  DBG002_FUNCTION_ENTRY(APP_GID,DMA003_FUN_ENTRY);

  if (ChConfig != NULL)
  {
    /*Copy the Channel configuration to the Channel Structure */
    ChConfig->SrcAddress = DMAChRegs->SAR;
    
    ChConfig->DstAddress = DMAChRegs->DAR;
    
    ChConfig->DstTrWidth = (DMA_TransferWidthType)RD_REG(DMAChRegs->CTLL,\
        GPDMA0_CH_CTLL_DST_TR_WIDTH_Msk, GPDMA0_CH_CTLL_DST_TR_WIDTH_Pos);                       
    
    ChConfig->SrcTrWidth = (DMA_TransferWidthType)RD_REG(DMAChRegs->CTLL,\
        GPDMA0_CH_CTLL_SRC_TR_WIDTH_Msk, GPDMA0_CH_CTLL_SRC_TR_WIDTH_Pos);
    
    ChConfig->DstInc = (DMA_AddrIncType)RD_REG(DMAChRegs->CTLL, \
        GPDMA0_CH_CTLL_DINC_Msk, GPDMA0_CH_CTLL_DINC_Pos);                      
                          
    ChConfig->SrcInc = (DMA_AddrIncType)RD_REG(DMAChRegs->CTLL,  \
        GPDMA0_CH_CTLL_SINC_Msk, GPDMA0_CH_CTLL_SINC_Pos);
    
    ChConfig->DstMSize = (DMA_BurstTransLenType)RD_REG(DMAChRegs->CTLL,\
        GPDMA0_CH_CTLL_DEST_MSIZE_Msk, GPDMA0_CH_CTLL_DEST_MSIZE_Pos);
    
    ChConfig->SrcMSize = (DMA_BurstTransLenType)RD_REG(DMAChRegs->CTLL, \
        GPDMA0_CH_CTLL_SRC_MSIZE_Msk, GPDMA0_CH_CTLL_SRC_MSIZE_Pos);
   
    ChConfig->TransferFlow = (DMA_TransferFlowType)RD_REG(DMAChRegs->CTLL,\
        GPDMA0_CH_CTLL_TT_FC_Msk, GPDMA0_CH_CTLL_TT_FC_Pos);  
          
    ChConfig->BlockSize = RD_REG(DMAChRegs->CTLH,      \
        (uint32_t)GPDMA0_CH_CTLH_BLOCK_TS_Msk, GPDMA0_CH_CTLH_BLOCK_TS_Pos);
        
    ChConfig->ChPriority = (DMA_ChPriorityType)RD_REG(DMAChRegs->CFGL,      \
    					   GPDMA0_CH_CFGL_CH_PRIOR_Msk, GPDMA0_CH_CFGL_CH_PRIOR_Pos);
  }
  else
  {
    Status = (status_t)DMA_EINVAL;
  }
  DBG002_FUNCTION_EXIT(APP_GID,DMA003_FUN_EXIT);
  return Status;

}

/*  This function allows runtime configuration of channel configuration
 *   parameters to be changed. 
 */ 
status_t  DMA003_SetChannelTransferParams 
( 
  const DMA003_ChannelHandleType* Handle,
  const DMA003_ChannelConfigType* ChConfig
)
{
  GPDMA0_CH_TypeDef* DMAChRegs = Handle->DMAChRegs;
  status_t Status = (uint32_t)DAVEApp_SUCCESS;
  uint32_t Reg;
 /* <<<DD_DMA003_API_4>>> */
  DBG002_FUNCTION_ENTRY(APP_GID,DMA003_FUN_ENTRY);
   /* Check for valid not busy  */
   Status = DMA003_lCheckChannelBusy(Handle);
   /* Check for proper range */
   if(Status == (uint32_t)DAVEApp_SUCCESS)
   {  
     Status = DMA003_lCheckConfigParameters(ChConfig);
   }

  if(Status == (uint32_t)DAVEApp_SUCCESS)
  { 
    /* Set the Source and destination addresses */
  DMAChRegs->SAR = (uint32_t)ChConfig->SrcAddress;
  DMAChRegs->DAR = (uint32_t)ChConfig->DstAddress;
    
    /* Set the Channel Configuration Parameters */
    Reg   = (DMA_CTLL_DST_WIDTH(ChConfig->DstTrWidth) \
                 | DMA_CTLL_SRC_WIDTH(ChConfig->SrcTrWidth) \
                 | DMA_CTLL_DST_INC(ChConfig->DstInc)     \
                 | DMA_CTLL_SRC_INC(ChConfig->SrcInc)     \
                 | DMA_CTLL_DST_MSIZE(ChConfig->DstMSize)  \
                 | DMA_CTLL_SRC_MSIZE(ChConfig->SrcMSize)  \
                 | DMA_CTLL_FC(ChConfig->TransferFlow)    \
                 | DMA_CTLL_INT_EN );
                 
    DMAChRegs->CTLL = Reg;
    /* Set the block size for the DMA transfer */
    DMAChRegs->CTLH = ( (uint32_t)GPDMA0_CH_CTLH_BLOCK_TS_Msk & ChConfig->BlockSize);
    
    DMAChRegs->CFGL &= ~(DMA_CFGL_CH_PRIOR_Msk);
    DMAChRegs->CFGL |=( (DMA_CFGL_CH_PRIOR(ChConfig->ChPriority)) & DMA_CFGL_CH_PRIOR_Msk );
     
  }
  
  DBG002_FUNCTION_EXIT(APP_GID,DMA003_FUN_EXIT);
  return Status;
}

/*  Function to register user callback
 *   
 */
void DMA003_SetListener(
  const DMA003_ChannelHandleType* Handle,
  DMACallbackType userFunction,
  uint32_t CbArgs)
{
  /* <<<DD_DMA003_API_5>>> */
  if(userFunction !=NULL)
  {
      NVIC_DMA001_RegisterCallback(Handle->NVICDMA_Handle,Handle->ChannelID,userFunction,CbArgs);    
  }
}

/*  This function starts the DMA tranfer for the requested channel.
 *   
 */
status_t DMA003_StartTransfer(const DMA003_ChannelHandleType* Handle)
{

  status_t Status = (uint32_t)DAVEApp_SUCCESS;
  DBG002_FUNCTION_ENTRY(APP_GID,DMA003_FUN_ENTRY);
  /* <<<DD_DMA003_API_6>>> */
  Status = DMA003_lStartTransfer(Handle);
  
  DBG002_FUNCTION_EXIT(APP_GID,DMA003_FUN_EXIT);
  
  return Status;
}


/*  This function is for software triggered DMA transfer.
 *   
 */
void  DMA003_TriggerSWTransfer(
  const DMA003_ChannelHandleType* Handle,
  DMA_SWRequestType Request)
{
  GPDMA0_GLOBAL_TypeDef* DMARegs = Handle->DMARegs;
  uint8_t Channel = Handle->ChannelID;
  DBG002_FUNCTION_ENTRY(APP_GID,DMA003_FUN_ENTRY);
  /* <<<DD_DMA003_API_7>>> */
  if(Request == DMA_SRC_BURST) {
	 DMARegs->REQSRCREG    = DMA_CH_NUM(Channel);
	 DMARegs->SGLREQSRCREG = DMA_CH_NUM(Channel);
  }else if(Request == DMA_SRC_SINGLE) {
 	 DMARegs->SGLREQSRCREG = DMA_CH_NUM(Channel);
	  
  }else if(Request == DMA_DST_BURST) {
	 DMARegs->REQDSTREG    = DMA_CH_NUM(Channel);
	 DMARegs->SGLREQDSTREG = DMA_CH_NUM(Channel);
  	  
  }else if(Request == DMA_DST_SINGLE) {
	 DMARegs->SGLREQDSTREG = DMA_CH_NUM(Channel);  
  }
  else
  {
	  /* no code*/
  }
  DBG002_FUNCTION_EXIT(APP_GID,DMA003_FUN_EXIT);

}

/*  Utility function to reload user configuration for DMA channel.
 *   
 */
void DMA003_ReloadUserConfiguration(const DMA003_ChannelHandleType* Handle)
{  
  /* <<<DD_DMA003_API_8>>> */
  DBG002_FUNCTION_ENTRY(APP_GID,DMA003_FUN_ENTRY);
  DMA003_lInit(Handle);
  DBG002_FUNCTION_EXIT(APP_GID,DMA003_FUN_EXIT);
}

/*CODE_BLOCK_END*/

